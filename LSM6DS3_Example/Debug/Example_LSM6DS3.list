
Example_LSM6DS3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b710  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b8  0800b820  0800b820  0001b820  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bbd8  0800bbd8  00020350  2**0
                  CONTENTS
  4 .ARM          00000000  0800bbd8  0800bbd8  00020350  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bbd8  0800bbd8  00020350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bbd8  0800bbd8  0001bbd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bbdc  0800bbdc  0001bbdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  0800bbe0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001278  20000350  0800bf30  00020350  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015c8  0800bf30  000215c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020350  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019f72  00000000  00000000  00020379  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000039db  00000000  00000000  0003a2eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001450  00000000  00000000  0003dcc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012b8  00000000  00000000  0003f118  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018d1d  00000000  00000000  000403d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011a88  00000000  00000000  000590ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00079978  00000000  00000000  0006ab75  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e44ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063f4  00000000  00000000  000e4568  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000350 	.word	0x20000350
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b808 	.word	0x0800b808

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000354 	.word	0x20000354
 800014c:	0800b808 	.word	0x0800b808

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000be4:	f1a2 0201 	sub.w	r2, r2, #1
 8000be8:	d1ed      	bne.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_f2uiz>:
 8000fe4:	0042      	lsls	r2, r0, #1
 8000fe6:	d20e      	bcs.n	8001006 <__aeabi_f2uiz+0x22>
 8000fe8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fec:	d30b      	bcc.n	8001006 <__aeabi_f2uiz+0x22>
 8000fee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ff2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ff6:	d409      	bmi.n	800100c <__aeabi_f2uiz+0x28>
 8000ff8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ffc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001000:	fa23 f002 	lsr.w	r0, r3, r2
 8001004:	4770      	bx	lr
 8001006:	f04f 0000 	mov.w	r0, #0
 800100a:	4770      	bx	lr
 800100c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001010:	d101      	bne.n	8001016 <__aeabi_f2uiz+0x32>
 8001012:	0242      	lsls	r2, r0, #9
 8001014:	d102      	bne.n	800101c <__aeabi_f2uiz+0x38>
 8001016:	f04f 30ff 	mov.w	r0, #4294967295
 800101a:	4770      	bx	lr
 800101c:	f04f 0000 	mov.w	r0, #0
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	0000      	movs	r0, r0
	...

08001028 <Start_Kalman_Algorithm>:
__IO static uint32_t Kalman_Timer, ExecuteTicks , ExecuteMax;
__IO static uint8_t KalmanFlag;
static float Calculated_Pitch, Calculated_Roll, Tick_frequency;

void Start_Kalman_Algorithm(float executeMaxTicks, float timebase)
{
 8001028:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800102c:	b08c      	sub	sp, #48	; 0x30
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
 8001032:	6039      	str	r1, [r7, #0]
    double accX, accY, accZ; 
  
    /* We will set the variables like so, these can also be tuned by the user */
    KalmanX.Q_angle      = 0.001f;
 8001034:	4b64      	ldr	r3, [pc, #400]	; (80011c8 <Start_Kalman_Algorithm+0x1a0>)
 8001036:	4a65      	ldr	r2, [pc, #404]	; (80011cc <Start_Kalman_Algorithm+0x1a4>)
 8001038:	601a      	str	r2, [r3, #0]
    KalmanX.Q_bias       = 0.003f;
 800103a:	4b63      	ldr	r3, [pc, #396]	; (80011c8 <Start_Kalman_Algorithm+0x1a0>)
 800103c:	4a64      	ldr	r2, [pc, #400]	; (80011d0 <Start_Kalman_Algorithm+0x1a8>)
 800103e:	605a      	str	r2, [r3, #4]
    KalmanX.R_measure    = 0.03f;
 8001040:	4b61      	ldr	r3, [pc, #388]	; (80011c8 <Start_Kalman_Algorithm+0x1a0>)
 8001042:	4a64      	ldr	r2, [pc, #400]	; (80011d4 <Start_Kalman_Algorithm+0x1ac>)
 8001044:	609a      	str	r2, [r3, #8]
    KalmanX.angle        = 0.0f;     
 8001046:	4b60      	ldr	r3, [pc, #384]	; (80011c8 <Start_Kalman_Algorithm+0x1a0>)
 8001048:	f04f 0200 	mov.w	r2, #0
 800104c:	60da      	str	r2, [r3, #12]
    KalmanX.bias         = 0.0f;
 800104e:	4b5e      	ldr	r3, [pc, #376]	; (80011c8 <Start_Kalman_Algorithm+0x1a0>)
 8001050:	f04f 0200 	mov.w	r2, #0
 8001054:	611a      	str	r2, [r3, #16]
    KalmanX.P[0][0]      = 0.0f; 
 8001056:	4b5c      	ldr	r3, [pc, #368]	; (80011c8 <Start_Kalman_Algorithm+0x1a0>)
 8001058:	f04f 0200 	mov.w	r2, #0
 800105c:	619a      	str	r2, [r3, #24]
    KalmanX.P[0][1]      = 0.0f;
 800105e:	4b5a      	ldr	r3, [pc, #360]	; (80011c8 <Start_Kalman_Algorithm+0x1a0>)
 8001060:	f04f 0200 	mov.w	r2, #0
 8001064:	61da      	str	r2, [r3, #28]
    KalmanX.P[1][0]      = 0.0f;
 8001066:	4b58      	ldr	r3, [pc, #352]	; (80011c8 <Start_Kalman_Algorithm+0x1a0>)
 8001068:	f04f 0200 	mov.w	r2, #0
 800106c:	621a      	str	r2, [r3, #32]
    KalmanX.P[1][1]      = 0.0f;
 800106e:	4b56      	ldr	r3, [pc, #344]	; (80011c8 <Start_Kalman_Algorithm+0x1a0>)
 8001070:	f04f 0200 	mov.w	r2, #0
 8001074:	625a      	str	r2, [r3, #36]	; 0x24
    
    KalmanY.Q_angle      = 0.001f;
 8001076:	4b58      	ldr	r3, [pc, #352]	; (80011d8 <Start_Kalman_Algorithm+0x1b0>)
 8001078:	4a54      	ldr	r2, [pc, #336]	; (80011cc <Start_Kalman_Algorithm+0x1a4>)
 800107a:	601a      	str	r2, [r3, #0]
    KalmanY.Q_bias       = 0.003f;
 800107c:	4b56      	ldr	r3, [pc, #344]	; (80011d8 <Start_Kalman_Algorithm+0x1b0>)
 800107e:	4a54      	ldr	r2, [pc, #336]	; (80011d0 <Start_Kalman_Algorithm+0x1a8>)
 8001080:	605a      	str	r2, [r3, #4]
    KalmanY.R_measure    = 0.03f;
 8001082:	4b55      	ldr	r3, [pc, #340]	; (80011d8 <Start_Kalman_Algorithm+0x1b0>)
 8001084:	4a53      	ldr	r2, [pc, #332]	; (80011d4 <Start_Kalman_Algorithm+0x1ac>)
 8001086:	609a      	str	r2, [r3, #8]
    KalmanY.angle        = 0.0f;     
 8001088:	4b53      	ldr	r3, [pc, #332]	; (80011d8 <Start_Kalman_Algorithm+0x1b0>)
 800108a:	f04f 0200 	mov.w	r2, #0
 800108e:	60da      	str	r2, [r3, #12]
    KalmanY.bias         = 0.0f;
 8001090:	4b51      	ldr	r3, [pc, #324]	; (80011d8 <Start_Kalman_Algorithm+0x1b0>)
 8001092:	f04f 0200 	mov.w	r2, #0
 8001096:	611a      	str	r2, [r3, #16]
    KalmanY.P[0][0]      = 0.0f; 
 8001098:	4b4f      	ldr	r3, [pc, #316]	; (80011d8 <Start_Kalman_Algorithm+0x1b0>)
 800109a:	f04f 0200 	mov.w	r2, #0
 800109e:	619a      	str	r2, [r3, #24]
    KalmanY.P[0][1]      = 0.0f;
 80010a0:	4b4d      	ldr	r3, [pc, #308]	; (80011d8 <Start_Kalman_Algorithm+0x1b0>)
 80010a2:	f04f 0200 	mov.w	r2, #0
 80010a6:	61da      	str	r2, [r3, #28]
    KalmanY.P[1][0]      = 0.0f;
 80010a8:	4b4b      	ldr	r3, [pc, #300]	; (80011d8 <Start_Kalman_Algorithm+0x1b0>)
 80010aa:	f04f 0200 	mov.w	r2, #0
 80010ae:	621a      	str	r2, [r3, #32]
    KalmanY.P[1][1]      = 0.0f;
 80010b0:	4b49      	ldr	r3, [pc, #292]	; (80011d8 <Start_Kalman_Algorithm+0x1b0>)
 80010b2:	f04f 0200 	mov.w	r2, #0
 80010b6:	625a      	str	r2, [r3, #36]	; 0x24
    
    
    LSM6DS3_IMU_GetMeasurements();
 80010b8:	f000 fd7e 	bl	8001bb8 <LSM6DS3_IMU_GetMeasurements>
    accX =   LSM6DS3_GetXL_X_Int16();
 80010bc:	f000 fdd6 	bl	8001c6c <LSM6DS3_GetXL_X_Int16>
 80010c0:	4603      	mov	r3, r0
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff f99e 	bl	8000404 <__aeabi_i2d>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    accY =   LSM6DS3_GetXL_Y_Int16();
 80010d0:	f000 fdd8 	bl	8001c84 <LSM6DS3_GetXL_Y_Int16>
 80010d4:	4603      	mov	r3, r0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff f994 	bl	8000404 <__aeabi_i2d>
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    accZ =   LSM6DS3_GetXL_Z_Int16();
 80010e4:	f000 fdda 	bl	8001c9c <LSM6DS3_GetXL_Z_Int16>
 80010e8:	4603      	mov	r3, r0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff f98a 	bl	8000404 <__aeabi_i2d>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    
    #ifdef RESTRICT_PITCH
        double roll  = atan2(accY, accZ) * RAD_TO_DEG;
 80010f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80010fc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001100:	f00a f9a0 	bl	800b444 <atan2>
 8001104:	a32e      	add	r3, pc, #184	; (adr r3, 80011c0 <Start_Kalman_Algorithm+0x198>)
 8001106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110a:	f7ff f9e5 	bl	80004d8 <__aeabi_dmul>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	e9c7 2304 	strd	r2, r3, [r7, #16]
        double pitch = atan(-accX / sqrt(accY * accY + accZ * accZ)) * RAD_TO_DEG;
 8001116:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8001118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800111a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800111e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001122:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001126:	f7ff f9d7 	bl	80004d8 <__aeabi_dmul>
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	4690      	mov	r8, r2
 8001130:	4699      	mov	r9, r3
 8001132:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001136:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800113a:	f7ff f9cd 	bl	80004d8 <__aeabi_dmul>
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	4640      	mov	r0, r8
 8001144:	4649      	mov	r1, r9
 8001146:	f7ff f811 	bl	800016c <__adddf3>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	4610      	mov	r0, r2
 8001150:	4619      	mov	r1, r3
 8001152:	f00a f979 	bl	800b448 <sqrt>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	4620      	mov	r0, r4
 800115c:	4629      	mov	r1, r5
 800115e:	f7ff fae5 	bl	800072c <__aeabi_ddiv>
 8001162:	4603      	mov	r3, r0
 8001164:	460c      	mov	r4, r1
 8001166:	4618      	mov	r0, r3
 8001168:	4621      	mov	r1, r4
 800116a:	f009 ffdd 	bl	800b128 <atan>
 800116e:	a314      	add	r3, pc, #80	; (adr r3, 80011c0 <Start_Kalman_Algorithm+0x198>)
 8001170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001174:	f7ff f9b0 	bl	80004d8 <__aeabi_dmul>
 8001178:	4603      	mov	r3, r0
 800117a:	460c      	mov	r4, r1
 800117c:	e9c7 3402 	strd	r3, r4, [r7, #8]
    #else 
        double roll  = atan(accY / sqrt(accX * accX + accZ * accZ)) * RAD_TO_DEG;
        double pitch = atan2(-accX, accZ) * RAD_TO_DEG;
    #endif
    
   KalmanX.angle    = roll;
 8001180:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001184:	f7ff fc80 	bl	8000a88 <__aeabi_d2f>
 8001188:	4602      	mov	r2, r0
 800118a:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <Start_Kalman_Algorithm+0x1a0>)
 800118c:	60da      	str	r2, [r3, #12]
   KalmanY.angle 	= pitch;
 800118e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001192:	f7ff fc79 	bl	8000a88 <__aeabi_d2f>
 8001196:	4602      	mov	r2, r0
 8001198:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <Start_Kalman_Algorithm+0x1b0>)
 800119a:	60da      	str	r2, [r3, #12]
   Tick_frequency	= timebase;
 800119c:	4a0f      	ldr	r2, [pc, #60]	; (80011dc <Start_Kalman_Algorithm+0x1b4>)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	6013      	str	r3, [r2, #0]
   ExecuteMax	    = executeMaxTicks;
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff ff1e 	bl	8000fe4 <__aeabi_f2uiz>
 80011a8:	4602      	mov	r2, r0
 80011aa:	4b0d      	ldr	r3, [pc, #52]	; (80011e0 <Start_Kalman_Algorithm+0x1b8>)
 80011ac:	601a      	str	r2, [r3, #0]
   Kalman_Timer  	= 0;
 80011ae:	4b0d      	ldr	r3, [pc, #52]	; (80011e4 <Start_Kalman_Algorithm+0x1bc>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
}
 80011b4:	bf00      	nop
 80011b6:	3730      	adds	r7, #48	; 0x30
 80011b8:	46bd      	mov	sp, r7
 80011ba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80011be:	bf00      	nop
 80011c0:	20000000 	.word	0x20000000
 80011c4:	404ca5dc 	.word	0x404ca5dc
 80011c8:	20000604 	.word	0x20000604
 80011cc:	3a83126f 	.word	0x3a83126f
 80011d0:	3b449ba6 	.word	0x3b449ba6
 80011d4:	3cf5c28f 	.word	0x3cf5c28f
 80011d8:	200005dc 	.word	0x200005dc
 80011dc:	20000384 	.word	0x20000384
 80011e0:	20000374 	.word	0x20000374
 80011e4:	2000036c 	.word	0x2000036c

080011e8 <Execute_Kalman_Filter>:
    
void Execute_Kalman_Filter(void) 
{
 80011e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011ec:	b098      	sub	sp, #96	; 0x60
 80011ee:	af00      	add	r7, sp, #0
  double timing_kalman;
  double kalAngleX=0;
 80011f0:	f04f 0200 	mov.w	r2, #0
 80011f4:	f04f 0300 	mov.w	r3, #0
 80011f8:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  double kalAngleY=0;
 80011fc:	f04f 0200 	mov.w	r2, #0
 8001200:	f04f 0300 	mov.w	r3, #0
 8001204:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  double accX, accY, accZ;
  double gyroX,gyroY;/* gyroZ; */
  static uint32_t current_time,last_time = 0;

  current_time = Kalman_GetTick();
 8001208:	f000 f986 	bl	8001518 <Kalman_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	4ba0      	ldr	r3, [pc, #640]	; (8001490 <Execute_Kalman_Filter+0x2a8>)
 8001210:	601a      	str	r2, [r3, #0]
  timing_kalman = (double) (((uint32_t)(current_time - last_time)) / Tick_frequency);
 8001212:	4b9f      	ldr	r3, [pc, #636]	; (8001490 <Execute_Kalman_Filter+0x2a8>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	4b9f      	ldr	r3, [pc, #636]	; (8001494 <Execute_Kalman_Filter+0x2ac>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff fd39 	bl	8000c94 <__aeabi_ui2f>
 8001222:	4602      	mov	r2, r0
 8001224:	4b9c      	ldr	r3, [pc, #624]	; (8001498 <Execute_Kalman_Filter+0x2b0>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4619      	mov	r1, r3
 800122a:	4610      	mov	r0, r2
 800122c:	f7ff fe3e 	bl	8000eac <__aeabi_fdiv>
 8001230:	4603      	mov	r3, r0
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff f8f8 	bl	8000428 <__aeabi_f2d>
 8001238:	4602      	mov	r2, r0
 800123a:	460b      	mov	r3, r1
 800123c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  last_time = current_time;
 8001240:	4b93      	ldr	r3, [pc, #588]	; (8001490 <Execute_Kalman_Filter+0x2a8>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a93      	ldr	r2, [pc, #588]	; (8001494 <Execute_Kalman_Filter+0x2ac>)
 8001246:	6013      	str	r3, [r2, #0]

  accX  = LSM6DS3_GetXL_X_Int16();
 8001248:	f000 fd10 	bl	8001c6c <LSM6DS3_GetXL_X_Int16>
 800124c:	4603      	mov	r3, r0
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff f8d8 	bl	8000404 <__aeabi_i2d>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  accY  = LSM6DS3_GetXL_Y_Int16();
 800125c:	f000 fd12 	bl	8001c84 <LSM6DS3_GetXL_Y_Int16>
 8001260:	4603      	mov	r3, r0
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff f8ce 	bl	8000404 <__aeabi_i2d>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  accZ  = LSM6DS3_GetXL_Z_Int16();
 8001270:	f000 fd14 	bl	8001c9c <LSM6DS3_GetXL_Z_Int16>
 8001274:	4603      	mov	r3, r0
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff f8c4 	bl	8000404 <__aeabi_i2d>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  gyroX = LSM6DS3_GetGS_X_Int16();
 8001284:	f000 fd16 	bl	8001cb4 <LSM6DS3_GetGS_X_Int16>
 8001288:	4603      	mov	r3, r0
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff f8ba 	bl	8000404 <__aeabi_i2d>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	e9c7 2308 	strd	r2, r3, [r7, #32]
  gyroY = LSM6DS3_GetGS_Y_Int16();
 8001298:	f000 fd18 	bl	8001ccc <LSM6DS3_GetGS_Y_Int16>
 800129c:	4603      	mov	r3, r0
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff f8b0 	bl	8000404 <__aeabi_i2d>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	e9c7 2306 	strd	r2, r3, [r7, #24]
  /* gyroZ = LSM6DS3_GetGS_X_Int16(); */

  #ifdef RESTRICT_PITCH
    double roll  = atan2(accY, accZ) * RAD_TO_DEG;
 80012ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80012b0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80012b4:	f00a f8c6 	bl	800b444 <atan2>
 80012b8:	a371      	add	r3, pc, #452	; (adr r3, 8001480 <Execute_Kalman_Filter+0x298>)
 80012ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012be:	f7ff f90b 	bl	80004d8 <__aeabi_dmul>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double pitch = atan(-accX / sqrt(accY * accY + accZ * accZ)) * RAD_TO_DEG;
 80012ca:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 80012cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012ce:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80012d2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80012d6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80012da:	f7ff f8fd 	bl	80004d8 <__aeabi_dmul>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	4690      	mov	r8, r2
 80012e4:	4699      	mov	r9, r3
 80012e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80012ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80012ee:	f7ff f8f3 	bl	80004d8 <__aeabi_dmul>
 80012f2:	4602      	mov	r2, r0
 80012f4:	460b      	mov	r3, r1
 80012f6:	4640      	mov	r0, r8
 80012f8:	4649      	mov	r1, r9
 80012fa:	f7fe ff37 	bl	800016c <__adddf3>
 80012fe:	4602      	mov	r2, r0
 8001300:	460b      	mov	r3, r1
 8001302:	4610      	mov	r0, r2
 8001304:	4619      	mov	r1, r3
 8001306:	f00a f89f 	bl	800b448 <sqrt>
 800130a:	4602      	mov	r2, r0
 800130c:	460b      	mov	r3, r1
 800130e:	4620      	mov	r0, r4
 8001310:	4629      	mov	r1, r5
 8001312:	f7ff fa0b 	bl	800072c <__aeabi_ddiv>
 8001316:	4603      	mov	r3, r0
 8001318:	460c      	mov	r4, r1
 800131a:	4618      	mov	r0, r3
 800131c:	4621      	mov	r1, r4
 800131e:	f009 ff03 	bl	800b128 <atan>
 8001322:	a357      	add	r3, pc, #348	; (adr r3, 8001480 <Execute_Kalman_Filter+0x298>)
 8001324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001328:	f7ff f8d6 	bl	80004d8 <__aeabi_dmul>
 800132c:	4603      	mov	r3, r0
 800132e:	460c      	mov	r4, r1
 8001330:	e9c7 3402 	strd	r3, r4, [r7, #8]
  #else // Eq. 28 and 29
    double roll  = atan(accY / sqrt(accX * accX + accZ * accZ)) * RAD_TO_DEG;
    double pitch = atan2(-accX, accZ) * RAD_TO_DEG;
  #endif
       
  double gyroXrate = gyroX * 0.007f; /* Convert to deg/s */
 8001334:	a354      	add	r3, pc, #336	; (adr r3, 8001488 <Execute_Kalman_Filter+0x2a0>)
 8001336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800133e:	f7ff f8cb 	bl	80004d8 <__aeabi_dmul>
 8001342:	4603      	mov	r3, r0
 8001344:	460c      	mov	r4, r1
 8001346:	e9c7 3400 	strd	r3, r4, [r7]
  double gyroYrate = gyroY * 0.007f; /* Convert to deg/s */
 800134a:	a34f      	add	r3, pc, #316	; (adr r3, 8001488 <Execute_Kalman_Filter+0x2a0>)
 800134c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001350:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001354:	f7ff f8c0 	bl	80004d8 <__aeabi_dmul>
 8001358:	4603      	mov	r3, r0
 800135a:	460c      	mov	r4, r1
 800135c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
    
  #ifdef RESTRICT_PITCH
  /* This fixes the transition problem when the accelerometer angle jumps between -180 and 180 degrees */
  if ((roll < -90 && kalAngleX > 90) || (roll > 90 && kalAngleX < -90)) 
 8001360:	f04f 0200 	mov.w	r2, #0
 8001364:	4b4d      	ldr	r3, [pc, #308]	; (800149c <Execute_Kalman_Filter+0x2b4>)
 8001366:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800136a:	f7ff fb27 	bl	80009bc <__aeabi_dcmplt>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d009      	beq.n	8001388 <Execute_Kalman_Filter+0x1a0>
 8001374:	f04f 0200 	mov.w	r2, #0
 8001378:	4b49      	ldr	r3, [pc, #292]	; (80014a0 <Execute_Kalman_Filter+0x2b8>)
 800137a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800137e:	f7ff fb3b 	bl	80009f8 <__aeabi_dcmpgt>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d113      	bne.n	80013b0 <Execute_Kalman_Filter+0x1c8>
 8001388:	f04f 0200 	mov.w	r2, #0
 800138c:	4b44      	ldr	r3, [pc, #272]	; (80014a0 <Execute_Kalman_Filter+0x2b8>)
 800138e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001392:	f7ff fb31 	bl	80009f8 <__aeabi_dcmpgt>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d015      	beq.n	80013c8 <Execute_Kalman_Filter+0x1e0>
 800139c:	f04f 0200 	mov.w	r2, #0
 80013a0:	4b3e      	ldr	r3, [pc, #248]	; (800149c <Execute_Kalman_Filter+0x2b4>)
 80013a2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80013a6:	f7ff fb09 	bl	80009bc <__aeabi_dcmplt>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d00b      	beq.n	80013c8 <Execute_Kalman_Filter+0x1e0>
  {
	KalmanX.angle = roll;
 80013b0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013b4:	f7ff fb68 	bl	8000a88 <__aeabi_d2f>
 80013b8:	4602      	mov	r2, r0
 80013ba:	4b3a      	ldr	r3, [pc, #232]	; (80014a4 <Execute_Kalman_Filter+0x2bc>)
 80013bc:	60da      	str	r2, [r3, #12]
    kalAngleX = roll;
 80013be:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80013c2:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
 80013c6:	e01b      	b.n	8001400 <Execute_Kalman_Filter+0x218>
  } 
  else
  {
    kalAngleX = KalmanX_getAngle(roll, gyroXrate, timing_kalman); /* Calculate the angle using a Kalman filter */
 80013c8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013cc:	f7ff fb5c 	bl	8000a88 <__aeabi_d2f>
 80013d0:	4604      	mov	r4, r0
 80013d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013d6:	f7ff fb57 	bl	8000a88 <__aeabi_d2f>
 80013da:	4605      	mov	r5, r0
 80013dc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80013e0:	f7ff fb52 	bl	8000a88 <__aeabi_d2f>
 80013e4:	4603      	mov	r3, r0
 80013e6:	461a      	mov	r2, r3
 80013e8:	4629      	mov	r1, r5
 80013ea:	4620      	mov	r0, r4
 80013ec:	f000 f8c2 	bl	8001574 <KalmanX_getAngle>
 80013f0:	4603      	mov	r3, r0
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff f818 	bl	8000428 <__aeabi_f2d>
 80013f8:	4603      	mov	r3, r0
 80013fa:	460c      	mov	r4, r1
 80013fc:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
  }

  if (abs(kalAngleX) > 90)
 8001400:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001404:	f7ff fb18 	bl	8000a38 <__aeabi_d2iz>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	bfb8      	it	lt
 800140e:	425b      	neglt	r3, r3
 8001410:	2b5a      	cmp	r3, #90	; 0x5a
 8001412:	dd05      	ble.n	8001420 <Execute_Kalman_Filter+0x238>
  {
    gyroYrate = - gyroYrate; /* Invert rate, so it fits the restricted accelerometer reading */
 8001414:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001416:	653b      	str	r3, [r7, #80]	; 0x50
 8001418:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800141a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800141e:	657b      	str	r3, [r7, #84]	; 0x54
  }
  kalAngleY = KalmanY_getAngle(pitch, gyroYrate, timing_kalman);
 8001420:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001424:	f7ff fb30 	bl	8000a88 <__aeabi_d2f>
 8001428:	4604      	mov	r4, r0
 800142a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800142e:	f7ff fb2b 	bl	8000a88 <__aeabi_d2f>
 8001432:	4605      	mov	r5, r0
 8001434:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001438:	f7ff fb26 	bl	8000a88 <__aeabi_d2f>
 800143c:	4603      	mov	r3, r0
 800143e:	461a      	mov	r2, r3
 8001440:	4629      	mov	r1, r5
 8001442:	4620      	mov	r0, r4
 8001444:	f000 f9a8 	bl	8001798 <KalmanY_getAngle>
 8001448:	4603      	mov	r3, r0
 800144a:	4618      	mov	r0, r3
 800144c:	f7fe ffec 	bl	8000428 <__aeabi_f2d>
 8001450:	4603      	mov	r3, r0
 8001452:	460c      	mov	r4, r1
 8001454:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    {
      gyroXrate = -gyroXrate; /* Invert rate, so it fits the restriced accelerometer reading */
    }
    kalAngleX = KalmanX_getAngle(roll, gyroXrate, timing_kalman);
  #endif
   Calculated_Roll  =  (float) (kalAngleX);
 8001458:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800145c:	f7ff fb14 	bl	8000a88 <__aeabi_d2f>
 8001460:	4602      	mov	r2, r0
 8001462:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <Execute_Kalman_Filter+0x2c0>)
 8001464:	601a      	str	r2, [r3, #0]
   Calculated_Pitch  = (float) (kalAngleY);
 8001466:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800146a:	f7ff fb0d 	bl	8000a88 <__aeabi_d2f>
 800146e:	4602      	mov	r2, r0
 8001470:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <Execute_Kalman_Filter+0x2c4>)
 8001472:	601a      	str	r2, [r3, #0]
}
 8001474:	bf00      	nop
 8001476:	3760      	adds	r7, #96	; 0x60
 8001478:	46bd      	mov	sp, r7
 800147a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800147e:	bf00      	nop
 8001480:	20000000 	.word	0x20000000
 8001484:	404ca5dc 	.word	0x404ca5dc
 8001488:	40000000 	.word	0x40000000
 800148c:	3f7cac08 	.word	0x3f7cac08
 8001490:	20000388 	.word	0x20000388
 8001494:	2000038c 	.word	0x2000038c
 8001498:	20000384 	.word	0x20000384
 800149c:	c0568000 	.word	0xc0568000
 80014a0:	40568000 	.word	0x40568000
 80014a4:	20000604 	.word	0x20000604
 80014a8:	20000380 	.word	0x20000380
 80014ac:	2000037c 	.word	0x2000037c

080014b0 <Kalman_GetPitch>:

float Kalman_GetPitch(void) {
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  return Calculated_Pitch;
 80014b4:	4b02      	ldr	r3, [pc, #8]	; (80014c0 <Kalman_GetPitch+0x10>)
 80014b6:	681b      	ldr	r3, [r3, #0]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr
 80014c0:	2000037c 	.word	0x2000037c

080014c4 <Kalman_GetRoll>:

float Kalman_GetRoll(void) {
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  return Calculated_Roll;
 80014c8:	4b02      	ldr	r3, [pc, #8]	; (80014d4 <Kalman_GetRoll+0x10>)
 80014ca:	681b      	ldr	r3, [r3, #0]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr
 80014d4:	20000380 	.word	0x20000380

080014d8 <Kalman_IncTick>:

void Kalman_IncTick(void) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
	Kalman_Timer++;
 80014dc:	4b0b      	ldr	r3, [pc, #44]	; (800150c <Kalman_IncTick+0x34>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	3301      	adds	r3, #1
 80014e2:	4a0a      	ldr	r2, [pc, #40]	; (800150c <Kalman_IncTick+0x34>)
 80014e4:	6013      	str	r3, [r2, #0]
	ExecuteTicks++;
 80014e6:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <Kalman_IncTick+0x38>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	3301      	adds	r3, #1
 80014ec:	4a08      	ldr	r2, [pc, #32]	; (8001510 <Kalman_IncTick+0x38>)
 80014ee:	6013      	str	r3, [r2, #0]
	if(ExecuteTicks >= ExecuteMax) {
 80014f0:	4b07      	ldr	r3, [pc, #28]	; (8001510 <Kalman_IncTick+0x38>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4b07      	ldr	r3, [pc, #28]	; (8001514 <Kalman_IncTick+0x3c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d304      	bcc.n	8001506 <Kalman_IncTick+0x2e>
		Kalman_SetFlag();
 80014fc:	f000 f816 	bl	800152c <Kalman_SetFlag>
		ExecuteTicks = 0;
 8001500:	4b03      	ldr	r3, [pc, #12]	; (8001510 <Kalman_IncTick+0x38>)
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
	}
}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	2000036c 	.word	0x2000036c
 8001510:	20000370 	.word	0x20000370
 8001514:	20000374 	.word	0x20000374

08001518 <Kalman_GetTick>:

uint32_t Kalman_GetTick(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
	return Kalman_Timer;
 800151c:	4b02      	ldr	r3, [pc, #8]	; (8001528 <Kalman_GetTick+0x10>)
 800151e:	681b      	ldr	r3, [r3, #0]
}
 8001520:	4618      	mov	r0, r3
 8001522:	46bd      	mov	sp, r7
 8001524:	bc80      	pop	{r7}
 8001526:	4770      	bx	lr
 8001528:	2000036c 	.word	0x2000036c

0800152c <Kalman_SetFlag>:

void Kalman_SetFlag(void) {
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
	KalmanFlag = 1;
 8001530:	4b03      	ldr	r3, [pc, #12]	; (8001540 <Kalman_SetFlag+0x14>)
 8001532:	2201      	movs	r2, #1
 8001534:	701a      	strb	r2, [r3, #0]
}
 8001536:	bf00      	nop
 8001538:	46bd      	mov	sp, r7
 800153a:	bc80      	pop	{r7}
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	20000378 	.word	0x20000378

08001544 <Kalman_GetFlag>:

uint8_t Kalman_GetFlag(void) {
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
	return KalmanFlag;
 8001548:	4b03      	ldr	r3, [pc, #12]	; (8001558 <Kalman_GetFlag+0x14>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	b2db      	uxtb	r3, r3
}
 800154e:	4618      	mov	r0, r3
 8001550:	46bd      	mov	sp, r7
 8001552:	bc80      	pop	{r7}
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	20000378 	.word	0x20000378

0800155c <Kalman_ClearFlag>:

void Kalman_ClearFlag(void) {
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
	KalmanFlag = 0;
 8001560:	4b03      	ldr	r3, [pc, #12]	; (8001570 <Kalman_ClearFlag+0x14>)
 8001562:	2200      	movs	r2, #0
 8001564:	701a      	strb	r2, [r3, #0]
}
 8001566:	bf00      	nop
 8001568:	46bd      	mov	sp, r7
 800156a:	bc80      	pop	{r7}
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	20000378 	.word	0x20000378

08001574 <KalmanX_getAngle>:

static float KalmanX_getAngle(float newAngle, float newRate, float dt) {
 8001574:	b590      	push	{r4, r7, lr}
 8001576:	b08b      	sub	sp, #44	; 0x2c
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
    KalmanX.rate = newRate - KalmanX.bias;
 8001580:	4b84      	ldr	r3, [pc, #528]	; (8001794 <KalmanX_getAngle+0x220>)
 8001582:	691b      	ldr	r3, [r3, #16]
 8001584:	4619      	mov	r1, r3
 8001586:	68b8      	ldr	r0, [r7, #8]
 8001588:	f7ff fad2 	bl	8000b30 <__aeabi_fsub>
 800158c:	4603      	mov	r3, r0
 800158e:	461a      	mov	r2, r3
 8001590:	4b80      	ldr	r3, [pc, #512]	; (8001794 <KalmanX_getAngle+0x220>)
 8001592:	615a      	str	r2, [r3, #20]
    KalmanX.angle += dt * KalmanX.rate;
 8001594:	4b7f      	ldr	r3, [pc, #508]	; (8001794 <KalmanX_getAngle+0x220>)
 8001596:	68dc      	ldr	r4, [r3, #12]
 8001598:	4b7e      	ldr	r3, [pc, #504]	; (8001794 <KalmanX_getAngle+0x220>)
 800159a:	695b      	ldr	r3, [r3, #20]
 800159c:	6879      	ldr	r1, [r7, #4]
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff fbd0 	bl	8000d44 <__aeabi_fmul>
 80015a4:	4603      	mov	r3, r0
 80015a6:	4619      	mov	r1, r3
 80015a8:	4620      	mov	r0, r4
 80015aa:	f7ff fac3 	bl	8000b34 <__addsf3>
 80015ae:	4603      	mov	r3, r0
 80015b0:	461a      	mov	r2, r3
 80015b2:	4b78      	ldr	r3, [pc, #480]	; (8001794 <KalmanX_getAngle+0x220>)
 80015b4:	60da      	str	r2, [r3, #12]

    KalmanX.P[0][0] += dt * (dt*KalmanX.P[1][1] - KalmanX.P[0][1] - KalmanX.P[1][0] + KalmanX.Q_angle);
 80015b6:	4b77      	ldr	r3, [pc, #476]	; (8001794 <KalmanX_getAngle+0x220>)
 80015b8:	699c      	ldr	r4, [r3, #24]
 80015ba:	4b76      	ldr	r3, [pc, #472]	; (8001794 <KalmanX_getAngle+0x220>)
 80015bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff fbbf 	bl	8000d44 <__aeabi_fmul>
 80015c6:	4603      	mov	r3, r0
 80015c8:	461a      	mov	r2, r3
 80015ca:	4b72      	ldr	r3, [pc, #456]	; (8001794 <KalmanX_getAngle+0x220>)
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	4619      	mov	r1, r3
 80015d0:	4610      	mov	r0, r2
 80015d2:	f7ff faad 	bl	8000b30 <__aeabi_fsub>
 80015d6:	4603      	mov	r3, r0
 80015d8:	461a      	mov	r2, r3
 80015da:	4b6e      	ldr	r3, [pc, #440]	; (8001794 <KalmanX_getAngle+0x220>)
 80015dc:	6a1b      	ldr	r3, [r3, #32]
 80015de:	4619      	mov	r1, r3
 80015e0:	4610      	mov	r0, r2
 80015e2:	f7ff faa5 	bl	8000b30 <__aeabi_fsub>
 80015e6:	4603      	mov	r3, r0
 80015e8:	461a      	mov	r2, r3
 80015ea:	4b6a      	ldr	r3, [pc, #424]	; (8001794 <KalmanX_getAngle+0x220>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4619      	mov	r1, r3
 80015f0:	4610      	mov	r0, r2
 80015f2:	f7ff fa9f 	bl	8000b34 <__addsf3>
 80015f6:	4603      	mov	r3, r0
 80015f8:	6879      	ldr	r1, [r7, #4]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff fba2 	bl	8000d44 <__aeabi_fmul>
 8001600:	4603      	mov	r3, r0
 8001602:	4619      	mov	r1, r3
 8001604:	4620      	mov	r0, r4
 8001606:	f7ff fa95 	bl	8000b34 <__addsf3>
 800160a:	4603      	mov	r3, r0
 800160c:	461a      	mov	r2, r3
 800160e:	4b61      	ldr	r3, [pc, #388]	; (8001794 <KalmanX_getAngle+0x220>)
 8001610:	619a      	str	r2, [r3, #24]
    KalmanX.P[0][1] -= dt * KalmanX.P[1][1];
 8001612:	4b60      	ldr	r3, [pc, #384]	; (8001794 <KalmanX_getAngle+0x220>)
 8001614:	69dc      	ldr	r4, [r3, #28]
 8001616:	4b5f      	ldr	r3, [pc, #380]	; (8001794 <KalmanX_getAngle+0x220>)
 8001618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161a:	6879      	ldr	r1, [r7, #4]
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff fb91 	bl	8000d44 <__aeabi_fmul>
 8001622:	4603      	mov	r3, r0
 8001624:	4619      	mov	r1, r3
 8001626:	4620      	mov	r0, r4
 8001628:	f7ff fa82 	bl	8000b30 <__aeabi_fsub>
 800162c:	4603      	mov	r3, r0
 800162e:	461a      	mov	r2, r3
 8001630:	4b58      	ldr	r3, [pc, #352]	; (8001794 <KalmanX_getAngle+0x220>)
 8001632:	61da      	str	r2, [r3, #28]
    KalmanX.P[1][0] -= dt * KalmanX.P[1][1];
 8001634:	4b57      	ldr	r3, [pc, #348]	; (8001794 <KalmanX_getAngle+0x220>)
 8001636:	6a1c      	ldr	r4, [r3, #32]
 8001638:	4b56      	ldr	r3, [pc, #344]	; (8001794 <KalmanX_getAngle+0x220>)
 800163a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163c:	6879      	ldr	r1, [r7, #4]
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff fb80 	bl	8000d44 <__aeabi_fmul>
 8001644:	4603      	mov	r3, r0
 8001646:	4619      	mov	r1, r3
 8001648:	4620      	mov	r0, r4
 800164a:	f7ff fa71 	bl	8000b30 <__aeabi_fsub>
 800164e:	4603      	mov	r3, r0
 8001650:	461a      	mov	r2, r3
 8001652:	4b50      	ldr	r3, [pc, #320]	; (8001794 <KalmanX_getAngle+0x220>)
 8001654:	621a      	str	r2, [r3, #32]
    KalmanX.P[1][1] += KalmanX.Q_bias * dt;
 8001656:	4b4f      	ldr	r3, [pc, #316]	; (8001794 <KalmanX_getAngle+0x220>)
 8001658:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800165a:	4b4e      	ldr	r3, [pc, #312]	; (8001794 <KalmanX_getAngle+0x220>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	6879      	ldr	r1, [r7, #4]
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff fb6f 	bl	8000d44 <__aeabi_fmul>
 8001666:	4603      	mov	r3, r0
 8001668:	4619      	mov	r1, r3
 800166a:	4620      	mov	r0, r4
 800166c:	f7ff fa62 	bl	8000b34 <__addsf3>
 8001670:	4603      	mov	r3, r0
 8001672:	461a      	mov	r2, r3
 8001674:	4b47      	ldr	r3, [pc, #284]	; (8001794 <KalmanX_getAngle+0x220>)
 8001676:	625a      	str	r2, [r3, #36]	; 0x24
    
    float S = KalmanX.P[0][0] + KalmanX.R_measure;
 8001678:	4b46      	ldr	r3, [pc, #280]	; (8001794 <KalmanX_getAngle+0x220>)
 800167a:	699a      	ldr	r2, [r3, #24]
 800167c:	4b45      	ldr	r3, [pc, #276]	; (8001794 <KalmanX_getAngle+0x220>)
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	4619      	mov	r1, r3
 8001682:	4610      	mov	r0, r2
 8001684:	f7ff fa56 	bl	8000b34 <__addsf3>
 8001688:	4603      	mov	r3, r0
 800168a:	627b      	str	r3, [r7, #36]	; 0x24
    
    float K[2];
    K[0] = KalmanX.P[0][0] / S;
 800168c:	4b41      	ldr	r3, [pc, #260]	; (8001794 <KalmanX_getAngle+0x220>)
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff fc0a 	bl	8000eac <__aeabi_fdiv>
 8001698:	4603      	mov	r3, r0
 800169a:	613b      	str	r3, [r7, #16]
    K[1] = KalmanX.P[1][0] / S;
 800169c:	4b3d      	ldr	r3, [pc, #244]	; (8001794 <KalmanX_getAngle+0x220>)
 800169e:	6a1b      	ldr	r3, [r3, #32]
 80016a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff fc02 	bl	8000eac <__aeabi_fdiv>
 80016a8:	4603      	mov	r3, r0
 80016aa:	617b      	str	r3, [r7, #20]

    float y = newAngle - KalmanX.angle;
 80016ac:	4b39      	ldr	r3, [pc, #228]	; (8001794 <KalmanX_getAngle+0x220>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	4619      	mov	r1, r3
 80016b2:	68f8      	ldr	r0, [r7, #12]
 80016b4:	f7ff fa3c 	bl	8000b30 <__aeabi_fsub>
 80016b8:	4603      	mov	r3, r0
 80016ba:	623b      	str	r3, [r7, #32]
    KalmanX.angle += K[0] * y;
 80016bc:	4b35      	ldr	r3, [pc, #212]	; (8001794 <KalmanX_getAngle+0x220>)
 80016be:	68dc      	ldr	r4, [r3, #12]
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	6a39      	ldr	r1, [r7, #32]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff fb3d 	bl	8000d44 <__aeabi_fmul>
 80016ca:	4603      	mov	r3, r0
 80016cc:	4619      	mov	r1, r3
 80016ce:	4620      	mov	r0, r4
 80016d0:	f7ff fa30 	bl	8000b34 <__addsf3>
 80016d4:	4603      	mov	r3, r0
 80016d6:	461a      	mov	r2, r3
 80016d8:	4b2e      	ldr	r3, [pc, #184]	; (8001794 <KalmanX_getAngle+0x220>)
 80016da:	60da      	str	r2, [r3, #12]
    KalmanX.bias += K[1] * y;
 80016dc:	4b2d      	ldr	r3, [pc, #180]	; (8001794 <KalmanX_getAngle+0x220>)
 80016de:	691c      	ldr	r4, [r3, #16]
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	6a39      	ldr	r1, [r7, #32]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff fb2d 	bl	8000d44 <__aeabi_fmul>
 80016ea:	4603      	mov	r3, r0
 80016ec:	4619      	mov	r1, r3
 80016ee:	4620      	mov	r0, r4
 80016f0:	f7ff fa20 	bl	8000b34 <__addsf3>
 80016f4:	4603      	mov	r3, r0
 80016f6:	461a      	mov	r2, r3
 80016f8:	4b26      	ldr	r3, [pc, #152]	; (8001794 <KalmanX_getAngle+0x220>)
 80016fa:	611a      	str	r2, [r3, #16]

    float P00_temp = KalmanX.P[0][0];
 80016fc:	4b25      	ldr	r3, [pc, #148]	; (8001794 <KalmanX_getAngle+0x220>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	61fb      	str	r3, [r7, #28]
    float P01_temp = KalmanX.P[0][1];
 8001702:	4b24      	ldr	r3, [pc, #144]	; (8001794 <KalmanX_getAngle+0x220>)
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	61bb      	str	r3, [r7, #24]

    KalmanX.P[0][0] -= K[0] * P00_temp;
 8001708:	4b22      	ldr	r3, [pc, #136]	; (8001794 <KalmanX_getAngle+0x220>)
 800170a:	699c      	ldr	r4, [r3, #24]
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	69f9      	ldr	r1, [r7, #28]
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff fb17 	bl	8000d44 <__aeabi_fmul>
 8001716:	4603      	mov	r3, r0
 8001718:	4619      	mov	r1, r3
 800171a:	4620      	mov	r0, r4
 800171c:	f7ff fa08 	bl	8000b30 <__aeabi_fsub>
 8001720:	4603      	mov	r3, r0
 8001722:	461a      	mov	r2, r3
 8001724:	4b1b      	ldr	r3, [pc, #108]	; (8001794 <KalmanX_getAngle+0x220>)
 8001726:	619a      	str	r2, [r3, #24]
    KalmanX.P[0][1] -= K[0] * P01_temp;
 8001728:	4b1a      	ldr	r3, [pc, #104]	; (8001794 <KalmanX_getAngle+0x220>)
 800172a:	69dc      	ldr	r4, [r3, #28]
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	69b9      	ldr	r1, [r7, #24]
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff fb07 	bl	8000d44 <__aeabi_fmul>
 8001736:	4603      	mov	r3, r0
 8001738:	4619      	mov	r1, r3
 800173a:	4620      	mov	r0, r4
 800173c:	f7ff f9f8 	bl	8000b30 <__aeabi_fsub>
 8001740:	4603      	mov	r3, r0
 8001742:	461a      	mov	r2, r3
 8001744:	4b13      	ldr	r3, [pc, #76]	; (8001794 <KalmanX_getAngle+0x220>)
 8001746:	61da      	str	r2, [r3, #28]
    KalmanX.P[1][0] -= K[1] * P00_temp;
 8001748:	4b12      	ldr	r3, [pc, #72]	; (8001794 <KalmanX_getAngle+0x220>)
 800174a:	6a1c      	ldr	r4, [r3, #32]
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	69f9      	ldr	r1, [r7, #28]
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff faf7 	bl	8000d44 <__aeabi_fmul>
 8001756:	4603      	mov	r3, r0
 8001758:	4619      	mov	r1, r3
 800175a:	4620      	mov	r0, r4
 800175c:	f7ff f9e8 	bl	8000b30 <__aeabi_fsub>
 8001760:	4603      	mov	r3, r0
 8001762:	461a      	mov	r2, r3
 8001764:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <KalmanX_getAngle+0x220>)
 8001766:	621a      	str	r2, [r3, #32]
    KalmanX.P[1][1] -= K[1] * P01_temp;
 8001768:	4b0a      	ldr	r3, [pc, #40]	; (8001794 <KalmanX_getAngle+0x220>)
 800176a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	69b9      	ldr	r1, [r7, #24]
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff fae7 	bl	8000d44 <__aeabi_fmul>
 8001776:	4603      	mov	r3, r0
 8001778:	4619      	mov	r1, r3
 800177a:	4620      	mov	r0, r4
 800177c:	f7ff f9d8 	bl	8000b30 <__aeabi_fsub>
 8001780:	4603      	mov	r3, r0
 8001782:	461a      	mov	r2, r3
 8001784:	4b03      	ldr	r3, [pc, #12]	; (8001794 <KalmanX_getAngle+0x220>)
 8001786:	625a      	str	r2, [r3, #36]	; 0x24

    return KalmanX.angle;
 8001788:	4b02      	ldr	r3, [pc, #8]	; (8001794 <KalmanX_getAngle+0x220>)
 800178a:	68db      	ldr	r3, [r3, #12]
}
 800178c:	4618      	mov	r0, r3
 800178e:	372c      	adds	r7, #44	; 0x2c
 8001790:	46bd      	mov	sp, r7
 8001792:	bd90      	pop	{r4, r7, pc}
 8001794:	20000604 	.word	0x20000604

08001798 <KalmanY_getAngle>:

static float KalmanY_getAngle(float newAngle, float newRate, float dt) {
 8001798:	b590      	push	{r4, r7, lr}
 800179a:	b08b      	sub	sp, #44	; 0x2c
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
    KalmanY.rate = newRate - KalmanY.bias;
 80017a4:	4b84      	ldr	r3, [pc, #528]	; (80019b8 <KalmanY_getAngle+0x220>)
 80017a6:	691b      	ldr	r3, [r3, #16]
 80017a8:	4619      	mov	r1, r3
 80017aa:	68b8      	ldr	r0, [r7, #8]
 80017ac:	f7ff f9c0 	bl	8000b30 <__aeabi_fsub>
 80017b0:	4603      	mov	r3, r0
 80017b2:	461a      	mov	r2, r3
 80017b4:	4b80      	ldr	r3, [pc, #512]	; (80019b8 <KalmanY_getAngle+0x220>)
 80017b6:	615a      	str	r2, [r3, #20]
    KalmanY.angle += dt * KalmanY.rate;
 80017b8:	4b7f      	ldr	r3, [pc, #508]	; (80019b8 <KalmanY_getAngle+0x220>)
 80017ba:	68dc      	ldr	r4, [r3, #12]
 80017bc:	4b7e      	ldr	r3, [pc, #504]	; (80019b8 <KalmanY_getAngle+0x220>)
 80017be:	695b      	ldr	r3, [r3, #20]
 80017c0:	6879      	ldr	r1, [r7, #4]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff fabe 	bl	8000d44 <__aeabi_fmul>
 80017c8:	4603      	mov	r3, r0
 80017ca:	4619      	mov	r1, r3
 80017cc:	4620      	mov	r0, r4
 80017ce:	f7ff f9b1 	bl	8000b34 <__addsf3>
 80017d2:	4603      	mov	r3, r0
 80017d4:	461a      	mov	r2, r3
 80017d6:	4b78      	ldr	r3, [pc, #480]	; (80019b8 <KalmanY_getAngle+0x220>)
 80017d8:	60da      	str	r2, [r3, #12]

    KalmanY.P[0][0] += dt * (dt*KalmanY.P[1][1] - KalmanY.P[0][1] - KalmanY.P[1][0] + KalmanY.Q_angle);
 80017da:	4b77      	ldr	r3, [pc, #476]	; (80019b8 <KalmanY_getAngle+0x220>)
 80017dc:	699c      	ldr	r4, [r3, #24]
 80017de:	4b76      	ldr	r3, [pc, #472]	; (80019b8 <KalmanY_getAngle+0x220>)
 80017e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e2:	6879      	ldr	r1, [r7, #4]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff faad 	bl	8000d44 <__aeabi_fmul>
 80017ea:	4603      	mov	r3, r0
 80017ec:	461a      	mov	r2, r3
 80017ee:	4b72      	ldr	r3, [pc, #456]	; (80019b8 <KalmanY_getAngle+0x220>)
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	4619      	mov	r1, r3
 80017f4:	4610      	mov	r0, r2
 80017f6:	f7ff f99b 	bl	8000b30 <__aeabi_fsub>
 80017fa:	4603      	mov	r3, r0
 80017fc:	461a      	mov	r2, r3
 80017fe:	4b6e      	ldr	r3, [pc, #440]	; (80019b8 <KalmanY_getAngle+0x220>)
 8001800:	6a1b      	ldr	r3, [r3, #32]
 8001802:	4619      	mov	r1, r3
 8001804:	4610      	mov	r0, r2
 8001806:	f7ff f993 	bl	8000b30 <__aeabi_fsub>
 800180a:	4603      	mov	r3, r0
 800180c:	461a      	mov	r2, r3
 800180e:	4b6a      	ldr	r3, [pc, #424]	; (80019b8 <KalmanY_getAngle+0x220>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4619      	mov	r1, r3
 8001814:	4610      	mov	r0, r2
 8001816:	f7ff f98d 	bl	8000b34 <__addsf3>
 800181a:	4603      	mov	r3, r0
 800181c:	6879      	ldr	r1, [r7, #4]
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff fa90 	bl	8000d44 <__aeabi_fmul>
 8001824:	4603      	mov	r3, r0
 8001826:	4619      	mov	r1, r3
 8001828:	4620      	mov	r0, r4
 800182a:	f7ff f983 	bl	8000b34 <__addsf3>
 800182e:	4603      	mov	r3, r0
 8001830:	461a      	mov	r2, r3
 8001832:	4b61      	ldr	r3, [pc, #388]	; (80019b8 <KalmanY_getAngle+0x220>)
 8001834:	619a      	str	r2, [r3, #24]
    KalmanY.P[0][1] -= dt * KalmanY.P[1][1];
 8001836:	4b60      	ldr	r3, [pc, #384]	; (80019b8 <KalmanY_getAngle+0x220>)
 8001838:	69dc      	ldr	r4, [r3, #28]
 800183a:	4b5f      	ldr	r3, [pc, #380]	; (80019b8 <KalmanY_getAngle+0x220>)
 800183c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff fa7f 	bl	8000d44 <__aeabi_fmul>
 8001846:	4603      	mov	r3, r0
 8001848:	4619      	mov	r1, r3
 800184a:	4620      	mov	r0, r4
 800184c:	f7ff f970 	bl	8000b30 <__aeabi_fsub>
 8001850:	4603      	mov	r3, r0
 8001852:	461a      	mov	r2, r3
 8001854:	4b58      	ldr	r3, [pc, #352]	; (80019b8 <KalmanY_getAngle+0x220>)
 8001856:	61da      	str	r2, [r3, #28]
    KalmanY.P[1][0] -= dt * KalmanY.P[1][1];
 8001858:	4b57      	ldr	r3, [pc, #348]	; (80019b8 <KalmanY_getAngle+0x220>)
 800185a:	6a1c      	ldr	r4, [r3, #32]
 800185c:	4b56      	ldr	r3, [pc, #344]	; (80019b8 <KalmanY_getAngle+0x220>)
 800185e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001860:	6879      	ldr	r1, [r7, #4]
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff fa6e 	bl	8000d44 <__aeabi_fmul>
 8001868:	4603      	mov	r3, r0
 800186a:	4619      	mov	r1, r3
 800186c:	4620      	mov	r0, r4
 800186e:	f7ff f95f 	bl	8000b30 <__aeabi_fsub>
 8001872:	4603      	mov	r3, r0
 8001874:	461a      	mov	r2, r3
 8001876:	4b50      	ldr	r3, [pc, #320]	; (80019b8 <KalmanY_getAngle+0x220>)
 8001878:	621a      	str	r2, [r3, #32]
    KalmanY.P[1][1] += KalmanY.Q_bias * dt;
 800187a:	4b4f      	ldr	r3, [pc, #316]	; (80019b8 <KalmanY_getAngle+0x220>)
 800187c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800187e:	4b4e      	ldr	r3, [pc, #312]	; (80019b8 <KalmanY_getAngle+0x220>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fa5d 	bl	8000d44 <__aeabi_fmul>
 800188a:	4603      	mov	r3, r0
 800188c:	4619      	mov	r1, r3
 800188e:	4620      	mov	r0, r4
 8001890:	f7ff f950 	bl	8000b34 <__addsf3>
 8001894:	4603      	mov	r3, r0
 8001896:	461a      	mov	r2, r3
 8001898:	4b47      	ldr	r3, [pc, #284]	; (80019b8 <KalmanY_getAngle+0x220>)
 800189a:	625a      	str	r2, [r3, #36]	; 0x24
    
    float S = KalmanY.P[0][0] + KalmanY.R_measure;
 800189c:	4b46      	ldr	r3, [pc, #280]	; (80019b8 <KalmanY_getAngle+0x220>)
 800189e:	699a      	ldr	r2, [r3, #24]
 80018a0:	4b45      	ldr	r3, [pc, #276]	; (80019b8 <KalmanY_getAngle+0x220>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	4619      	mov	r1, r3
 80018a6:	4610      	mov	r0, r2
 80018a8:	f7ff f944 	bl	8000b34 <__addsf3>
 80018ac:	4603      	mov	r3, r0
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24
    
    float K[2];
    K[0] = KalmanY.P[0][0] / S;
 80018b0:	4b41      	ldr	r3, [pc, #260]	; (80019b8 <KalmanY_getAngle+0x220>)
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff faf8 	bl	8000eac <__aeabi_fdiv>
 80018bc:	4603      	mov	r3, r0
 80018be:	613b      	str	r3, [r7, #16]
    K[1] = KalmanY.P[1][0] / S;
 80018c0:	4b3d      	ldr	r3, [pc, #244]	; (80019b8 <KalmanY_getAngle+0x220>)
 80018c2:	6a1b      	ldr	r3, [r3, #32]
 80018c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff faf0 	bl	8000eac <__aeabi_fdiv>
 80018cc:	4603      	mov	r3, r0
 80018ce:	617b      	str	r3, [r7, #20]


    float y = newAngle - KalmanY.angle;
 80018d0:	4b39      	ldr	r3, [pc, #228]	; (80019b8 <KalmanY_getAngle+0x220>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	4619      	mov	r1, r3
 80018d6:	68f8      	ldr	r0, [r7, #12]
 80018d8:	f7ff f92a 	bl	8000b30 <__aeabi_fsub>
 80018dc:	4603      	mov	r3, r0
 80018de:	623b      	str	r3, [r7, #32]

    KalmanY.angle += K[0] * y;
 80018e0:	4b35      	ldr	r3, [pc, #212]	; (80019b8 <KalmanY_getAngle+0x220>)
 80018e2:	68dc      	ldr	r4, [r3, #12]
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	6a39      	ldr	r1, [r7, #32]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff fa2b 	bl	8000d44 <__aeabi_fmul>
 80018ee:	4603      	mov	r3, r0
 80018f0:	4619      	mov	r1, r3
 80018f2:	4620      	mov	r0, r4
 80018f4:	f7ff f91e 	bl	8000b34 <__addsf3>
 80018f8:	4603      	mov	r3, r0
 80018fa:	461a      	mov	r2, r3
 80018fc:	4b2e      	ldr	r3, [pc, #184]	; (80019b8 <KalmanY_getAngle+0x220>)
 80018fe:	60da      	str	r2, [r3, #12]
    KalmanY.bias += K[1] * y;
 8001900:	4b2d      	ldr	r3, [pc, #180]	; (80019b8 <KalmanY_getAngle+0x220>)
 8001902:	691c      	ldr	r4, [r3, #16]
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	6a39      	ldr	r1, [r7, #32]
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff fa1b 	bl	8000d44 <__aeabi_fmul>
 800190e:	4603      	mov	r3, r0
 8001910:	4619      	mov	r1, r3
 8001912:	4620      	mov	r0, r4
 8001914:	f7ff f90e 	bl	8000b34 <__addsf3>
 8001918:	4603      	mov	r3, r0
 800191a:	461a      	mov	r2, r3
 800191c:	4b26      	ldr	r3, [pc, #152]	; (80019b8 <KalmanY_getAngle+0x220>)
 800191e:	611a      	str	r2, [r3, #16]

    float P00_temp = KalmanY.P[0][0];
 8001920:	4b25      	ldr	r3, [pc, #148]	; (80019b8 <KalmanY_getAngle+0x220>)
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	61fb      	str	r3, [r7, #28]
    float P01_temp = KalmanY.P[0][1];
 8001926:	4b24      	ldr	r3, [pc, #144]	; (80019b8 <KalmanY_getAngle+0x220>)
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	61bb      	str	r3, [r7, #24]

    KalmanY.P[0][0] -= K[0] * P00_temp;
 800192c:	4b22      	ldr	r3, [pc, #136]	; (80019b8 <KalmanY_getAngle+0x220>)
 800192e:	699c      	ldr	r4, [r3, #24]
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	69f9      	ldr	r1, [r7, #28]
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff fa05 	bl	8000d44 <__aeabi_fmul>
 800193a:	4603      	mov	r3, r0
 800193c:	4619      	mov	r1, r3
 800193e:	4620      	mov	r0, r4
 8001940:	f7ff f8f6 	bl	8000b30 <__aeabi_fsub>
 8001944:	4603      	mov	r3, r0
 8001946:	461a      	mov	r2, r3
 8001948:	4b1b      	ldr	r3, [pc, #108]	; (80019b8 <KalmanY_getAngle+0x220>)
 800194a:	619a      	str	r2, [r3, #24]
    KalmanY.P[0][1] -= K[0] * P01_temp;
 800194c:	4b1a      	ldr	r3, [pc, #104]	; (80019b8 <KalmanY_getAngle+0x220>)
 800194e:	69dc      	ldr	r4, [r3, #28]
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	69b9      	ldr	r1, [r7, #24]
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff f9f5 	bl	8000d44 <__aeabi_fmul>
 800195a:	4603      	mov	r3, r0
 800195c:	4619      	mov	r1, r3
 800195e:	4620      	mov	r0, r4
 8001960:	f7ff f8e6 	bl	8000b30 <__aeabi_fsub>
 8001964:	4603      	mov	r3, r0
 8001966:	461a      	mov	r2, r3
 8001968:	4b13      	ldr	r3, [pc, #76]	; (80019b8 <KalmanY_getAngle+0x220>)
 800196a:	61da      	str	r2, [r3, #28]
    KalmanY.P[1][0] -= K[1] * P00_temp;
 800196c:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <KalmanY_getAngle+0x220>)
 800196e:	6a1c      	ldr	r4, [r3, #32]
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	69f9      	ldr	r1, [r7, #28]
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff f9e5 	bl	8000d44 <__aeabi_fmul>
 800197a:	4603      	mov	r3, r0
 800197c:	4619      	mov	r1, r3
 800197e:	4620      	mov	r0, r4
 8001980:	f7ff f8d6 	bl	8000b30 <__aeabi_fsub>
 8001984:	4603      	mov	r3, r0
 8001986:	461a      	mov	r2, r3
 8001988:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <KalmanY_getAngle+0x220>)
 800198a:	621a      	str	r2, [r3, #32]
    KalmanY.P[1][1] -= K[1] * P01_temp;
 800198c:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <KalmanY_getAngle+0x220>)
 800198e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	69b9      	ldr	r1, [r7, #24]
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff f9d5 	bl	8000d44 <__aeabi_fmul>
 800199a:	4603      	mov	r3, r0
 800199c:	4619      	mov	r1, r3
 800199e:	4620      	mov	r0, r4
 80019a0:	f7ff f8c6 	bl	8000b30 <__aeabi_fsub>
 80019a4:	4603      	mov	r3, r0
 80019a6:	461a      	mov	r2, r3
 80019a8:	4b03      	ldr	r3, [pc, #12]	; (80019b8 <KalmanY_getAngle+0x220>)
 80019aa:	625a      	str	r2, [r3, #36]	; 0x24

    return KalmanY.angle;
 80019ac:	4b02      	ldr	r3, [pc, #8]	; (80019b8 <KalmanY_getAngle+0x220>)
 80019ae:	68db      	ldr	r3, [r3, #12]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	372c      	adds	r7, #44	; 0x2c
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd90      	pop	{r4, r7, pc}
 80019b8:	200005dc 	.word	0x200005dc

080019bc <LSM6DS3_Initialize>:
 * 			        - LSM6DS3_SA0_HIGH_LEVEL address -> (0x6B << 1)
 * 		   timeout: Set the timeout for the I2C peripheral
 * 		   i2c_channel: Define the selected I2C channel for the IMU
 * @retval None
*/
void LSM6DS3_Initialize(uint8_t SA0, uint16_t timeout, I2C_HandleTypeDef* i2c_channel) {
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	603a      	str	r2, [r7, #0]
 80019c6:	71fb      	strb	r3, [r7, #7]
 80019c8:	460b      	mov	r3, r1
 80019ca:	80bb      	strh	r3, [r7, #4]
	if(SA0)
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d003      	beq.n	80019da <LSM6DS3_Initialize+0x1e>
		LSM6DS3_parameters.adrs	  = LSM6DS3_I2C_ADDRESS_1;
 80019d2:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <LSM6DS3_Initialize+0x3c>)
 80019d4:	22d6      	movs	r2, #214	; 0xd6
 80019d6:	805a      	strh	r2, [r3, #2]
 80019d8:	e002      	b.n	80019e0 <LSM6DS3_Initialize+0x24>
	else
		LSM6DS3_parameters.adrs    = LSM6DS3_I2C_ADDRESS_0;
 80019da:	4b07      	ldr	r3, [pc, #28]	; (80019f8 <LSM6DS3_Initialize+0x3c>)
 80019dc:	22d4      	movs	r2, #212	; 0xd4
 80019de:	805a      	strh	r2, [r3, #2]
	LSM6DS3_parameters.timeout	   = timeout;
 80019e0:	4a05      	ldr	r2, [pc, #20]	; (80019f8 <LSM6DS3_Initialize+0x3c>)
 80019e2:	88bb      	ldrh	r3, [r7, #4]
 80019e4:	8093      	strh	r3, [r2, #4]
	LSM6DS3_parameters.i2c_channel = i2c_channel;
 80019e6:	4a04      	ldr	r2, [pc, #16]	; (80019f8 <LSM6DS3_Initialize+0x3c>)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	6093      	str	r3, [r2, #8]
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bc80      	pop	{r7}
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	20000390 	.word	0x20000390

080019fc <LSM6DS3_Detect>:
 * @param  None
 * @retval enum LSM6DS3_Result:
 * 					- LSM6DS3_OK    		   = 0,  Success
 * 					- LSM6DS3_FAIL  		   = 1,  Failed due to HAL
*/
LSM6DS3_Result LSM6DS3_Detect(uint8_t efforts) {
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	71fb      	strb	r3, [r7, #7]
	uint8_t byte;

	while(efforts > 0) {
 8001a06:	e014      	b.n	8001a32 <LSM6DS3_Detect+0x36>
		if(LSM6DS3_ReadRegister(LSM6DS3_XL_GS_WHO_AM_I_REG, &byte, sizeof(byte)) == LSM6DS3_OK) {
 8001a08:	f107 030f 	add.w	r3, r7, #15
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	4619      	mov	r1, r3
 8001a10:	200f      	movs	r0, #15
 8001a12:	f000 f981 	bl	8001d18 <LSM6DS3_ReadRegister>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d104      	bne.n	8001a26 <LSM6DS3_Detect+0x2a>
			if(byte == LSM6DS3_WHO_I_AM_RESPONSE)
 8001a1c:	7bfb      	ldrb	r3, [r7, #15]
 8001a1e:	2b69      	cmp	r3, #105	; 0x69
 8001a20:	d101      	bne.n	8001a26 <LSM6DS3_Detect+0x2a>
				return LSM6DS3_OK;
 8001a22:	2300      	movs	r3, #0
 8001a24:	e009      	b.n	8001a3a <LSM6DS3_Detect+0x3e>
		}
		HAL_Delay(2);
 8001a26:	2002      	movs	r0, #2
 8001a28:	f000 fda0 	bl	800256c <HAL_Delay>
		efforts--;
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	71fb      	strb	r3, [r7, #7]
	while(efforts > 0) {
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d1e7      	bne.n	8001a08 <LSM6DS3_Detect+0xc>
	}
	return LSM6DS3_FAIL;
 8001a38:	2301      	movs	r3, #1
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <LSM6DS3_XL_Start>:
 * @retval enum LSM6DS3_Result:
 * 					- LSM6DS3_OK    		   = 0,  Success
 * 					- LSM6DS3_FAIL  		   = 1,  Failed due to HAL
 * 					- LSM6DS3_FAIL_PARAMETERS  = 2,  Failed due to wrong parameters
*/
LSM6DS3_Result LSM6DS3_XL_Start(uint8_t XL_Rate, uint8_t XL_Scale, uint8_t XL_Filter) {
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b084      	sub	sp, #16
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	4603      	mov	r3, r0
 8001a4a:	71fb      	strb	r3, [r7, #7]
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	71bb      	strb	r3, [r7, #6]
 8001a50:	4613      	mov	r3, r2
 8001a52:	717b      	strb	r3, [r7, #5]
	uint8_t byte = (XL_Rate << 4) | ((XL_Scale << 2) & 0x0F) | (XL_Filter & 0x03);
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	011b      	lsls	r3, r3, #4
 8001a58:	b25a      	sxtb	r2, r3
 8001a5a:	79bb      	ldrb	r3, [r7, #6]
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	b25b      	sxtb	r3, r3
 8001a60:	f003 030f 	and.w	r3, r3, #15
 8001a64:	b25b      	sxtb	r3, r3
 8001a66:	4313      	orrs	r3, r2
 8001a68:	b25a      	sxtb	r2, r3
 8001a6a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001a6e:	f003 0303 	and.w	r3, r3, #3
 8001a72:	b25b      	sxtb	r3, r3
 8001a74:	4313      	orrs	r3, r2
 8001a76:	b25b      	sxtb	r3, r3
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	73fb      	strb	r3, [r7, #15]

	if(LSM6DS3_Verify_XL_Settings(XL_Rate, XL_Scale, XL_Filter) !=  LSM6DS3_OK)
 8001a7c:	797a      	ldrb	r2, [r7, #5]
 8001a7e:	79b9      	ldrb	r1, [r7, #6]
 8001a80:	79fb      	ldrb	r3, [r7, #7]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f000 f816 	bl	8001ab4 <LSM6DS3_Verify_XL_Settings>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <LSM6DS3_XL_Start+0x50>
		return LSM6DS3_FAIL_PARAMETERS;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	e00c      	b.n	8001aac <LSM6DS3_XL_Start+0x6a>
	if(LSM6DS3_WriteAndVerify(LSM6DS3_XL_GS_CTRL1_XL, &byte, sizeof(byte)) ==  LSM6DS3_OK)
 8001a92:	f107 030f 	add.w	r3, r7, #15
 8001a96:	2201      	movs	r2, #1
 8001a98:	4619      	mov	r1, r3
 8001a9a:	2010      	movs	r0, #16
 8001a9c:	f000 f962 	bl	8001d64 <LSM6DS3_WriteAndVerify>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d101      	bne.n	8001aaa <LSM6DS3_XL_Start+0x68>
		return LSM6DS3_OK;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	e000      	b.n	8001aac <LSM6DS3_XL_Start+0x6a>
	return LSM6DS3_FAIL;
 8001aaa:	2301      	movs	r3, #1
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3710      	adds	r7, #16
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <LSM6DS3_Verify_XL_Settings>:
 * @param  None
 * @retval enum LSM6DS3_Result:
 * 					- LSM6DS3_OK    		   = 0,  Success
 * 					- LSM6DS3_FAIL_PARAMETERS  = 2,  Failed due to wrong parameters
*/
static LSM6DS3_Result LSM6DS3_Verify_XL_Settings(uint8_t XL_Rate, uint8_t XL_Range, uint8_t XL_Filter) {
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	71fb      	strb	r3, [r7, #7]
 8001abe:	460b      	mov	r3, r1
 8001ac0:	71bb      	strb	r3, [r7, #6]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	717b      	strb	r3, [r7, #5]
	if((XL_Rate < XL_12_5Hz) || (XL_Rate > XL_6660Hz))
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d002      	beq.n	8001ad2 <LSM6DS3_Verify_XL_Settings+0x1e>
 8001acc:	79fb      	ldrb	r3, [r7, #7]
 8001ace:	2b0a      	cmp	r3, #10
 8001ad0:	d901      	bls.n	8001ad6 <LSM6DS3_Verify_XL_Settings+0x22>
		return LSM6DS3_FAIL_PARAMETERS;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	e00d      	b.n	8001af2 <LSM6DS3_Verify_XL_Settings+0x3e>
	else if((XL_Range < XL_RANGE_2G) || (XL_Range > XL_RANGE_8G))
 8001ad6:	79bb      	ldrb	r3, [r7, #6]
 8001ad8:	2b03      	cmp	r3, #3
 8001ada:	d901      	bls.n	8001ae0 <LSM6DS3_Verify_XL_Settings+0x2c>
		return LSM6DS3_FAIL_PARAMETERS;
 8001adc:	2302      	movs	r3, #2
 8001ade:	e008      	b.n	8001af2 <LSM6DS3_Verify_XL_Settings+0x3e>
	else if((XL_Filter < XL_FILTER_400Hz) || (XL_Filter > XL_FILTER_50Hz))
 8001ae0:	797b      	ldrb	r3, [r7, #5]
 8001ae2:	2b03      	cmp	r3, #3
 8001ae4:	d901      	bls.n	8001aea <LSM6DS3_Verify_XL_Settings+0x36>
		return LSM6DS3_FAIL_PARAMETERS;
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	e003      	b.n	8001af2 <LSM6DS3_Verify_XL_Settings+0x3e>
	LSM6DS3_parameters.XL_range = XL_Range;
 8001aea:	4a04      	ldr	r2, [pc, #16]	; (8001afc <LSM6DS3_Verify_XL_Settings+0x48>)
 8001aec:	79bb      	ldrb	r3, [r7, #6]
 8001aee:	7013      	strb	r3, [r2, #0]
	return LSM6DS3_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr
 8001afc:	20000390 	.word	0x20000390

08001b00 <LSM6DS3_GS_Start>:
 * @retval enum LSM6DS3_Result:
 * 					- LSM6DS3_OK    		   = 0,  Success
 * 					- LSM6DS3_FAIL  		   = 1,  Failed due to HAL
 * 					- LSM6DS3_FAIL_PARAMETERS  = 2,  Failed due to wrong parameters
*/
LSM6DS3_Result LSM6DS3_GS_Start(uint8_t GS_Rate, uint8_t GS_Range) {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	460a      	mov	r2, r1
 8001b0a:	71fb      	strb	r3, [r7, #7]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	71bb      	strb	r3, [r7, #6]
	uint8_t byte = (GS_Rate << 4) | ((GS_Range << 1) & 0x0F);
 8001b10:	79fb      	ldrb	r3, [r7, #7]
 8001b12:	011b      	lsls	r3, r3, #4
 8001b14:	b25a      	sxtb	r2, r3
 8001b16:	79bb      	ldrb	r3, [r7, #6]
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	b25b      	sxtb	r3, r3
 8001b1c:	f003 030f 	and.w	r3, r3, #15
 8001b20:	b25b      	sxtb	r3, r3
 8001b22:	4313      	orrs	r3, r2
 8001b24:	b25b      	sxtb	r3, r3
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	73fb      	strb	r3, [r7, #15]

	byte &= 0xFE; /* Always secure the LSB is 0 */
 8001b2a:	7bfb      	ldrb	r3, [r7, #15]
 8001b2c:	f023 0301 	bic.w	r3, r3, #1
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	73fb      	strb	r3, [r7, #15]
	if(LSM6DS3_Verify_GS_Settings(GS_Rate, GS_Range) !=  LSM6DS3_OK)
 8001b34:	79ba      	ldrb	r2, [r7, #6]
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	4611      	mov	r1, r2
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f000 f816 	bl	8001b6c <LSM6DS3_Verify_GS_Settings>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <LSM6DS3_GS_Start+0x4a>
		return LSM6DS3_FAIL_PARAMETERS;
 8001b46:	2302      	movs	r3, #2
 8001b48:	e00c      	b.n	8001b64 <LSM6DS3_GS_Start+0x64>
	if(LSM6DS3_WriteAndVerify(LSM6DS3_XL_GS_CTRL2_G, &byte, sizeof(byte)) ==  LSM6DS3_OK)
 8001b4a:	f107 030f 	add.w	r3, r7, #15
 8001b4e:	2201      	movs	r2, #1
 8001b50:	4619      	mov	r1, r3
 8001b52:	2011      	movs	r0, #17
 8001b54:	f000 f906 	bl	8001d64 <LSM6DS3_WriteAndVerify>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <LSM6DS3_GS_Start+0x62>
		return LSM6DS3_OK;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	e000      	b.n	8001b64 <LSM6DS3_GS_Start+0x64>
	return LSM6DS3_FAIL;
 8001b62:	2301      	movs	r3, #1
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <LSM6DS3_Verify_GS_Settings>:
 * @param  None
 * @retval enum LSM6DS3_Result:
 * 					- LSM6DS3_OK    		   = 0,  Success
 * 					- LSM6DS3_FAIL_PARAMETERS  = 2,  Failed due to wrong parameters
*/
static LSM6DS3_Result LSM6DS3_Verify_GS_Settings(uint8_t GS_Rate, uint8_t GS_Range) {
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	460a      	mov	r2, r1
 8001b76:	71fb      	strb	r3, [r7, #7]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	71bb      	strb	r3, [r7, #6]
	if((GS_Rate < GS_12_5Hz) || (GS_Rate > GS_1666Hz))
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d002      	beq.n	8001b88 <LSM6DS3_Verify_GS_Settings+0x1c>
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	2b08      	cmp	r3, #8
 8001b86:	d901      	bls.n	8001b8c <LSM6DS3_Verify_GS_Settings+0x20>
		return LSM6DS3_FAIL_PARAMETERS;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	e00e      	b.n	8001baa <LSM6DS3_Verify_GS_Settings+0x3e>
	else if((GS_Range < GS_RANGE_250dps) || (GS_Range > GS_RANGE_2000dps) || (GS_Range == 3) || (GS_Range == 5))
 8001b8c:	79bb      	ldrb	r3, [r7, #6]
 8001b8e:	2b06      	cmp	r3, #6
 8001b90:	d805      	bhi.n	8001b9e <LSM6DS3_Verify_GS_Settings+0x32>
 8001b92:	79bb      	ldrb	r3, [r7, #6]
 8001b94:	2b03      	cmp	r3, #3
 8001b96:	d002      	beq.n	8001b9e <LSM6DS3_Verify_GS_Settings+0x32>
 8001b98:	79bb      	ldrb	r3, [r7, #6]
 8001b9a:	2b05      	cmp	r3, #5
 8001b9c:	d101      	bne.n	8001ba2 <LSM6DS3_Verify_GS_Settings+0x36>
		return LSM6DS3_FAIL_PARAMETERS;
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	e003      	b.n	8001baa <LSM6DS3_Verify_GS_Settings+0x3e>
	LSM6DS3_parameters.GS_range = GS_Range;
 8001ba2:	4a04      	ldr	r2, [pc, #16]	; (8001bb4 <LSM6DS3_Verify_GS_Settings+0x48>)
 8001ba4:	79bb      	ldrb	r3, [r7, #6]
 8001ba6:	7053      	strb	r3, [r2, #1]
	return LSM6DS3_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr
 8001bb4:	20000390 	.word	0x20000390

08001bb8 <LSM6DS3_IMU_GetMeasurements>:
 * @param  None
 * @retval enum LSM6DS3_Result:
* 					- LSM6DS3_OK    		   = 0,  Success
 * 					- LSM6DS3_FAIL  		   = 1,  Failed due to HAL
*/
LSM6DS3_Result LSM6DS3_IMU_GetMeasurements(void) {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
	uint8_t bytes[14] = {0};
 8001bbe:	463b      	mov	r3, r7
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	819a      	strh	r2, [r3, #12]

	if(LSM6DS3_ReadRegister(LSM6DS3_XL_GS_OUT_TEMP_L, bytes, sizeof(bytes)) == LSM6DS3_OK) {
 8001bca:	463b      	mov	r3, r7
 8001bcc:	220e      	movs	r2, #14
 8001bce:	4619      	mov	r1, r3
 8001bd0:	2020      	movs	r0, #32
 8001bd2:	f000 f8a1 	bl	8001d18 <LSM6DS3_ReadRegister>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d140      	bne.n	8001c5e <LSM6DS3_IMU_GetMeasurements+0xa6>
		LSM6DS3_data.Temperature = (int16_t) (bytes[1]<<8  | bytes[0]);
 8001bdc:	787b      	ldrb	r3, [r7, #1]
 8001bde:	021b      	lsls	r3, r3, #8
 8001be0:	b21a      	sxth	r2, r3
 8001be2:	783b      	ldrb	r3, [r7, #0]
 8001be4:	b21b      	sxth	r3, r3
 8001be6:	4313      	orrs	r3, r2
 8001be8:	b21a      	sxth	r2, r3
 8001bea:	4b1f      	ldr	r3, [pc, #124]	; (8001c68 <LSM6DS3_IMU_GetMeasurements+0xb0>)
 8001bec:	819a      	strh	r2, [r3, #12]
		LSM6DS3_data.GS_x 		 = (int16_t) (bytes[3]<<8  | bytes[2]);
 8001bee:	78fb      	ldrb	r3, [r7, #3]
 8001bf0:	021b      	lsls	r3, r3, #8
 8001bf2:	b21a      	sxth	r2, r3
 8001bf4:	78bb      	ldrb	r3, [r7, #2]
 8001bf6:	b21b      	sxth	r3, r3
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	b21a      	sxth	r2, r3
 8001bfc:	4b1a      	ldr	r3, [pc, #104]	; (8001c68 <LSM6DS3_IMU_GetMeasurements+0xb0>)
 8001bfe:	80da      	strh	r2, [r3, #6]
		LSM6DS3_data.GS_y 		 = (int16_t) (bytes[5]<<8  | bytes[4]);
 8001c00:	797b      	ldrb	r3, [r7, #5]
 8001c02:	021b      	lsls	r3, r3, #8
 8001c04:	b21a      	sxth	r2, r3
 8001c06:	793b      	ldrb	r3, [r7, #4]
 8001c08:	b21b      	sxth	r3, r3
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	b21a      	sxth	r2, r3
 8001c0e:	4b16      	ldr	r3, [pc, #88]	; (8001c68 <LSM6DS3_IMU_GetMeasurements+0xb0>)
 8001c10:	811a      	strh	r2, [r3, #8]
		LSM6DS3_data.GS_z 		 = (int16_t) (bytes[7]<<8  | bytes[6]);
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	021b      	lsls	r3, r3, #8
 8001c16:	b21a      	sxth	r2, r3
 8001c18:	79bb      	ldrb	r3, [r7, #6]
 8001c1a:	b21b      	sxth	r3, r3
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	b21a      	sxth	r2, r3
 8001c20:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <LSM6DS3_IMU_GetMeasurements+0xb0>)
 8001c22:	815a      	strh	r2, [r3, #10]
		LSM6DS3_data.XL_x 		 = (int16_t) (bytes[9]<<8  | bytes[8]);
 8001c24:	7a7b      	ldrb	r3, [r7, #9]
 8001c26:	021b      	lsls	r3, r3, #8
 8001c28:	b21a      	sxth	r2, r3
 8001c2a:	7a3b      	ldrb	r3, [r7, #8]
 8001c2c:	b21b      	sxth	r3, r3
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	b21a      	sxth	r2, r3
 8001c32:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <LSM6DS3_IMU_GetMeasurements+0xb0>)
 8001c34:	801a      	strh	r2, [r3, #0]
		LSM6DS3_data.XL_y 		 = (int16_t) (bytes[11]<<8 | bytes[10]);
 8001c36:	7afb      	ldrb	r3, [r7, #11]
 8001c38:	021b      	lsls	r3, r3, #8
 8001c3a:	b21a      	sxth	r2, r3
 8001c3c:	7abb      	ldrb	r3, [r7, #10]
 8001c3e:	b21b      	sxth	r3, r3
 8001c40:	4313      	orrs	r3, r2
 8001c42:	b21a      	sxth	r2, r3
 8001c44:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <LSM6DS3_IMU_GetMeasurements+0xb0>)
 8001c46:	805a      	strh	r2, [r3, #2]
		LSM6DS3_data.XL_z 		 = (int16_t) (bytes[13]<<8 | bytes[12]);
 8001c48:	7b7b      	ldrb	r3, [r7, #13]
 8001c4a:	021b      	lsls	r3, r3, #8
 8001c4c:	b21a      	sxth	r2, r3
 8001c4e:	7b3b      	ldrb	r3, [r7, #12]
 8001c50:	b21b      	sxth	r3, r3
 8001c52:	4313      	orrs	r3, r2
 8001c54:	b21a      	sxth	r2, r3
 8001c56:	4b04      	ldr	r3, [pc, #16]	; (8001c68 <LSM6DS3_IMU_GetMeasurements+0xb0>)
 8001c58:	809a      	strh	r2, [r3, #4]
		return LSM6DS3_OK;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	e000      	b.n	8001c60 <LSM6DS3_IMU_GetMeasurements+0xa8>
	}
	return LSM6DS3_FAIL;
 8001c5e:	2301      	movs	r3, #1
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	2000039c 	.word	0x2000039c

08001c6c <LSM6DS3_GetXL_X_Int16>:
/*
 * @brief  Get the raw data of X axe (Accelerometer)
 * @param  none
 * @retval int16_t: Raw data of X axe
*/
int16_t LSM6DS3_GetXL_X_Int16(void) {
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
	return LSM6DS3_data.XL_x;
 8001c70:	4b03      	ldr	r3, [pc, #12]	; (8001c80 <LSM6DS3_GetXL_X_Int16+0x14>)
 8001c72:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bc80      	pop	{r7}
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	2000039c 	.word	0x2000039c

08001c84 <LSM6DS3_GetXL_Y_Int16>:
/*
 * @brief  Get the raw data of Y axe (Accelerometer)
 * @param  None
 * @retval int16_t: Raw data of Y axe
*/
int16_t LSM6DS3_GetXL_Y_Int16(void) {
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
	return LSM6DS3_data.XL_y;
 8001c88:	4b03      	ldr	r3, [pc, #12]	; (8001c98 <LSM6DS3_GetXL_Y_Int16+0x14>)
 8001c8a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bc80      	pop	{r7}
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	2000039c 	.word	0x2000039c

08001c9c <LSM6DS3_GetXL_Z_Int16>:
/*
 * @brief  Get the raw data of Z axe (Accelerometer)
 * @param  None
 * @retval int16_t: Raw data of Z axe
*/
int16_t LSM6DS3_GetXL_Z_Int16(void) {
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
	return LSM6DS3_data.XL_z;
 8001ca0:	4b03      	ldr	r3, [pc, #12]	; (8001cb0 <LSM6DS3_GetXL_Z_Int16+0x14>)
 8001ca2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc80      	pop	{r7}
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	2000039c 	.word	0x2000039c

08001cb4 <LSM6DS3_GetGS_X_Int16>:
/*
 * @brief  Get the raw data of X axe (Gyroscope)
 * @param  None
 * @retval int16_t: Raw data of X axe
*/
int16_t LSM6DS3_GetGS_X_Int16(void) {
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
	return LSM6DS3_data.GS_x;
 8001cb8:	4b03      	ldr	r3, [pc, #12]	; (8001cc8 <LSM6DS3_GetGS_X_Int16+0x14>)
 8001cba:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bc80      	pop	{r7}
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	2000039c 	.word	0x2000039c

08001ccc <LSM6DS3_GetGS_Y_Int16>:
/*
 * @brief  Get the raw data of Y axe (Gyroscope)
 * @param  None
 * @retval int16_t: Raw data of Y axe
*/
int16_t LSM6DS3_GetGS_Y_Int16(void) {
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
	return LSM6DS3_data.GS_y;
 8001cd0:	4b03      	ldr	r3, [pc, #12]	; (8001ce0 <LSM6DS3_GetGS_Y_Int16+0x14>)
 8001cd2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	2000039c 	.word	0x2000039c

08001ce4 <LSM6DS3_Temperature_Celsius>:
/*
 * @brief  Get the temperature
 * @param  None
 * @retval float: Temperature in C (Celsius)
*/
float LSM6DS3_Temperature_Celsius(void) {
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
	return ((float)LSM6DS3_data.Temperature / 16.0f + 25.0f);
 8001ce8:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <LSM6DS3_Temperature_Celsius+0x2c>)
 8001cea:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7fe ffd4 	bl	8000c9c <__aeabi_i2f>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff f8d6 	bl	8000eac <__aeabi_fdiv>
 8001d00:	4603      	mov	r3, r0
 8001d02:	4904      	ldr	r1, [pc, #16]	; (8001d14 <LSM6DS3_Temperature_Celsius+0x30>)
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7fe ff15 	bl	8000b34 <__addsf3>
 8001d0a:	4603      	mov	r3, r0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	2000039c 	.word	0x2000039c
 8001d14:	41c80000 	.word	0x41c80000

08001d18 <LSM6DS3_ReadRegister>:
 * 		   size: Size of data to be written
 * @retval enum LSM6DS3_Result:
* 					- LSM6DS3_OK    		   = 0,  Success
 * 					- LSM6DS3_FAIL  		   = 1,  Failed due to HAL
*/
static LSM6DS3_Result LSM6DS3_ReadRegister(uint16_t reg, uint8_t* data, uint16_t size) {
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af04      	add	r7, sp, #16
 8001d1e:	4603      	mov	r3, r0
 8001d20:	6039      	str	r1, [r7, #0]
 8001d22:	80fb      	strh	r3, [r7, #6]
 8001d24:	4613      	mov	r3, r2
 8001d26:	80bb      	strh	r3, [r7, #4]
	if(HAL_I2C_Mem_Read(LSM6DS3_parameters.i2c_channel, LSM6DS3_parameters.adrs, (0x00FF & reg), I2C_MEMADD_SIZE_8BIT, data, size, LSM6DS3_parameters.timeout) != HAL_OK)
 8001d28:	4b0d      	ldr	r3, [pc, #52]	; (8001d60 <LSM6DS3_ReadRegister+0x48>)
 8001d2a:	6898      	ldr	r0, [r3, #8]
 8001d2c:	4b0c      	ldr	r3, [pc, #48]	; (8001d60 <LSM6DS3_ReadRegister+0x48>)
 8001d2e:	8859      	ldrh	r1, [r3, #2]
 8001d30:	88fb      	ldrh	r3, [r7, #6]
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	4b0a      	ldr	r3, [pc, #40]	; (8001d60 <LSM6DS3_ReadRegister+0x48>)
 8001d38:	889b      	ldrh	r3, [r3, #4]
 8001d3a:	9302      	str	r3, [sp, #8]
 8001d3c:	88bb      	ldrh	r3, [r7, #4]
 8001d3e:	9301      	str	r3, [sp, #4]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	9300      	str	r3, [sp, #0]
 8001d44:	2301      	movs	r3, #1
 8001d46:	f001 f8bd 	bl	8002ec4 <HAL_I2C_Mem_Read>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <LSM6DS3_ReadRegister+0x3c>
		return LSM6DS3_FAIL;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e000      	b.n	8001d56 <LSM6DS3_ReadRegister+0x3e>
	return LSM6DS3_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20000390 	.word	0x20000390

08001d64 <LSM6DS3_WriteAndVerify>:
 * 					- LSM6DS3_OK    		   = 0,  Success
 * 					- LSM6DS3_FAIL  		   = 1,  Failed due to HAL
 * 					- LSM6DS3_FAIL_PARAMETERS  = 2,  Failed due to wrong parameters
 * 					- LSM6DS3_FAIL_COMPARE 	   = 3,  Failed due to wrong write/read compare
*/
static LSM6DS3_Result LSM6DS3_WriteAndVerify(uint16_t reg, uint8_t* data, uint16_t size) {
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b090      	sub	sp, #64	; 0x40
 8001d68:	af04      	add	r7, sp, #16
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	6039      	str	r1, [r7, #0]
 8001d6e:	80fb      	strh	r3, [r7, #6]
 8001d70:	4613      	mov	r3, r2
 8001d72:	80bb      	strh	r3, [r7, #4]
	uint8_t compare[32] = {0xFF};
 8001d74:	f107 030c 	add.w	r3, r7, #12
 8001d78:	2220      	movs	r2, #32
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f006 fea5 	bl	8008acc <memset>
 8001d82:	23ff      	movs	r3, #255	; 0xff
 8001d84:	733b      	strb	r3, [r7, #12]

	if(size > sizeof(compare))
 8001d86:	88bb      	ldrh	r3, [r7, #4]
 8001d88:	2b20      	cmp	r3, #32
 8001d8a:	d901      	bls.n	8001d90 <LSM6DS3_WriteAndVerify+0x2c>
		return LSM6DS3_FAIL_PARAMETERS;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	e04c      	b.n	8001e2a <LSM6DS3_WriteAndVerify+0xc6>
	if(HAL_I2C_Mem_Write(LSM6DS3_parameters.i2c_channel, LSM6DS3_parameters.adrs, (0x00FF & reg), I2C_MEMADD_SIZE_8BIT, data, size, LSM6DS3_parameters.timeout) != HAL_OK)
 8001d90:	4b28      	ldr	r3, [pc, #160]	; (8001e34 <LSM6DS3_WriteAndVerify+0xd0>)
 8001d92:	6898      	ldr	r0, [r3, #8]
 8001d94:	4b27      	ldr	r3, [pc, #156]	; (8001e34 <LSM6DS3_WriteAndVerify+0xd0>)
 8001d96:	8859      	ldrh	r1, [r3, #2]
 8001d98:	88fb      	ldrh	r3, [r7, #6]
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	b29a      	uxth	r2, r3
 8001d9e:	4b25      	ldr	r3, [pc, #148]	; (8001e34 <LSM6DS3_WriteAndVerify+0xd0>)
 8001da0:	889b      	ldrh	r3, [r3, #4]
 8001da2:	9302      	str	r3, [sp, #8]
 8001da4:	88bb      	ldrh	r3, [r7, #4]
 8001da6:	9301      	str	r3, [sp, #4]
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	2301      	movs	r3, #1
 8001dae:	f000 ff8f 	bl	8002cd0 <HAL_I2C_Mem_Write>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <LSM6DS3_WriteAndVerify+0x58>
		return LSM6DS3_FAIL;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e036      	b.n	8001e2a <LSM6DS3_WriteAndVerify+0xc6>
	if(HAL_I2C_Mem_Read(LSM6DS3_parameters.i2c_channel, LSM6DS3_parameters.adrs, (0x00FF & reg), I2C_MEMADD_SIZE_8BIT, compare, size, LSM6DS3_parameters.timeout) != HAL_OK)
 8001dbc:	4b1d      	ldr	r3, [pc, #116]	; (8001e34 <LSM6DS3_WriteAndVerify+0xd0>)
 8001dbe:	6898      	ldr	r0, [r3, #8]
 8001dc0:	4b1c      	ldr	r3, [pc, #112]	; (8001e34 <LSM6DS3_WriteAndVerify+0xd0>)
 8001dc2:	8859      	ldrh	r1, [r3, #2]
 8001dc4:	88fb      	ldrh	r3, [r7, #6]
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	4b1a      	ldr	r3, [pc, #104]	; (8001e34 <LSM6DS3_WriteAndVerify+0xd0>)
 8001dcc:	889b      	ldrh	r3, [r3, #4]
 8001dce:	9302      	str	r3, [sp, #8]
 8001dd0:	88bb      	ldrh	r3, [r7, #4]
 8001dd2:	9301      	str	r3, [sp, #4]
 8001dd4:	f107 030c 	add.w	r3, r7, #12
 8001dd8:	9300      	str	r3, [sp, #0]
 8001dda:	2301      	movs	r3, #1
 8001ddc:	f001 f872 	bl	8002ec4 <HAL_I2C_Mem_Read>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <LSM6DS3_WriteAndVerify+0x86>
		return LSM6DS3_FAIL;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e01f      	b.n	8001e2a <LSM6DS3_WriteAndVerify+0xc6>
	for(uint8_t i=0; i < size; i++) {
 8001dea:	2300      	movs	r3, #0
 8001dec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001df0:	e014      	b.n	8001e1c <LSM6DS3_WriteAndVerify+0xb8>
		if(compare[i] != data[i])
 8001df2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001df6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001dfa:	4413      	add	r3, r2
 8001dfc:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 8001e00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e04:	6839      	ldr	r1, [r7, #0]
 8001e06:	440b      	add	r3, r1
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d001      	beq.n	8001e12 <LSM6DS3_WriteAndVerify+0xae>
			return LSM6DS3_FAIL_COMPARE;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e00b      	b.n	8001e2a <LSM6DS3_WriteAndVerify+0xc6>
	for(uint8_t i=0; i < size; i++) {
 8001e12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e16:	3301      	adds	r3, #1
 8001e18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001e1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	88ba      	ldrh	r2, [r7, #4]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d8e4      	bhi.n	8001df2 <LSM6DS3_WriteAndVerify+0x8e>
	}
	return LSM6DS3_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3730      	adds	r7, #48	; 0x30
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000390 	.word	0x20000390

08001e38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e38:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e3c:	b084      	sub	sp, #16
 8001e3e:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e40:	f000 fb32 	bl	80024a8 <HAL_Init>

  /* USER CODE BEGIN Init */
  MX_I2C2_Init();
 8001e44:	f000 f8c8 	bl	8001fd8 <MX_I2C2_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e48:	f000 f86c 	bl	8001f24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e4c:	f000 f93e 	bl	80020cc <MX_GPIO_Init>
  /* MX_I2C2_Init(); */
  MX_USB_DEVICE_Init();
 8001e50:	f006 f982 	bl	8008158 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8001e54:	f000 f8ee 	bl	8002034 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001e58:	482c      	ldr	r0, [pc, #176]	; (8001f0c <main+0xd4>)
 8001e5a:	f003 f96a 	bl	8005132 <HAL_TIM_Base_Start_IT>
  LSM6DS3_Initialize(LSM6DS3_SA0_LOW_LEVEL, LSM6DS3_DEFAULT_TIMEOUT, &hi2c2);
 8001e5e:	4a2c      	ldr	r2, [pc, #176]	; (8001f10 <main+0xd8>)
 8001e60:	2164      	movs	r1, #100	; 0x64
 8001e62:	2000      	movs	r0, #0
 8001e64:	f7ff fdaa 	bl	80019bc <LSM6DS3_Initialize>
  if(LSM6DS3_Detect(10) == LSM6DS3_OK) {
 8001e68:	200a      	movs	r0, #10
 8001e6a:	f7ff fdc7 	bl	80019fc <LSM6DS3_Detect>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d10b      	bne.n	8001e8c <main+0x54>
	  LSM6DS3_XL_Start(XL_1666Hz, XL_RANGE_16G, XL_FILTER_400Hz);
 8001e74:	2200      	movs	r2, #0
 8001e76:	2101      	movs	r1, #1
 8001e78:	2008      	movs	r0, #8
 8001e7a:	f7ff fde2 	bl	8001a42 <LSM6DS3_XL_Start>
	  LSM6DS3_GS_Start(GS_1666Hz, GS_RANGE_2000dps);
 8001e7e:	2106      	movs	r1, #6
 8001e80:	2008      	movs	r0, #8
 8001e82:	f7ff fe3d 	bl	8001b00 <LSM6DS3_GS_Start>
	  HAL_Delay(100);
 8001e86:	2064      	movs	r0, #100	; 0x64
 8001e88:	f000 fb70 	bl	800256c <HAL_Delay>
  /* USER CODE BEGIN WHILE */

  /* Execute KalmanFilter every 10 ticks with frequency of 10kHz
   * For this example, Timer2 is used as timing source for KalmanFilter.
  */
  Start_Kalman_Algorithm(10, 10000.0f);
 8001e8c:	4921      	ldr	r1, [pc, #132]	; (8001f14 <main+0xdc>)
 8001e8e:	4822      	ldr	r0, [pc, #136]	; (8001f18 <main+0xe0>)
 8001e90:	f7ff f8ca 	bl	8001028 <Start_Kalman_Algorithm>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(Kalman_GetFlag()) {  /* Time to execute the KalmanFilter? */
 8001e94:	f7ff fb56 	bl	8001544 <Kalman_GetFlag>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d0fa      	beq.n	8001e94 <main+0x5c>
		if(LSM6DS3_IMU_GetMeasurements() == LSM6DS3_OK) {
 8001e9e:	f7ff fe8b 	bl	8001bb8 <LSM6DS3_IMU_GetMeasurements>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d12d      	bne.n	8001f04 <main+0xcc>
			Execute_Kalman_Filter();
 8001ea8:	f7ff f99e 	bl	80011e8 <Execute_Kalman_Filter>
			if(counter_print++ >= 50) {
				printf("%0.2f/%0.2f\r\n", Kalman_GetRoll() ,Kalman_GetPitch());
				counter_print=0;
			}
		#else
			if(counter_print++ >= 250) {
 8001eac:	4b1b      	ldr	r3, [pc, #108]	; (8001f1c <main+0xe4>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	1c5a      	adds	r2, r3, #1
 8001eb2:	b2d1      	uxtb	r1, r2
 8001eb4:	4a19      	ldr	r2, [pc, #100]	; (8001f1c <main+0xe4>)
 8001eb6:	7011      	strb	r1, [r2, #0]
 8001eb8:	2bf9      	cmp	r3, #249	; 0xf9
 8001eba:	d923      	bls.n	8001f04 <main+0xcc>
				printf("Roll = %0.3f & Pitch = %0.1f & Temperature = %0.1f\r\n", Kalman_GetRoll() ,Kalman_GetPitch(), LSM6DS3_Temperature_Celsius());
 8001ebc:	f7ff fb02 	bl	80014c4 <Kalman_GetRoll>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7fe fab0 	bl	8000428 <__aeabi_f2d>
 8001ec8:	4680      	mov	r8, r0
 8001eca:	4689      	mov	r9, r1
 8001ecc:	f7ff faf0 	bl	80014b0 <Kalman_GetPitch>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7fe faa8 	bl	8000428 <__aeabi_f2d>
 8001ed8:	4604      	mov	r4, r0
 8001eda:	460d      	mov	r5, r1
 8001edc:	f7ff ff02 	bl	8001ce4 <LSM6DS3_Temperature_Celsius>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7fe faa0 	bl	8000428 <__aeabi_f2d>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	460b      	mov	r3, r1
 8001eec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001ef0:	e9cd 4500 	strd	r4, r5, [sp]
 8001ef4:	4642      	mov	r2, r8
 8001ef6:	464b      	mov	r3, r9
 8001ef8:	4809      	ldr	r0, [pc, #36]	; (8001f20 <main+0xe8>)
 8001efa:	f007 fa3f 	bl	800937c <iprintf>
				counter_print=0;
 8001efe:	4b07      	ldr	r3, [pc, #28]	; (8001f1c <main+0xe4>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	701a      	strb	r2, [r3, #0]
			}
		#endif
		}
		Kalman_ClearFlag();
 8001f04:	f7ff fb2a 	bl	800155c <Kalman_ClearFlag>
	if(Kalman_GetFlag()) {  /* Time to execute the KalmanFilter? */
 8001f08:	e7c4      	b.n	8001e94 <main+0x5c>
 8001f0a:	bf00      	nop
 8001f0c:	20000680 	.word	0x20000680
 8001f10:	2000062c 	.word	0x2000062c
 8001f14:	461c4000 	.word	0x461c4000
 8001f18:	41200000 	.word	0x41200000
 8001f1c:	200003aa 	.word	0x200003aa
 8001f20:	0800b820 	.word	0x0800b820

08001f24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b094      	sub	sp, #80	; 0x50
 8001f28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f2e:	2228      	movs	r2, #40	; 0x28
 8001f30:	2100      	movs	r1, #0
 8001f32:	4618      	mov	r0, r3
 8001f34:	f006 fdca 	bl	8008acc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f38:	f107 0314 	add.w	r3, r7, #20
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	605a      	str	r2, [r3, #4]
 8001f42:	609a      	str	r2, [r3, #8]
 8001f44:	60da      	str	r2, [r3, #12]
 8001f46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f48:	1d3b      	adds	r3, r7, #4
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	605a      	str	r2, [r3, #4]
 8001f50:	609a      	str	r2, [r3, #8]
 8001f52:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f54:	2301      	movs	r3, #1
 8001f56:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f62:	2301      	movs	r3, #1
 8001f64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f66:	2302      	movs	r3, #2
 8001f68:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001f70:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001f74:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f002 fbf0 	bl	8004760 <HAL_RCC_OscConfig>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001f86:	f000 f8de 	bl	8002146 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f8a:	230f      	movs	r3, #15
 8001f8c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f8e:	2302      	movs	r3, #2
 8001f90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001f92:	2380      	movs	r3, #128	; 0x80
 8001f94:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f9a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001fa0:	f107 0314 	add.w	r3, r7, #20
 8001fa4:	2102      	movs	r1, #2
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f002 fe5a 	bl	8004c60 <HAL_RCC_ClockConfig>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001fb2:	f000 f8c8 	bl	8002146 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001fb6:	2310      	movs	r3, #16
 8001fb8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fbe:	1d3b      	adds	r3, r7, #4
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f002 ffd5 	bl	8004f70 <HAL_RCCEx_PeriphCLKConfig>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001fcc:	f000 f8bb 	bl	8002146 <Error_Handler>
  }
}
 8001fd0:	bf00      	nop
 8001fd2:	3750      	adds	r7, #80	; 0x50
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001fdc:	4b12      	ldr	r3, [pc, #72]	; (8002028 <MX_I2C2_Init+0x50>)
 8001fde:	4a13      	ldr	r2, [pc, #76]	; (800202c <MX_I2C2_Init+0x54>)
 8001fe0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001fe2:	4b11      	ldr	r3, [pc, #68]	; (8002028 <MX_I2C2_Init+0x50>)
 8001fe4:	4a12      	ldr	r2, [pc, #72]	; (8002030 <MX_I2C2_Init+0x58>)
 8001fe6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fe8:	4b0f      	ldr	r3, [pc, #60]	; (8002028 <MX_I2C2_Init+0x50>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001fee:	4b0e      	ldr	r3, [pc, #56]	; (8002028 <MX_I2C2_Init+0x50>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ff4:	4b0c      	ldr	r3, [pc, #48]	; (8002028 <MX_I2C2_Init+0x50>)
 8001ff6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ffa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ffc:	4b0a      	ldr	r3, [pc, #40]	; (8002028 <MX_I2C2_Init+0x50>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002002:	4b09      	ldr	r3, [pc, #36]	; (8002028 <MX_I2C2_Init+0x50>)
 8002004:	2200      	movs	r2, #0
 8002006:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002008:	4b07      	ldr	r3, [pc, #28]	; (8002028 <MX_I2C2_Init+0x50>)
 800200a:	2200      	movs	r2, #0
 800200c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800200e:	4b06      	ldr	r3, [pc, #24]	; (8002028 <MX_I2C2_Init+0x50>)
 8002010:	2200      	movs	r2, #0
 8002012:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002014:	4804      	ldr	r0, [pc, #16]	; (8002028 <MX_I2C2_Init+0x50>)
 8002016:	f000 fd33 	bl	8002a80 <HAL_I2C_Init>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002020:	f000 f891 	bl	8002146 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002024:	bf00      	nop
 8002026:	bd80      	pop	{r7, pc}
 8002028:	2000062c 	.word	0x2000062c
 800202c:	40005800 	.word	0x40005800
 8002030:	00061a80 	.word	0x00061a80

08002034 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800203a:	f107 0308 	add.w	r3, r7, #8
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	605a      	str	r2, [r3, #4]
 8002044:	609a      	str	r2, [r3, #8]
 8002046:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002048:	463b      	mov	r3, r7
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002050:	4b1d      	ldr	r3, [pc, #116]	; (80020c8 <MX_TIM2_Init+0x94>)
 8002052:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002056:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8002058:	4b1b      	ldr	r3, [pc, #108]	; (80020c8 <MX_TIM2_Init+0x94>)
 800205a:	2263      	movs	r2, #99	; 0x63
 800205c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800205e:	4b1a      	ldr	r3, [pc, #104]	; (80020c8 <MX_TIM2_Init+0x94>)
 8002060:	2200      	movs	r2, #0
 8002062:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 36-1;
 8002064:	4b18      	ldr	r3, [pc, #96]	; (80020c8 <MX_TIM2_Init+0x94>)
 8002066:	2223      	movs	r2, #35	; 0x23
 8002068:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800206a:	4b17      	ldr	r3, [pc, #92]	; (80020c8 <MX_TIM2_Init+0x94>)
 800206c:	2200      	movs	r2, #0
 800206e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002070:	4b15      	ldr	r3, [pc, #84]	; (80020c8 <MX_TIM2_Init+0x94>)
 8002072:	2200      	movs	r2, #0
 8002074:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002076:	4814      	ldr	r0, [pc, #80]	; (80020c8 <MX_TIM2_Init+0x94>)
 8002078:	f003 f830 	bl	80050dc <HAL_TIM_Base_Init>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8002082:	f000 f860 	bl	8002146 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002086:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800208a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800208c:	f107 0308 	add.w	r3, r7, #8
 8002090:	4619      	mov	r1, r3
 8002092:	480d      	ldr	r0, [pc, #52]	; (80020c8 <MX_TIM2_Init+0x94>)
 8002094:	f003 f978 	bl	8005388 <HAL_TIM_ConfigClockSource>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800209e:	f000 f852 	bl	8002146 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020a2:	2300      	movs	r3, #0
 80020a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020a6:	2300      	movs	r3, #0
 80020a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020aa:	463b      	mov	r3, r7
 80020ac:	4619      	mov	r1, r3
 80020ae:	4806      	ldr	r0, [pc, #24]	; (80020c8 <MX_TIM2_Init+0x94>)
 80020b0:	f003 fb46 	bl	8005740 <HAL_TIMEx_MasterConfigSynchronization>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80020ba:	f000 f844 	bl	8002146 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80020be:	bf00      	nop
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	20000680 	.word	0x20000680

080020cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020d2:	4b14      	ldr	r3, [pc, #80]	; (8002124 <MX_GPIO_Init+0x58>)
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	4a13      	ldr	r2, [pc, #76]	; (8002124 <MX_GPIO_Init+0x58>)
 80020d8:	f043 0320 	orr.w	r3, r3, #32
 80020dc:	6193      	str	r3, [r2, #24]
 80020de:	4b11      	ldr	r3, [pc, #68]	; (8002124 <MX_GPIO_Init+0x58>)
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	f003 0320 	and.w	r3, r3, #32
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ea:	4b0e      	ldr	r3, [pc, #56]	; (8002124 <MX_GPIO_Init+0x58>)
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	4a0d      	ldr	r2, [pc, #52]	; (8002124 <MX_GPIO_Init+0x58>)
 80020f0:	f043 0308 	orr.w	r3, r3, #8
 80020f4:	6193      	str	r3, [r2, #24]
 80020f6:	4b0b      	ldr	r3, [pc, #44]	; (8002124 <MX_GPIO_Init+0x58>)
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	f003 0308 	and.w	r3, r3, #8
 80020fe:	60bb      	str	r3, [r7, #8]
 8002100:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002102:	4b08      	ldr	r3, [pc, #32]	; (8002124 <MX_GPIO_Init+0x58>)
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	4a07      	ldr	r2, [pc, #28]	; (8002124 <MX_GPIO_Init+0x58>)
 8002108:	f043 0304 	orr.w	r3, r3, #4
 800210c:	6193      	str	r3, [r2, #24]
 800210e:	4b05      	ldr	r3, [pc, #20]	; (8002124 <MX_GPIO_Init+0x58>)
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	f003 0304 	and.w	r3, r3, #4
 8002116:	607b      	str	r3, [r7, #4]
 8002118:	687b      	ldr	r3, [r7, #4]

}
 800211a:	bf00      	nop
 800211c:	3714      	adds	r7, #20
 800211e:	46bd      	mov	sp, r7
 8002120:	bc80      	pop	{r7}
 8002122:	4770      	bx	lr
 8002124:	40021000 	.word	0x40021000

08002128 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file,char *ptr, int len) {
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
  CDC_Transmit_FS(ptr,len);
 8002134:	6879      	ldr	r1, [r7, #4]
 8002136:	68b8      	ldr	r0, [r7, #8]
 8002138:	f006 f8cc 	bl	80082d4 <CDC_Transmit_FS>
  return len;
 800213c:	687b      	ldr	r3, [r7, #4]
}
 800213e:	4618      	mov	r0, r3
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002146:	b480      	push	{r7}
 8002148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800214a:	bf00      	nop
 800214c:	46bd      	mov	sp, r7
 800214e:	bc80      	pop	{r7}
 8002150:	4770      	bx	lr
	...

08002154 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800215a:	4b15      	ldr	r3, [pc, #84]	; (80021b0 <HAL_MspInit+0x5c>)
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	4a14      	ldr	r2, [pc, #80]	; (80021b0 <HAL_MspInit+0x5c>)
 8002160:	f043 0301 	orr.w	r3, r3, #1
 8002164:	6193      	str	r3, [r2, #24]
 8002166:	4b12      	ldr	r3, [pc, #72]	; (80021b0 <HAL_MspInit+0x5c>)
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	60bb      	str	r3, [r7, #8]
 8002170:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002172:	4b0f      	ldr	r3, [pc, #60]	; (80021b0 <HAL_MspInit+0x5c>)
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	4a0e      	ldr	r2, [pc, #56]	; (80021b0 <HAL_MspInit+0x5c>)
 8002178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800217c:	61d3      	str	r3, [r2, #28]
 800217e:	4b0c      	ldr	r3, [pc, #48]	; (80021b0 <HAL_MspInit+0x5c>)
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002186:	607b      	str	r3, [r7, #4]
 8002188:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800218a:	4b0a      	ldr	r3, [pc, #40]	; (80021b4 <HAL_MspInit+0x60>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	4a04      	ldr	r2, [pc, #16]	; (80021b4 <HAL_MspInit+0x60>)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021a6:	bf00      	nop
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr
 80021b0:	40021000 	.word	0x40021000
 80021b4:	40010000 	.word	0x40010000

080021b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b088      	sub	sp, #32
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c0:	f107 0310 	add.w	r3, r7, #16
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a16      	ldr	r2, [pc, #88]	; (800222c <HAL_I2C_MspInit+0x74>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d124      	bne.n	8002222 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021d8:	4b15      	ldr	r3, [pc, #84]	; (8002230 <HAL_I2C_MspInit+0x78>)
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	4a14      	ldr	r2, [pc, #80]	; (8002230 <HAL_I2C_MspInit+0x78>)
 80021de:	f043 0308 	orr.w	r3, r3, #8
 80021e2:	6193      	str	r3, [r2, #24]
 80021e4:	4b12      	ldr	r3, [pc, #72]	; (8002230 <HAL_I2C_MspInit+0x78>)
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	f003 0308 	and.w	r3, r3, #8
 80021ec:	60fb      	str	r3, [r7, #12]
 80021ee:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80021f0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80021f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021f6:	2312      	movs	r3, #18
 80021f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021fa:	2303      	movs	r3, #3
 80021fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021fe:	f107 0310 	add.w	r3, r7, #16
 8002202:	4619      	mov	r1, r3
 8002204:	480b      	ldr	r0, [pc, #44]	; (8002234 <HAL_I2C_MspInit+0x7c>)
 8002206:	f000 fae1 	bl	80027cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800220a:	4b09      	ldr	r3, [pc, #36]	; (8002230 <HAL_I2C_MspInit+0x78>)
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	4a08      	ldr	r2, [pc, #32]	; (8002230 <HAL_I2C_MspInit+0x78>)
 8002210:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002214:	61d3      	str	r3, [r2, #28]
 8002216:	4b06      	ldr	r3, [pc, #24]	; (8002230 <HAL_I2C_MspInit+0x78>)
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800221e:	60bb      	str	r3, [r7, #8]
 8002220:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002222:	bf00      	nop
 8002224:	3720      	adds	r7, #32
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	40005800 	.word	0x40005800
 8002230:	40021000 	.word	0x40021000
 8002234:	40010c00 	.word	0x40010c00

08002238 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002248:	d113      	bne.n	8002272 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800224a:	4b0c      	ldr	r3, [pc, #48]	; (800227c <HAL_TIM_Base_MspInit+0x44>)
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	4a0b      	ldr	r2, [pc, #44]	; (800227c <HAL_TIM_Base_MspInit+0x44>)
 8002250:	f043 0301 	orr.w	r3, r3, #1
 8002254:	61d3      	str	r3, [r2, #28]
 8002256:	4b09      	ldr	r3, [pc, #36]	; (800227c <HAL_TIM_Base_MspInit+0x44>)
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002262:	2200      	movs	r2, #0
 8002264:	2100      	movs	r1, #0
 8002266:	201c      	movs	r0, #28
 8002268:	f000 fa79 	bl	800275e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800226c:	201c      	movs	r0, #28
 800226e:	f000 fa92 	bl	8002796 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002272:	bf00      	nop
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	40021000 	.word	0x40021000

08002280 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002284:	bf00      	nop
 8002286:	46bd      	mov	sp, r7
 8002288:	bc80      	pop	{r7}
 800228a:	4770      	bx	lr

0800228c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002290:	e7fe      	b.n	8002290 <HardFault_Handler+0x4>

08002292 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002292:	b480      	push	{r7}
 8002294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002296:	e7fe      	b.n	8002296 <MemManage_Handler+0x4>

08002298 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800229c:	e7fe      	b.n	800229c <BusFault_Handler+0x4>

0800229e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800229e:	b480      	push	{r7}
 80022a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022a2:	e7fe      	b.n	80022a2 <UsageFault_Handler+0x4>

080022a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022a8:	bf00      	nop
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bc80      	pop	{r7}
 80022ae:	4770      	bx	lr

080022b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022b4:	bf00      	nop
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc80      	pop	{r7}
 80022ba:	4770      	bx	lr

080022bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022c0:	bf00      	nop
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr

080022c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022cc:	f000 f932 	bl	8002534 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
}
 80022d0:	bf00      	nop
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80022d8:	4802      	ldr	r0, [pc, #8]	; (80022e4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80022da:	f001 fc66 	bl	8003baa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	20001358 	.word	0x20001358

080022e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80022ec:	4803      	ldr	r0, [pc, #12]	; (80022fc <TIM2_IRQHandler+0x14>)
 80022ee:	f002 ff43 	bl	8005178 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  Kalman_IncTick();
 80022f2:	f7ff f8f1 	bl	80014d8 <Kalman_IncTick>
  /* USER CODE END TIM2_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	20000680 	.word	0x20000680

08002300 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800230c:	2300      	movs	r3, #0
 800230e:	617b      	str	r3, [r7, #20]
 8002310:	e00a      	b.n	8002328 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002312:	f3af 8000 	nop.w
 8002316:	4601      	mov	r1, r0
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	1c5a      	adds	r2, r3, #1
 800231c:	60ba      	str	r2, [r7, #8]
 800231e:	b2ca      	uxtb	r2, r1
 8002320:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	3301      	adds	r3, #1
 8002326:	617b      	str	r3, [r7, #20]
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	429a      	cmp	r2, r3
 800232e:	dbf0      	blt.n	8002312 <_read+0x12>
	}

return len;
 8002330:	687b      	ldr	r3, [r7, #4]
}
 8002332:	4618      	mov	r0, r3
 8002334:	3718      	adds	r7, #24
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <_close>:
	}
	return len;
}

int _close(int file)
{
 800233a:	b480      	push	{r7}
 800233c:	b083      	sub	sp, #12
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
	return -1;
 8002342:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002346:	4618      	mov	r0, r3
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr

08002350 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002360:	605a      	str	r2, [r3, #4]
	return 0;
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	bc80      	pop	{r7}
 800236c:	4770      	bx	lr

0800236e <_isatty>:

int _isatty(int file)
{
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
	return 1;
 8002376:	2301      	movs	r3, #1
}
 8002378:	4618      	mov	r0, r3
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	bc80      	pop	{r7}
 8002380:	4770      	bx	lr

08002382 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002382:	b480      	push	{r7}
 8002384:	b085      	sub	sp, #20
 8002386:	af00      	add	r7, sp, #0
 8002388:	60f8      	str	r0, [r7, #12]
 800238a:	60b9      	str	r1, [r7, #8]
 800238c:	607a      	str	r2, [r7, #4]
	return 0;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3714      	adds	r7, #20
 8002394:	46bd      	mov	sp, r7
 8002396:	bc80      	pop	{r7}
 8002398:	4770      	bx	lr
	...

0800239c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80023a4:	4b11      	ldr	r3, [pc, #68]	; (80023ec <_sbrk+0x50>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d102      	bne.n	80023b2 <_sbrk+0x16>
		heap_end = &end;
 80023ac:	4b0f      	ldr	r3, [pc, #60]	; (80023ec <_sbrk+0x50>)
 80023ae:	4a10      	ldr	r2, [pc, #64]	; (80023f0 <_sbrk+0x54>)
 80023b0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80023b2:	4b0e      	ldr	r3, [pc, #56]	; (80023ec <_sbrk+0x50>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80023b8:	4b0c      	ldr	r3, [pc, #48]	; (80023ec <_sbrk+0x50>)
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4413      	add	r3, r2
 80023c0:	466a      	mov	r2, sp
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d907      	bls.n	80023d6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80023c6:	f006 fb57 	bl	8008a78 <__errno>
 80023ca:	4602      	mov	r2, r0
 80023cc:	230c      	movs	r3, #12
 80023ce:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80023d0:	f04f 33ff 	mov.w	r3, #4294967295
 80023d4:	e006      	b.n	80023e4 <_sbrk+0x48>
	}

	heap_end += incr;
 80023d6:	4b05      	ldr	r3, [pc, #20]	; (80023ec <_sbrk+0x50>)
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4413      	add	r3, r2
 80023de:	4a03      	ldr	r2, [pc, #12]	; (80023ec <_sbrk+0x50>)
 80023e0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80023e2:	68fb      	ldr	r3, [r7, #12]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3710      	adds	r7, #16
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	200003ac 	.word	0x200003ac
 80023f0:	200015c8 	.word	0x200015c8

080023f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80023f8:	4b15      	ldr	r3, [pc, #84]	; (8002450 <SystemInit+0x5c>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a14      	ldr	r2, [pc, #80]	; (8002450 <SystemInit+0x5c>)
 80023fe:	f043 0301 	orr.w	r3, r3, #1
 8002402:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002404:	4b12      	ldr	r3, [pc, #72]	; (8002450 <SystemInit+0x5c>)
 8002406:	685a      	ldr	r2, [r3, #4]
 8002408:	4911      	ldr	r1, [pc, #68]	; (8002450 <SystemInit+0x5c>)
 800240a:	4b12      	ldr	r3, [pc, #72]	; (8002454 <SystemInit+0x60>)
 800240c:	4013      	ands	r3, r2
 800240e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002410:	4b0f      	ldr	r3, [pc, #60]	; (8002450 <SystemInit+0x5c>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a0e      	ldr	r2, [pc, #56]	; (8002450 <SystemInit+0x5c>)
 8002416:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800241a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800241e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002420:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <SystemInit+0x5c>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a0a      	ldr	r2, [pc, #40]	; (8002450 <SystemInit+0x5c>)
 8002426:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800242a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800242c:	4b08      	ldr	r3, [pc, #32]	; (8002450 <SystemInit+0x5c>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	4a07      	ldr	r2, [pc, #28]	; (8002450 <SystemInit+0x5c>)
 8002432:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002436:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002438:	4b05      	ldr	r3, [pc, #20]	; (8002450 <SystemInit+0x5c>)
 800243a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800243e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002440:	4b05      	ldr	r3, [pc, #20]	; (8002458 <SystemInit+0x64>)
 8002442:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002446:	609a      	str	r2, [r3, #8]
#endif 
}
 8002448:	bf00      	nop
 800244a:	46bd      	mov	sp, r7
 800244c:	bc80      	pop	{r7}
 800244e:	4770      	bx	lr
 8002450:	40021000 	.word	0x40021000
 8002454:	f8ff0000 	.word	0xf8ff0000
 8002458:	e000ed00 	.word	0xe000ed00

0800245c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800245c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800245e:	e003      	b.n	8002468 <LoopCopyDataInit>

08002460 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002460:	4b0b      	ldr	r3, [pc, #44]	; (8002490 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002462:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002464:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002466:	3104      	adds	r1, #4

08002468 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002468:	480a      	ldr	r0, [pc, #40]	; (8002494 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800246a:	4b0b      	ldr	r3, [pc, #44]	; (8002498 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800246c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800246e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002470:	d3f6      	bcc.n	8002460 <CopyDataInit>
  ldr r2, =_sbss
 8002472:	4a0a      	ldr	r2, [pc, #40]	; (800249c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002474:	e002      	b.n	800247c <LoopFillZerobss>

08002476 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002476:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002478:	f842 3b04 	str.w	r3, [r2], #4

0800247c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800247c:	4b08      	ldr	r3, [pc, #32]	; (80024a0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800247e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002480:	d3f9      	bcc.n	8002476 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002482:	f7ff ffb7 	bl	80023f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002486:	f006 fafd 	bl	8008a84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800248a:	f7ff fcd5 	bl	8001e38 <main>
  bx lr
 800248e:	4770      	bx	lr
  ldr r3, =_sidata
 8002490:	0800bbe0 	.word	0x0800bbe0
  ldr r0, =_sdata
 8002494:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002498:	20000350 	.word	0x20000350
  ldr r2, =_sbss
 800249c:	20000350 	.word	0x20000350
  ldr r3, = _ebss
 80024a0:	200015c8 	.word	0x200015c8

080024a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024a4:	e7fe      	b.n	80024a4 <ADC1_2_IRQHandler>
	...

080024a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024ac:	4b08      	ldr	r3, [pc, #32]	; (80024d0 <HAL_Init+0x28>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a07      	ldr	r2, [pc, #28]	; (80024d0 <HAL_Init+0x28>)
 80024b2:	f043 0310 	orr.w	r3, r3, #16
 80024b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024b8:	2003      	movs	r0, #3
 80024ba:	f000 f945 	bl	8002748 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024be:	2000      	movs	r0, #0
 80024c0:	f000 f808 	bl	80024d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024c4:	f7ff fe46 	bl	8002154 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40022000 	.word	0x40022000

080024d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024dc:	4b12      	ldr	r3, [pc, #72]	; (8002528 <HAL_InitTick+0x54>)
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	4b12      	ldr	r3, [pc, #72]	; (800252c <HAL_InitTick+0x58>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	4619      	mov	r1, r3
 80024e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80024ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f2:	4618      	mov	r0, r3
 80024f4:	f000 f95d 	bl	80027b2 <HAL_SYSTICK_Config>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e00e      	b.n	8002520 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b0f      	cmp	r3, #15
 8002506:	d80a      	bhi.n	800251e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002508:	2200      	movs	r2, #0
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	f04f 30ff 	mov.w	r0, #4294967295
 8002510:	f000 f925 	bl	800275e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002514:	4a06      	ldr	r2, [pc, #24]	; (8002530 <HAL_InitTick+0x5c>)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800251a:	2300      	movs	r3, #0
 800251c:	e000      	b.n	8002520 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
}
 8002520:	4618      	mov	r0, r3
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	20000000 	.word	0x20000000
 800252c:	20000008 	.word	0x20000008
 8002530:	20000004 	.word	0x20000004

08002534 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002538:	4b05      	ldr	r3, [pc, #20]	; (8002550 <HAL_IncTick+0x1c>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	461a      	mov	r2, r3
 800253e:	4b05      	ldr	r3, [pc, #20]	; (8002554 <HAL_IncTick+0x20>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4413      	add	r3, r2
 8002544:	4a03      	ldr	r2, [pc, #12]	; (8002554 <HAL_IncTick+0x20>)
 8002546:	6013      	str	r3, [r2, #0]
}
 8002548:	bf00      	nop
 800254a:	46bd      	mov	sp, r7
 800254c:	bc80      	pop	{r7}
 800254e:	4770      	bx	lr
 8002550:	20000008 	.word	0x20000008
 8002554:	200006c0 	.word	0x200006c0

08002558 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  return uwTick;
 800255c:	4b02      	ldr	r3, [pc, #8]	; (8002568 <HAL_GetTick+0x10>)
 800255e:	681b      	ldr	r3, [r3, #0]
}
 8002560:	4618      	mov	r0, r3
 8002562:	46bd      	mov	sp, r7
 8002564:	bc80      	pop	{r7}
 8002566:	4770      	bx	lr
 8002568:	200006c0 	.word	0x200006c0

0800256c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002574:	f7ff fff0 	bl	8002558 <HAL_GetTick>
 8002578:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002584:	d005      	beq.n	8002592 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002586:	4b09      	ldr	r3, [pc, #36]	; (80025ac <HAL_Delay+0x40>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	461a      	mov	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	4413      	add	r3, r2
 8002590:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002592:	bf00      	nop
 8002594:	f7ff ffe0 	bl	8002558 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d8f7      	bhi.n	8002594 <HAL_Delay+0x28>
  {
  }
}
 80025a4:	bf00      	nop
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	20000008 	.word	0x20000008

080025b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f003 0307 	and.w	r3, r3, #7
 80025be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025c0:	4b0c      	ldr	r3, [pc, #48]	; (80025f4 <__NVIC_SetPriorityGrouping+0x44>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025c6:	68ba      	ldr	r2, [r7, #8]
 80025c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025cc:	4013      	ands	r3, r2
 80025ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025e2:	4a04      	ldr	r2, [pc, #16]	; (80025f4 <__NVIC_SetPriorityGrouping+0x44>)
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	60d3      	str	r3, [r2, #12]
}
 80025e8:	bf00      	nop
 80025ea:	3714      	adds	r7, #20
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bc80      	pop	{r7}
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	e000ed00 	.word	0xe000ed00

080025f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025fc:	4b04      	ldr	r3, [pc, #16]	; (8002610 <__NVIC_GetPriorityGrouping+0x18>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	0a1b      	lsrs	r3, r3, #8
 8002602:	f003 0307 	and.w	r3, r3, #7
}
 8002606:	4618      	mov	r0, r3
 8002608:	46bd      	mov	sp, r7
 800260a:	bc80      	pop	{r7}
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	e000ed00 	.word	0xe000ed00

08002614 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	4603      	mov	r3, r0
 800261c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800261e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002622:	2b00      	cmp	r3, #0
 8002624:	db0b      	blt.n	800263e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002626:	79fb      	ldrb	r3, [r7, #7]
 8002628:	f003 021f 	and.w	r2, r3, #31
 800262c:	4906      	ldr	r1, [pc, #24]	; (8002648 <__NVIC_EnableIRQ+0x34>)
 800262e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002632:	095b      	lsrs	r3, r3, #5
 8002634:	2001      	movs	r0, #1
 8002636:	fa00 f202 	lsl.w	r2, r0, r2
 800263a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800263e:	bf00      	nop
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	bc80      	pop	{r7}
 8002646:	4770      	bx	lr
 8002648:	e000e100 	.word	0xe000e100

0800264c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	4603      	mov	r3, r0
 8002654:	6039      	str	r1, [r7, #0]
 8002656:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265c:	2b00      	cmp	r3, #0
 800265e:	db0a      	blt.n	8002676 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	b2da      	uxtb	r2, r3
 8002664:	490c      	ldr	r1, [pc, #48]	; (8002698 <__NVIC_SetPriority+0x4c>)
 8002666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266a:	0112      	lsls	r2, r2, #4
 800266c:	b2d2      	uxtb	r2, r2
 800266e:	440b      	add	r3, r1
 8002670:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002674:	e00a      	b.n	800268c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	b2da      	uxtb	r2, r3
 800267a:	4908      	ldr	r1, [pc, #32]	; (800269c <__NVIC_SetPriority+0x50>)
 800267c:	79fb      	ldrb	r3, [r7, #7]
 800267e:	f003 030f 	and.w	r3, r3, #15
 8002682:	3b04      	subs	r3, #4
 8002684:	0112      	lsls	r2, r2, #4
 8002686:	b2d2      	uxtb	r2, r2
 8002688:	440b      	add	r3, r1
 800268a:	761a      	strb	r2, [r3, #24]
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	bc80      	pop	{r7}
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	e000e100 	.word	0xe000e100
 800269c:	e000ed00 	.word	0xe000ed00

080026a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b089      	sub	sp, #36	; 0x24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f003 0307 	and.w	r3, r3, #7
 80026b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	f1c3 0307 	rsb	r3, r3, #7
 80026ba:	2b04      	cmp	r3, #4
 80026bc:	bf28      	it	cs
 80026be:	2304      	movcs	r3, #4
 80026c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	3304      	adds	r3, #4
 80026c6:	2b06      	cmp	r3, #6
 80026c8:	d902      	bls.n	80026d0 <NVIC_EncodePriority+0x30>
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	3b03      	subs	r3, #3
 80026ce:	e000      	b.n	80026d2 <NVIC_EncodePriority+0x32>
 80026d0:	2300      	movs	r3, #0
 80026d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026d4:	f04f 32ff 	mov.w	r2, #4294967295
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	43da      	mvns	r2, r3
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	401a      	ands	r2, r3
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026e8:	f04f 31ff 	mov.w	r1, #4294967295
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	fa01 f303 	lsl.w	r3, r1, r3
 80026f2:	43d9      	mvns	r1, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f8:	4313      	orrs	r3, r2
         );
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3724      	adds	r7, #36	; 0x24
 80026fe:	46bd      	mov	sp, r7
 8002700:	bc80      	pop	{r7}
 8002702:	4770      	bx	lr

08002704 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	3b01      	subs	r3, #1
 8002710:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002714:	d301      	bcc.n	800271a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002716:	2301      	movs	r3, #1
 8002718:	e00f      	b.n	800273a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800271a:	4a0a      	ldr	r2, [pc, #40]	; (8002744 <SysTick_Config+0x40>)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3b01      	subs	r3, #1
 8002720:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002722:	210f      	movs	r1, #15
 8002724:	f04f 30ff 	mov.w	r0, #4294967295
 8002728:	f7ff ff90 	bl	800264c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800272c:	4b05      	ldr	r3, [pc, #20]	; (8002744 <SysTick_Config+0x40>)
 800272e:	2200      	movs	r2, #0
 8002730:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002732:	4b04      	ldr	r3, [pc, #16]	; (8002744 <SysTick_Config+0x40>)
 8002734:	2207      	movs	r2, #7
 8002736:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	e000e010 	.word	0xe000e010

08002748 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f7ff ff2d 	bl	80025b0 <__NVIC_SetPriorityGrouping>
}
 8002756:	bf00      	nop
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800275e:	b580      	push	{r7, lr}
 8002760:	b086      	sub	sp, #24
 8002762:	af00      	add	r7, sp, #0
 8002764:	4603      	mov	r3, r0
 8002766:	60b9      	str	r1, [r7, #8]
 8002768:	607a      	str	r2, [r7, #4]
 800276a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800276c:	2300      	movs	r3, #0
 800276e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002770:	f7ff ff42 	bl	80025f8 <__NVIC_GetPriorityGrouping>
 8002774:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	68b9      	ldr	r1, [r7, #8]
 800277a:	6978      	ldr	r0, [r7, #20]
 800277c:	f7ff ff90 	bl	80026a0 <NVIC_EncodePriority>
 8002780:	4602      	mov	r2, r0
 8002782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002786:	4611      	mov	r1, r2
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff ff5f 	bl	800264c <__NVIC_SetPriority>
}
 800278e:	bf00      	nop
 8002790:	3718      	adds	r7, #24
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b082      	sub	sp, #8
 800279a:	af00      	add	r7, sp, #0
 800279c:	4603      	mov	r3, r0
 800279e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff ff35 	bl	8002614 <__NVIC_EnableIRQ>
}
 80027aa:	bf00      	nop
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b082      	sub	sp, #8
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f7ff ffa2 	bl	8002704 <SysTick_Config>
 80027c0:	4603      	mov	r3, r0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
	...

080027cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b08b      	sub	sp, #44	; 0x2c
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027d6:	2300      	movs	r3, #0
 80027d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80027da:	2300      	movs	r3, #0
 80027dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027de:	e127      	b.n	8002a30 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80027e0:	2201      	movs	r2, #1
 80027e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	69fa      	ldr	r2, [r7, #28]
 80027f0:	4013      	ands	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	f040 8116 	bne.w	8002a2a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	2b12      	cmp	r3, #18
 8002804:	d034      	beq.n	8002870 <HAL_GPIO_Init+0xa4>
 8002806:	2b12      	cmp	r3, #18
 8002808:	d80d      	bhi.n	8002826 <HAL_GPIO_Init+0x5a>
 800280a:	2b02      	cmp	r3, #2
 800280c:	d02b      	beq.n	8002866 <HAL_GPIO_Init+0x9a>
 800280e:	2b02      	cmp	r3, #2
 8002810:	d804      	bhi.n	800281c <HAL_GPIO_Init+0x50>
 8002812:	2b00      	cmp	r3, #0
 8002814:	d031      	beq.n	800287a <HAL_GPIO_Init+0xae>
 8002816:	2b01      	cmp	r3, #1
 8002818:	d01c      	beq.n	8002854 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800281a:	e048      	b.n	80028ae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800281c:	2b03      	cmp	r3, #3
 800281e:	d043      	beq.n	80028a8 <HAL_GPIO_Init+0xdc>
 8002820:	2b11      	cmp	r3, #17
 8002822:	d01b      	beq.n	800285c <HAL_GPIO_Init+0x90>
          break;
 8002824:	e043      	b.n	80028ae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002826:	4a89      	ldr	r2, [pc, #548]	; (8002a4c <HAL_GPIO_Init+0x280>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d026      	beq.n	800287a <HAL_GPIO_Init+0xae>
 800282c:	4a87      	ldr	r2, [pc, #540]	; (8002a4c <HAL_GPIO_Init+0x280>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d806      	bhi.n	8002840 <HAL_GPIO_Init+0x74>
 8002832:	4a87      	ldr	r2, [pc, #540]	; (8002a50 <HAL_GPIO_Init+0x284>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d020      	beq.n	800287a <HAL_GPIO_Init+0xae>
 8002838:	4a86      	ldr	r2, [pc, #536]	; (8002a54 <HAL_GPIO_Init+0x288>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d01d      	beq.n	800287a <HAL_GPIO_Init+0xae>
          break;
 800283e:	e036      	b.n	80028ae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002840:	4a85      	ldr	r2, [pc, #532]	; (8002a58 <HAL_GPIO_Init+0x28c>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d019      	beq.n	800287a <HAL_GPIO_Init+0xae>
 8002846:	4a85      	ldr	r2, [pc, #532]	; (8002a5c <HAL_GPIO_Init+0x290>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d016      	beq.n	800287a <HAL_GPIO_Init+0xae>
 800284c:	4a84      	ldr	r2, [pc, #528]	; (8002a60 <HAL_GPIO_Init+0x294>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d013      	beq.n	800287a <HAL_GPIO_Init+0xae>
          break;
 8002852:	e02c      	b.n	80028ae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	623b      	str	r3, [r7, #32]
          break;
 800285a:	e028      	b.n	80028ae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	3304      	adds	r3, #4
 8002862:	623b      	str	r3, [r7, #32]
          break;
 8002864:	e023      	b.n	80028ae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	3308      	adds	r3, #8
 800286c:	623b      	str	r3, [r7, #32]
          break;
 800286e:	e01e      	b.n	80028ae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	330c      	adds	r3, #12
 8002876:	623b      	str	r3, [r7, #32]
          break;
 8002878:	e019      	b.n	80028ae <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d102      	bne.n	8002888 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002882:	2304      	movs	r3, #4
 8002884:	623b      	str	r3, [r7, #32]
          break;
 8002886:	e012      	b.n	80028ae <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d105      	bne.n	800289c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002890:	2308      	movs	r3, #8
 8002892:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	69fa      	ldr	r2, [r7, #28]
 8002898:	611a      	str	r2, [r3, #16]
          break;
 800289a:	e008      	b.n	80028ae <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800289c:	2308      	movs	r3, #8
 800289e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	69fa      	ldr	r2, [r7, #28]
 80028a4:	615a      	str	r2, [r3, #20]
          break;
 80028a6:	e002      	b.n	80028ae <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80028a8:	2300      	movs	r3, #0
 80028aa:	623b      	str	r3, [r7, #32]
          break;
 80028ac:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	2bff      	cmp	r3, #255	; 0xff
 80028b2:	d801      	bhi.n	80028b8 <HAL_GPIO_Init+0xec>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	e001      	b.n	80028bc <HAL_GPIO_Init+0xf0>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	3304      	adds	r3, #4
 80028bc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	2bff      	cmp	r3, #255	; 0xff
 80028c2:	d802      	bhi.n	80028ca <HAL_GPIO_Init+0xfe>
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	e002      	b.n	80028d0 <HAL_GPIO_Init+0x104>
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	3b08      	subs	r3, #8
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	210f      	movs	r1, #15
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	fa01 f303 	lsl.w	r3, r1, r3
 80028de:	43db      	mvns	r3, r3
 80028e0:	401a      	ands	r2, r3
 80028e2:	6a39      	ldr	r1, [r7, #32]
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ea:	431a      	orrs	r2, r3
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f000 8096 	beq.w	8002a2a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80028fe:	4b59      	ldr	r3, [pc, #356]	; (8002a64 <HAL_GPIO_Init+0x298>)
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	4a58      	ldr	r2, [pc, #352]	; (8002a64 <HAL_GPIO_Init+0x298>)
 8002904:	f043 0301 	orr.w	r3, r3, #1
 8002908:	6193      	str	r3, [r2, #24]
 800290a:	4b56      	ldr	r3, [pc, #344]	; (8002a64 <HAL_GPIO_Init+0x298>)
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	60bb      	str	r3, [r7, #8]
 8002914:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002916:	4a54      	ldr	r2, [pc, #336]	; (8002a68 <HAL_GPIO_Init+0x29c>)
 8002918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291a:	089b      	lsrs	r3, r3, #2
 800291c:	3302      	adds	r3, #2
 800291e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002922:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002926:	f003 0303 	and.w	r3, r3, #3
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	220f      	movs	r2, #15
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	43db      	mvns	r3, r3
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	4013      	ands	r3, r2
 8002938:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a4b      	ldr	r2, [pc, #300]	; (8002a6c <HAL_GPIO_Init+0x2a0>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d013      	beq.n	800296a <HAL_GPIO_Init+0x19e>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a4a      	ldr	r2, [pc, #296]	; (8002a70 <HAL_GPIO_Init+0x2a4>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d00d      	beq.n	8002966 <HAL_GPIO_Init+0x19a>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a49      	ldr	r2, [pc, #292]	; (8002a74 <HAL_GPIO_Init+0x2a8>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d007      	beq.n	8002962 <HAL_GPIO_Init+0x196>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a48      	ldr	r2, [pc, #288]	; (8002a78 <HAL_GPIO_Init+0x2ac>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d101      	bne.n	800295e <HAL_GPIO_Init+0x192>
 800295a:	2303      	movs	r3, #3
 800295c:	e006      	b.n	800296c <HAL_GPIO_Init+0x1a0>
 800295e:	2304      	movs	r3, #4
 8002960:	e004      	b.n	800296c <HAL_GPIO_Init+0x1a0>
 8002962:	2302      	movs	r3, #2
 8002964:	e002      	b.n	800296c <HAL_GPIO_Init+0x1a0>
 8002966:	2301      	movs	r3, #1
 8002968:	e000      	b.n	800296c <HAL_GPIO_Init+0x1a0>
 800296a:	2300      	movs	r3, #0
 800296c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800296e:	f002 0203 	and.w	r2, r2, #3
 8002972:	0092      	lsls	r2, r2, #2
 8002974:	4093      	lsls	r3, r2
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	4313      	orrs	r3, r2
 800297a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800297c:	493a      	ldr	r1, [pc, #232]	; (8002a68 <HAL_GPIO_Init+0x29c>)
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	089b      	lsrs	r3, r3, #2
 8002982:	3302      	adds	r3, #2
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d006      	beq.n	80029a4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002996:	4b39      	ldr	r3, [pc, #228]	; (8002a7c <HAL_GPIO_Init+0x2b0>)
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	4938      	ldr	r1, [pc, #224]	; (8002a7c <HAL_GPIO_Init+0x2b0>)
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	4313      	orrs	r3, r2
 80029a0:	600b      	str	r3, [r1, #0]
 80029a2:	e006      	b.n	80029b2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80029a4:	4b35      	ldr	r3, [pc, #212]	; (8002a7c <HAL_GPIO_Init+0x2b0>)
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	43db      	mvns	r3, r3
 80029ac:	4933      	ldr	r1, [pc, #204]	; (8002a7c <HAL_GPIO_Init+0x2b0>)
 80029ae:	4013      	ands	r3, r2
 80029b0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d006      	beq.n	80029cc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80029be:	4b2f      	ldr	r3, [pc, #188]	; (8002a7c <HAL_GPIO_Init+0x2b0>)
 80029c0:	685a      	ldr	r2, [r3, #4]
 80029c2:	492e      	ldr	r1, [pc, #184]	; (8002a7c <HAL_GPIO_Init+0x2b0>)
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	604b      	str	r3, [r1, #4]
 80029ca:	e006      	b.n	80029da <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80029cc:	4b2b      	ldr	r3, [pc, #172]	; (8002a7c <HAL_GPIO_Init+0x2b0>)
 80029ce:	685a      	ldr	r2, [r3, #4]
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	43db      	mvns	r3, r3
 80029d4:	4929      	ldr	r1, [pc, #164]	; (8002a7c <HAL_GPIO_Init+0x2b0>)
 80029d6:	4013      	ands	r3, r2
 80029d8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d006      	beq.n	80029f4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80029e6:	4b25      	ldr	r3, [pc, #148]	; (8002a7c <HAL_GPIO_Init+0x2b0>)
 80029e8:	689a      	ldr	r2, [r3, #8]
 80029ea:	4924      	ldr	r1, [pc, #144]	; (8002a7c <HAL_GPIO_Init+0x2b0>)
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	608b      	str	r3, [r1, #8]
 80029f2:	e006      	b.n	8002a02 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80029f4:	4b21      	ldr	r3, [pc, #132]	; (8002a7c <HAL_GPIO_Init+0x2b0>)
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	43db      	mvns	r3, r3
 80029fc:	491f      	ldr	r1, [pc, #124]	; (8002a7c <HAL_GPIO_Init+0x2b0>)
 80029fe:	4013      	ands	r3, r2
 8002a00:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d006      	beq.n	8002a1c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a0e:	4b1b      	ldr	r3, [pc, #108]	; (8002a7c <HAL_GPIO_Init+0x2b0>)
 8002a10:	68da      	ldr	r2, [r3, #12]
 8002a12:	491a      	ldr	r1, [pc, #104]	; (8002a7c <HAL_GPIO_Init+0x2b0>)
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	60cb      	str	r3, [r1, #12]
 8002a1a:	e006      	b.n	8002a2a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a1c:	4b17      	ldr	r3, [pc, #92]	; (8002a7c <HAL_GPIO_Init+0x2b0>)
 8002a1e:	68da      	ldr	r2, [r3, #12]
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	43db      	mvns	r3, r3
 8002a24:	4915      	ldr	r1, [pc, #84]	; (8002a7c <HAL_GPIO_Init+0x2b0>)
 8002a26:	4013      	ands	r3, r2
 8002a28:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a36:	fa22 f303 	lsr.w	r3, r2, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f47f aed0 	bne.w	80027e0 <HAL_GPIO_Init+0x14>
  }
}
 8002a40:	bf00      	nop
 8002a42:	372c      	adds	r7, #44	; 0x2c
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bc80      	pop	{r7}
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	10210000 	.word	0x10210000
 8002a50:	10110000 	.word	0x10110000
 8002a54:	10120000 	.word	0x10120000
 8002a58:	10310000 	.word	0x10310000
 8002a5c:	10320000 	.word	0x10320000
 8002a60:	10220000 	.word	0x10220000
 8002a64:	40021000 	.word	0x40021000
 8002a68:	40010000 	.word	0x40010000
 8002a6c:	40010800 	.word	0x40010800
 8002a70:	40010c00 	.word	0x40010c00
 8002a74:	40011000 	.word	0x40011000
 8002a78:	40011400 	.word	0x40011400
 8002a7c:	40010400 	.word	0x40010400

08002a80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e10f      	b.n	8002cb2 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d106      	bne.n	8002aac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f7ff fb86 	bl	80021b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2224      	movs	r2, #36	; 0x24
 8002ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 0201 	bic.w	r2, r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ac4:	f002 fa22 	bl	8004f0c <HAL_RCC_GetPCLK1Freq>
 8002ac8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	4a7b      	ldr	r2, [pc, #492]	; (8002cbc <HAL_I2C_Init+0x23c>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d807      	bhi.n	8002ae4 <HAL_I2C_Init+0x64>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	4a7a      	ldr	r2, [pc, #488]	; (8002cc0 <HAL_I2C_Init+0x240>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	bf94      	ite	ls
 8002adc:	2301      	movls	r3, #1
 8002ade:	2300      	movhi	r3, #0
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	e006      	b.n	8002af2 <HAL_I2C_Init+0x72>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	4a77      	ldr	r2, [pc, #476]	; (8002cc4 <HAL_I2C_Init+0x244>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	bf94      	ite	ls
 8002aec:	2301      	movls	r3, #1
 8002aee:	2300      	movhi	r3, #0
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e0db      	b.n	8002cb2 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	4a72      	ldr	r2, [pc, #456]	; (8002cc8 <HAL_I2C_Init+0x248>)
 8002afe:	fba2 2303 	umull	r2, r3, r2, r3
 8002b02:	0c9b      	lsrs	r3, r3, #18
 8002b04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68ba      	ldr	r2, [r7, #8]
 8002b16:	430a      	orrs	r2, r1
 8002b18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	4a64      	ldr	r2, [pc, #400]	; (8002cbc <HAL_I2C_Init+0x23c>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d802      	bhi.n	8002b34 <HAL_I2C_Init+0xb4>
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	3301      	adds	r3, #1
 8002b32:	e009      	b.n	8002b48 <HAL_I2C_Init+0xc8>
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b3a:	fb02 f303 	mul.w	r3, r2, r3
 8002b3e:	4a63      	ldr	r2, [pc, #396]	; (8002ccc <HAL_I2C_Init+0x24c>)
 8002b40:	fba2 2303 	umull	r2, r3, r2, r3
 8002b44:	099b      	lsrs	r3, r3, #6
 8002b46:	3301      	adds	r3, #1
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6812      	ldr	r2, [r2, #0]
 8002b4c:	430b      	orrs	r3, r1
 8002b4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	4956      	ldr	r1, [pc, #344]	; (8002cbc <HAL_I2C_Init+0x23c>)
 8002b64:	428b      	cmp	r3, r1
 8002b66:	d80d      	bhi.n	8002b84 <HAL_I2C_Init+0x104>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	1e59      	subs	r1, r3, #1
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b76:	3301      	adds	r3, #1
 8002b78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	bf38      	it	cc
 8002b80:	2304      	movcc	r3, #4
 8002b82:	e04f      	b.n	8002c24 <HAL_I2C_Init+0x1a4>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d111      	bne.n	8002bb0 <HAL_I2C_Init+0x130>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	1e58      	subs	r0, r3, #1
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6859      	ldr	r1, [r3, #4]
 8002b94:	460b      	mov	r3, r1
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	440b      	add	r3, r1
 8002b9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	bf0c      	ite	eq
 8002ba8:	2301      	moveq	r3, #1
 8002baa:	2300      	movne	r3, #0
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	e012      	b.n	8002bd6 <HAL_I2C_Init+0x156>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	1e58      	subs	r0, r3, #1
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6859      	ldr	r1, [r3, #4]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	440b      	add	r3, r1
 8002bbe:	0099      	lsls	r1, r3, #2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	bf0c      	ite	eq
 8002bd0:	2301      	moveq	r3, #1
 8002bd2:	2300      	movne	r3, #0
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <HAL_I2C_Init+0x15e>
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e022      	b.n	8002c24 <HAL_I2C_Init+0x1a4>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d10e      	bne.n	8002c04 <HAL_I2C_Init+0x184>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	1e58      	subs	r0, r3, #1
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6859      	ldr	r1, [r3, #4]
 8002bee:	460b      	mov	r3, r1
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	440b      	add	r3, r1
 8002bf4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c02:	e00f      	b.n	8002c24 <HAL_I2C_Init+0x1a4>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	1e58      	subs	r0, r3, #1
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6859      	ldr	r1, [r3, #4]
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	440b      	add	r3, r1
 8002c12:	0099      	lsls	r1, r3, #2
 8002c14:	440b      	add	r3, r1
 8002c16:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c24:	6879      	ldr	r1, [r7, #4]
 8002c26:	6809      	ldr	r1, [r1, #0]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	69da      	ldr	r2, [r3, #28]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a1b      	ldr	r3, [r3, #32]
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	430a      	orrs	r2, r1
 8002c46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6911      	ldr	r1, [r2, #16]
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	68d2      	ldr	r2, [r2, #12]
 8002c5e:	4311      	orrs	r1, r2
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	6812      	ldr	r2, [r2, #0]
 8002c64:	430b      	orrs	r3, r1
 8002c66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	695a      	ldr	r2, [r3, #20]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	430a      	orrs	r2, r1
 8002c82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f042 0201 	orr.w	r2, r2, #1
 8002c92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2220      	movs	r2, #32
 8002c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	000186a0 	.word	0x000186a0
 8002cc0:	001e847f 	.word	0x001e847f
 8002cc4:	003d08ff 	.word	0x003d08ff
 8002cc8:	431bde83 	.word	0x431bde83
 8002ccc:	10624dd3 	.word	0x10624dd3

08002cd0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b088      	sub	sp, #32
 8002cd4:	af02      	add	r7, sp, #8
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	4608      	mov	r0, r1
 8002cda:	4611      	mov	r1, r2
 8002cdc:	461a      	mov	r2, r3
 8002cde:	4603      	mov	r3, r0
 8002ce0:	817b      	strh	r3, [r7, #10]
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	813b      	strh	r3, [r7, #8]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cea:	f7ff fc35 	bl	8002558 <HAL_GetTick>
 8002cee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2b20      	cmp	r3, #32
 8002cfa:	f040 80d9 	bne.w	8002eb0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	9300      	str	r3, [sp, #0]
 8002d02:	2319      	movs	r3, #25
 8002d04:	2201      	movs	r2, #1
 8002d06:	496d      	ldr	r1, [pc, #436]	; (8002ebc <HAL_I2C_Mem_Write+0x1ec>)
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f000 fc6b 	bl	80035e4 <I2C_WaitOnFlagUntilTimeout>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002d14:	2302      	movs	r3, #2
 8002d16:	e0cc      	b.n	8002eb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d101      	bne.n	8002d26 <HAL_I2C_Mem_Write+0x56>
 8002d22:	2302      	movs	r3, #2
 8002d24:	e0c5      	b.n	8002eb2 <HAL_I2C_Mem_Write+0x1e2>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d007      	beq.n	8002d4c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f042 0201 	orr.w	r2, r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2221      	movs	r2, #33	; 0x21
 8002d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2240      	movs	r2, #64	; 0x40
 8002d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6a3a      	ldr	r2, [r7, #32]
 8002d76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002d7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	4a4d      	ldr	r2, [pc, #308]	; (8002ec0 <HAL_I2C_Mem_Write+0x1f0>)
 8002d8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d8e:	88f8      	ldrh	r0, [r7, #6]
 8002d90:	893a      	ldrh	r2, [r7, #8]
 8002d92:	8979      	ldrh	r1, [r7, #10]
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	9301      	str	r3, [sp, #4]
 8002d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9a:	9300      	str	r3, [sp, #0]
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	f000 fac6 	bl	8003330 <I2C_RequestMemoryWrite>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d052      	beq.n	8002e50 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e081      	b.n	8002eb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	f000 fcec 	bl	8003790 <I2C_WaitOnTXEFlagUntilTimeout>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00d      	beq.n	8002dda <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	2b04      	cmp	r3, #4
 8002dc4:	d107      	bne.n	8002dd6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dd4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e06b      	b.n	8002eb2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dde:	781a      	ldrb	r2, [r3, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dea:	1c5a      	adds	r2, r3, #1
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df4:	3b01      	subs	r3, #1
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	3b01      	subs	r3, #1
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	2b04      	cmp	r3, #4
 8002e16:	d11b      	bne.n	8002e50 <HAL_I2C_Mem_Write+0x180>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d017      	beq.n	8002e50 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e24:	781a      	ldrb	r2, [r3, #0]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e30:	1c5a      	adds	r2, r3, #1
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	b29a      	uxth	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1aa      	bne.n	8002dae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f000 fcd8 	bl	8003812 <I2C_WaitOnBTFFlagUntilTimeout>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00d      	beq.n	8002e84 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6c:	2b04      	cmp	r3, #4
 8002e6e:	d107      	bne.n	8002e80 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e7e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e016      	b.n	8002eb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2220      	movs	r2, #32
 8002e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002eac:	2300      	movs	r3, #0
 8002eae:	e000      	b.n	8002eb2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002eb0:	2302      	movs	r3, #2
  }
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3718      	adds	r7, #24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	00100002 	.word	0x00100002
 8002ec0:	ffff0000 	.word	0xffff0000

08002ec4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b08c      	sub	sp, #48	; 0x30
 8002ec8:	af02      	add	r7, sp, #8
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	4608      	mov	r0, r1
 8002ece:	4611      	mov	r1, r2
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	817b      	strh	r3, [r7, #10]
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	813b      	strh	r3, [r7, #8]
 8002eda:	4613      	mov	r3, r2
 8002edc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ede:	f7ff fb3b 	bl	8002558 <HAL_GetTick>
 8002ee2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b20      	cmp	r3, #32
 8002eee:	f040 8218 	bne.w	8003322 <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef4:	9300      	str	r3, [sp, #0]
 8002ef6:	2319      	movs	r3, #25
 8002ef8:	2201      	movs	r2, #1
 8002efa:	4981      	ldr	r1, [pc, #516]	; (8003100 <HAL_I2C_Mem_Read+0x23c>)
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f000 fb71 	bl	80035e4 <I2C_WaitOnFlagUntilTimeout>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002f08:	2302      	movs	r3, #2
 8002f0a:	e20b      	b.n	8003324 <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d101      	bne.n	8002f1a <HAL_I2C_Mem_Read+0x56>
 8002f16:	2302      	movs	r3, #2
 8002f18:	e204      	b.n	8003324 <HAL_I2C_Mem_Read+0x460>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d007      	beq.n	8002f40 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f042 0201 	orr.w	r2, r2, #1
 8002f3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2222      	movs	r2, #34	; 0x22
 8002f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2240      	movs	r2, #64	; 0x40
 8002f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002f70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4a61      	ldr	r2, [pc, #388]	; (8003104 <HAL_I2C_Mem_Read+0x240>)
 8002f80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f82:	88f8      	ldrh	r0, [r7, #6]
 8002f84:	893a      	ldrh	r2, [r7, #8]
 8002f86:	8979      	ldrh	r1, [r7, #10]
 8002f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8a:	9301      	str	r3, [sp, #4]
 8002f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f8e:	9300      	str	r3, [sp, #0]
 8002f90:	4603      	mov	r3, r0
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f000 fa56 	bl	8003444 <I2C_RequestMemoryRead>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e1c0      	b.n	8003324 <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d113      	bne.n	8002fd2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002faa:	2300      	movs	r3, #0
 8002fac:	623b      	str	r3, [r7, #32]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	623b      	str	r3, [r7, #32]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	623b      	str	r3, [r7, #32]
 8002fbe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	e194      	b.n	80032fc <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d11d      	bne.n	8003016 <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fe8:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fea:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fec:	2300      	movs	r3, #0
 8002fee:	61fb      	str	r3, [r7, #28]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	61fb      	str	r3, [r7, #28]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	61fb      	str	r3, [r7, #28]
 8003000:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003010:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003012:	b662      	cpsie	i
 8003014:	e172      	b.n	80032fc <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800301a:	2b02      	cmp	r3, #2
 800301c:	d11d      	bne.n	800305a <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800302c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800302e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003030:	2300      	movs	r3, #0
 8003032:	61bb      	str	r3, [r7, #24]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	61bb      	str	r3, [r7, #24]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	61bb      	str	r3, [r7, #24]
 8003044:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003054:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003056:	b662      	cpsie	i
 8003058:	e150      	b.n	80032fc <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003068:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800306a:	2300      	movs	r3, #0
 800306c:	617b      	str	r3, [r7, #20]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	695b      	ldr	r3, [r3, #20]
 8003074:	617b      	str	r3, [r7, #20]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	617b      	str	r3, [r7, #20]
 800307e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003080:	e13c      	b.n	80032fc <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003086:	2b03      	cmp	r3, #3
 8003088:	f200 80f5 	bhi.w	8003276 <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003090:	2b01      	cmp	r3, #1
 8003092:	d123      	bne.n	80030dc <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003096:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f000 fbfb 	bl	8003894 <I2C_WaitOnRXNEFlagUntilTimeout>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e13d      	b.n	8003324 <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	691a      	ldr	r2, [r3, #16]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ba:	1c5a      	adds	r2, r3, #1
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c4:	3b01      	subs	r3, #1
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	3b01      	subs	r3, #1
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030da:	e10f      	b.n	80032fc <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d150      	bne.n	8003186 <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e6:	9300      	str	r3, [sp, #0]
 80030e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ea:	2200      	movs	r2, #0
 80030ec:	4906      	ldr	r1, [pc, #24]	; (8003108 <HAL_I2C_Mem_Read+0x244>)
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f000 fa78 	bl	80035e4 <I2C_WaitOnFlagUntilTimeout>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d008      	beq.n	800310c <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e112      	b.n	8003324 <HAL_I2C_Mem_Read+0x460>
 80030fe:	bf00      	nop
 8003100:	00100002 	.word	0x00100002
 8003104:	ffff0000 	.word	0xffff0000
 8003108:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800310c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800311c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	691a      	ldr	r2, [r3, #16]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	b2d2      	uxtb	r2, r2
 800312a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003130:	1c5a      	adds	r2, r3, #1
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800313a:	3b01      	subs	r3, #1
 800313c:	b29a      	uxth	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003146:	b29b      	uxth	r3, r3
 8003148:	3b01      	subs	r3, #1
 800314a:	b29a      	uxth	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003150:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	691a      	ldr	r2, [r3, #16]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	b2d2      	uxtb	r2, r2
 800315e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003164:	1c5a      	adds	r2, r3, #1
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800316e:	3b01      	subs	r3, #1
 8003170:	b29a      	uxth	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800317a:	b29b      	uxth	r3, r3
 800317c:	3b01      	subs	r3, #1
 800317e:	b29a      	uxth	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003184:	e0ba      	b.n	80032fc <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	9300      	str	r3, [sp, #0]
 800318a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800318c:	2200      	movs	r2, #0
 800318e:	4967      	ldr	r1, [pc, #412]	; (800332c <HAL_I2C_Mem_Read+0x468>)
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f000 fa27 	bl	80035e4 <I2C_WaitOnFlagUntilTimeout>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e0c1      	b.n	8003324 <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031ae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80031b0:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	691a      	ldr	r2, [r3, #16]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031bc:	b2d2      	uxtb	r2, r2
 80031be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c4:	1c5a      	adds	r2, r3, #1
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ce:	3b01      	subs	r3, #1
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031da:	b29b      	uxth	r3, r3
 80031dc:	3b01      	subs	r3, #1
 80031de:	b29a      	uxth	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ea:	2200      	movs	r2, #0
 80031ec:	494f      	ldr	r1, [pc, #316]	; (800332c <HAL_I2C_Mem_Read+0x468>)
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 f9f8 	bl	80035e4 <I2C_WaitOnFlagUntilTimeout>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e092      	b.n	8003324 <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800320c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	691a      	ldr	r2, [r3, #16]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003218:	b2d2      	uxtb	r2, r2
 800321a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003220:	1c5a      	adds	r2, r3, #1
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800322a:	3b01      	subs	r3, #1
 800322c:	b29a      	uxth	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003236:	b29b      	uxth	r3, r3
 8003238:	3b01      	subs	r3, #1
 800323a:	b29a      	uxth	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003240:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	691a      	ldr	r2, [r3, #16]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324c:	b2d2      	uxtb	r2, r2
 800324e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003254:	1c5a      	adds	r2, r3, #1
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800325e:	3b01      	subs	r3, #1
 8003260:	b29a      	uxth	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800326a:	b29b      	uxth	r3, r3
 800326c:	3b01      	subs	r3, #1
 800326e:	b29a      	uxth	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003274:	e042      	b.n	80032fc <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003278:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f000 fb0a 	bl	8003894 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e04c      	b.n	8003324 <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	691a      	ldr	r2, [r3, #16]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003294:	b2d2      	uxtb	r2, r2
 8003296:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329c:	1c5a      	adds	r2, r3, #1
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a6:	3b01      	subs	r3, #1
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	3b01      	subs	r3, #1
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	f003 0304 	and.w	r3, r3, #4
 80032c6:	2b04      	cmp	r3, #4
 80032c8:	d118      	bne.n	80032fc <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	691a      	ldr	r2, [r3, #16]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d4:	b2d2      	uxtb	r2, r2
 80032d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032dc:	1c5a      	adds	r2, r3, #1
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e6:	3b01      	subs	r3, #1
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	3b01      	subs	r3, #1
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003300:	2b00      	cmp	r3, #0
 8003302:	f47f aebe 	bne.w	8003082 <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2220      	movs	r2, #32
 800330a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800331e:	2300      	movs	r3, #0
 8003320:	e000      	b.n	8003324 <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 8003322:	2302      	movs	r3, #2
  }
}
 8003324:	4618      	mov	r0, r3
 8003326:	3728      	adds	r7, #40	; 0x28
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	00010004 	.word	0x00010004

08003330 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b088      	sub	sp, #32
 8003334:	af02      	add	r7, sp, #8
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	4608      	mov	r0, r1
 800333a:	4611      	mov	r1, r2
 800333c:	461a      	mov	r2, r3
 800333e:	4603      	mov	r3, r0
 8003340:	817b      	strh	r3, [r7, #10]
 8003342:	460b      	mov	r3, r1
 8003344:	813b      	strh	r3, [r7, #8]
 8003346:	4613      	mov	r3, r2
 8003348:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003358:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800335a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335c:	9300      	str	r3, [sp, #0]
 800335e:	6a3b      	ldr	r3, [r7, #32]
 8003360:	2200      	movs	r2, #0
 8003362:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f000 f93c 	bl	80035e4 <I2C_WaitOnFlagUntilTimeout>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e05f      	b.n	8003436 <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003376:	897b      	ldrh	r3, [r7, #10]
 8003378:	b2db      	uxtb	r3, r3
 800337a:	461a      	mov	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003384:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	6a3a      	ldr	r2, [r7, #32]
 800338a:	492d      	ldr	r1, [pc, #180]	; (8003440 <I2C_RequestMemoryWrite+0x110>)
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	f000 f980 	bl	8003692 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e04c      	b.n	8003436 <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800339c:	2300      	movs	r3, #0
 800339e:	617b      	str	r3, [r7, #20]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	617b      	str	r3, [r7, #20]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033b4:	6a39      	ldr	r1, [r7, #32]
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f000 f9ea 	bl	8003790 <I2C_WaitOnTXEFlagUntilTimeout>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00d      	beq.n	80033de <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	d107      	bne.n	80033da <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e02b      	b.n	8003436 <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033de:	88fb      	ldrh	r3, [r7, #6]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d105      	bne.n	80033f0 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033e4:	893b      	ldrh	r3, [r7, #8]
 80033e6:	b2da      	uxtb	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	611a      	str	r2, [r3, #16]
 80033ee:	e021      	b.n	8003434 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80033f0:	893b      	ldrh	r3, [r7, #8]
 80033f2:	0a1b      	lsrs	r3, r3, #8
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	b2da      	uxtb	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003400:	6a39      	ldr	r1, [r7, #32]
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f000 f9c4 	bl	8003790 <I2C_WaitOnTXEFlagUntilTimeout>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00d      	beq.n	800342a <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	2b04      	cmp	r3, #4
 8003414:	d107      	bne.n	8003426 <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003424:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e005      	b.n	8003436 <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800342a:	893b      	ldrh	r3, [r7, #8]
 800342c:	b2da      	uxtb	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3718      	adds	r7, #24
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	00010002 	.word	0x00010002

08003444 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b088      	sub	sp, #32
 8003448:	af02      	add	r7, sp, #8
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	4608      	mov	r0, r1
 800344e:	4611      	mov	r1, r2
 8003450:	461a      	mov	r2, r3
 8003452:	4603      	mov	r3, r0
 8003454:	817b      	strh	r3, [r7, #10]
 8003456:	460b      	mov	r3, r1
 8003458:	813b      	strh	r3, [r7, #8]
 800345a:	4613      	mov	r3, r2
 800345c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800346c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800347c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800347e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	6a3b      	ldr	r3, [r7, #32]
 8003484:	2200      	movs	r2, #0
 8003486:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f000 f8aa 	bl	80035e4 <I2C_WaitOnFlagUntilTimeout>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e09e      	b.n	80035d8 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800349a:	897b      	ldrh	r3, [r7, #10]
 800349c:	b2db      	uxtb	r3, r3
 800349e:	461a      	mov	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80034a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ac:	6a3a      	ldr	r2, [r7, #32]
 80034ae:	494c      	ldr	r1, [pc, #304]	; (80035e0 <I2C_RequestMemoryRead+0x19c>)
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f000 f8ee 	bl	8003692 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e08b      	b.n	80035d8 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034c0:	2300      	movs	r3, #0
 80034c2:	617b      	str	r3, [r7, #20]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	617b      	str	r3, [r7, #20]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	617b      	str	r3, [r7, #20]
 80034d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034d8:	6a39      	ldr	r1, [r7, #32]
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f000 f958 	bl	8003790 <I2C_WaitOnTXEFlagUntilTimeout>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00d      	beq.n	8003502 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	2b04      	cmp	r3, #4
 80034ec:	d107      	bne.n	80034fe <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e06a      	b.n	80035d8 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003502:	88fb      	ldrh	r3, [r7, #6]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d105      	bne.n	8003514 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003508:	893b      	ldrh	r3, [r7, #8]
 800350a:	b2da      	uxtb	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	611a      	str	r2, [r3, #16]
 8003512:	e021      	b.n	8003558 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003514:	893b      	ldrh	r3, [r7, #8]
 8003516:	0a1b      	lsrs	r3, r3, #8
 8003518:	b29b      	uxth	r3, r3
 800351a:	b2da      	uxtb	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003524:	6a39      	ldr	r1, [r7, #32]
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f000 f932 	bl	8003790 <I2C_WaitOnTXEFlagUntilTimeout>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00d      	beq.n	800354e <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003536:	2b04      	cmp	r3, #4
 8003538:	d107      	bne.n	800354a <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003548:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e044      	b.n	80035d8 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800354e:	893b      	ldrh	r3, [r7, #8]
 8003550:	b2da      	uxtb	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800355a:	6a39      	ldr	r1, [r7, #32]
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f000 f917 	bl	8003790 <I2C_WaitOnTXEFlagUntilTimeout>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00d      	beq.n	8003584 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356c:	2b04      	cmp	r3, #4
 800356e:	d107      	bne.n	8003580 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800357e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e029      	b.n	80035d8 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003592:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003596:	9300      	str	r3, [sp, #0]
 8003598:	6a3b      	ldr	r3, [r7, #32]
 800359a:	2200      	movs	r2, #0
 800359c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f000 f81f 	bl	80035e4 <I2C_WaitOnFlagUntilTimeout>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e013      	b.n	80035d8 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80035b0:	897b      	ldrh	r3, [r7, #10]
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	f043 0301 	orr.w	r3, r3, #1
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c2:	6a3a      	ldr	r2, [r7, #32]
 80035c4:	4906      	ldr	r1, [pc, #24]	; (80035e0 <I2C_RequestMemoryRead+0x19c>)
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f000 f863 	bl	8003692 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e000      	b.n	80035d8 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3718      	adds	r7, #24
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	00010002 	.word	0x00010002

080035e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	603b      	str	r3, [r7, #0]
 80035f0:	4613      	mov	r3, r2
 80035f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035f4:	e025      	b.n	8003642 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035fc:	d021      	beq.n	8003642 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035fe:	f7fe ffab 	bl	8002558 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	429a      	cmp	r2, r3
 800360c:	d302      	bcc.n	8003614 <I2C_WaitOnFlagUntilTimeout+0x30>
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d116      	bne.n	8003642 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2220      	movs	r2, #32
 800361e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	f043 0220 	orr.w	r2, r3, #32
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e023      	b.n	800368a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	0c1b      	lsrs	r3, r3, #16
 8003646:	b2db      	uxtb	r3, r3
 8003648:	2b01      	cmp	r3, #1
 800364a:	d10d      	bne.n	8003668 <I2C_WaitOnFlagUntilTimeout+0x84>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	43da      	mvns	r2, r3
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	4013      	ands	r3, r2
 8003658:	b29b      	uxth	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	bf0c      	ite	eq
 800365e:	2301      	moveq	r3, #1
 8003660:	2300      	movne	r3, #0
 8003662:	b2db      	uxtb	r3, r3
 8003664:	461a      	mov	r2, r3
 8003666:	e00c      	b.n	8003682 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	43da      	mvns	r2, r3
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	4013      	ands	r3, r2
 8003674:	b29b      	uxth	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	bf0c      	ite	eq
 800367a:	2301      	moveq	r3, #1
 800367c:	2300      	movne	r3, #0
 800367e:	b2db      	uxtb	r3, r3
 8003680:	461a      	mov	r2, r3
 8003682:	79fb      	ldrb	r3, [r7, #7]
 8003684:	429a      	cmp	r2, r3
 8003686:	d0b6      	beq.n	80035f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b084      	sub	sp, #16
 8003696:	af00      	add	r7, sp, #0
 8003698:	60f8      	str	r0, [r7, #12]
 800369a:	60b9      	str	r1, [r7, #8]
 800369c:	607a      	str	r2, [r7, #4]
 800369e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036a0:	e051      	b.n	8003746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036b0:	d123      	bne.n	80036fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036c0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036ca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2220      	movs	r2, #32
 80036d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	f043 0204 	orr.w	r2, r3, #4
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e046      	b.n	8003788 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003700:	d021      	beq.n	8003746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003702:	f7fe ff29 	bl	8002558 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	429a      	cmp	r2, r3
 8003710:	d302      	bcc.n	8003718 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d116      	bne.n	8003746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2220      	movs	r2, #32
 8003722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	f043 0220 	orr.w	r2, r3, #32
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e020      	b.n	8003788 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	0c1b      	lsrs	r3, r3, #16
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b01      	cmp	r3, #1
 800374e:	d10c      	bne.n	800376a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	43da      	mvns	r2, r3
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	4013      	ands	r3, r2
 800375c:	b29b      	uxth	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	bf14      	ite	ne
 8003762:	2301      	movne	r3, #1
 8003764:	2300      	moveq	r3, #0
 8003766:	b2db      	uxtb	r3, r3
 8003768:	e00b      	b.n	8003782 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	43da      	mvns	r2, r3
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	4013      	ands	r3, r2
 8003776:	b29b      	uxth	r3, r3
 8003778:	2b00      	cmp	r3, #0
 800377a:	bf14      	ite	ne
 800377c:	2301      	movne	r3, #1
 800377e:	2300      	moveq	r3, #0
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d18d      	bne.n	80036a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800379c:	e02d      	b.n	80037fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f000 f8ce 	bl	8003940 <I2C_IsAcknowledgeFailed>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e02d      	b.n	800380a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b4:	d021      	beq.n	80037fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037b6:	f7fe fecf 	bl	8002558 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d302      	bcc.n	80037cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d116      	bne.n	80037fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2220      	movs	r2, #32
 80037d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	f043 0220 	orr.w	r2, r3, #32
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e007      	b.n	800380a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	695b      	ldr	r3, [r3, #20]
 8003800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003804:	2b80      	cmp	r3, #128	; 0x80
 8003806:	d1ca      	bne.n	800379e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b084      	sub	sp, #16
 8003816:	af00      	add	r7, sp, #0
 8003818:	60f8      	str	r0, [r7, #12]
 800381a:	60b9      	str	r1, [r7, #8]
 800381c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800381e:	e02d      	b.n	800387c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f000 f88d 	bl	8003940 <I2C_IsAcknowledgeFailed>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e02d      	b.n	800388c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003836:	d021      	beq.n	800387c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003838:	f7fe fe8e 	bl	8002558 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	68ba      	ldr	r2, [r7, #8]
 8003844:	429a      	cmp	r2, r3
 8003846:	d302      	bcc.n	800384e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d116      	bne.n	800387c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2220      	movs	r2, #32
 8003858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003868:	f043 0220 	orr.w	r2, r3, #32
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e007      	b.n	800388c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	f003 0304 	and.w	r3, r3, #4
 8003886:	2b04      	cmp	r3, #4
 8003888:	d1ca      	bne.n	8003820 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038a0:	e042      	b.n	8003928 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	f003 0310 	and.w	r3, r3, #16
 80038ac:	2b10      	cmp	r3, #16
 80038ae:	d119      	bne.n	80038e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f06f 0210 	mvn.w	r2, #16
 80038b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2220      	movs	r2, #32
 80038c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e029      	b.n	8003938 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038e4:	f7fe fe38 	bl	8002558 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d302      	bcc.n	80038fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d116      	bne.n	8003928 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2220      	movs	r2, #32
 8003904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003914:	f043 0220 	orr.w	r2, r3, #32
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e007      	b.n	8003938 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003932:	2b40      	cmp	r3, #64	; 0x40
 8003934:	d1b5      	bne.n	80038a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3710      	adds	r7, #16
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003952:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003956:	d11b      	bne.n	8003990 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003960:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2220      	movs	r2, #32
 800396c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397c:	f043 0204 	orr.w	r2, r3, #4
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e000      	b.n	8003992 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	bc80      	pop	{r7}
 800399a:	4770      	bx	lr

0800399c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800399c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800399e:	b08b      	sub	sp, #44	; 0x2c
 80039a0:	af06      	add	r7, sp, #24
 80039a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e0d3      	b.n	8003b56 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d106      	bne.n	80039c8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f004 fdba 	bl	800853c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2203      	movs	r2, #3
 80039cc:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f001 ff30 	bl	800583a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	603b      	str	r3, [r7, #0]
 80039e0:	687e      	ldr	r6, [r7, #4]
 80039e2:	466d      	mov	r5, sp
 80039e4:	f106 0410 	add.w	r4, r6, #16
 80039e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039ec:	6823      	ldr	r3, [r4, #0]
 80039ee:	602b      	str	r3, [r5, #0]
 80039f0:	1d33      	adds	r3, r6, #4
 80039f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039f4:	6838      	ldr	r0, [r7, #0]
 80039f6:	f001 fef9 	bl	80057ec <USB_CoreInit>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d005      	beq.n	8003a0c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2202      	movs	r2, #2
 8003a04:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e0a4      	b.n	8003b56 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2100      	movs	r1, #0
 8003a12:	4618      	mov	r0, r3
 8003a14:	f001 ff2d 	bl	8005872 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a18:	2300      	movs	r3, #0
 8003a1a:	73fb      	strb	r3, [r7, #15]
 8003a1c:	e035      	b.n	8003a8a <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a1e:	7bfb      	ldrb	r3, [r7, #15]
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	015b      	lsls	r3, r3, #5
 8003a24:	4413      	add	r3, r2
 8003a26:	3329      	adds	r3, #41	; 0x29
 8003a28:	2201      	movs	r2, #1
 8003a2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a2c:	7bfb      	ldrb	r3, [r7, #15]
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	015b      	lsls	r3, r3, #5
 8003a32:	4413      	add	r3, r2
 8003a34:	3328      	adds	r3, #40	; 0x28
 8003a36:	7bfa      	ldrb	r2, [r7, #15]
 8003a38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a3a:	7bfb      	ldrb	r3, [r7, #15]
 8003a3c:	7bfa      	ldrb	r2, [r7, #15]
 8003a3e:	b291      	uxth	r1, r2
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	015b      	lsls	r3, r3, #5
 8003a44:	4413      	add	r3, r2
 8003a46:	3336      	adds	r3, #54	; 0x36
 8003a48:	460a      	mov	r2, r1
 8003a4a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a4c:	7bfb      	ldrb	r3, [r7, #15]
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	015b      	lsls	r3, r3, #5
 8003a52:	4413      	add	r3, r2
 8003a54:	332b      	adds	r3, #43	; 0x2b
 8003a56:	2200      	movs	r2, #0
 8003a58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a5a:	7bfb      	ldrb	r3, [r7, #15]
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	015b      	lsls	r3, r3, #5
 8003a60:	4413      	add	r3, r2
 8003a62:	3338      	adds	r3, #56	; 0x38
 8003a64:	2200      	movs	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a68:	7bfb      	ldrb	r3, [r7, #15]
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	015b      	lsls	r3, r3, #5
 8003a6e:	4413      	add	r3, r2
 8003a70:	333c      	adds	r3, #60	; 0x3c
 8003a72:	2200      	movs	r2, #0
 8003a74:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a76:	7bfb      	ldrb	r3, [r7, #15]
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	3302      	adds	r3, #2
 8003a7c:	015b      	lsls	r3, r3, #5
 8003a7e:	4413      	add	r3, r2
 8003a80:	2200      	movs	r2, #0
 8003a82:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a84:	7bfb      	ldrb	r3, [r7, #15]
 8003a86:	3301      	adds	r3, #1
 8003a88:	73fb      	strb	r3, [r7, #15]
 8003a8a:	7bfa      	ldrb	r2, [r7, #15]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d3c4      	bcc.n	8003a1e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a94:	2300      	movs	r3, #0
 8003a96:	73fb      	strb	r3, [r7, #15]
 8003a98:	e031      	b.n	8003afe <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003a9a:	7bfb      	ldrb	r3, [r7, #15]
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	015b      	lsls	r3, r3, #5
 8003aa0:	4413      	add	r3, r2
 8003aa2:	f203 1329 	addw	r3, r3, #297	; 0x129
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003aaa:	7bfb      	ldrb	r3, [r7, #15]
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	015b      	lsls	r3, r3, #5
 8003ab0:	4413      	add	r3, r2
 8003ab2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003ab6:	7bfa      	ldrb	r2, [r7, #15]
 8003ab8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003aba:	7bfb      	ldrb	r3, [r7, #15]
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	015b      	lsls	r3, r3, #5
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003aca:	7bfb      	ldrb	r3, [r7, #15]
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	015b      	lsls	r3, r3, #5
 8003ad0:	4413      	add	r3, r2
 8003ad2:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003ada:	7bfb      	ldrb	r3, [r7, #15]
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	015b      	lsls	r3, r3, #5
 8003ae0:	4413      	add	r3, r2
 8003ae2:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003aea:	7bfb      	ldrb	r3, [r7, #15]
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	330a      	adds	r3, #10
 8003af0:	015b      	lsls	r3, r3, #5
 8003af2:	4413      	add	r3, r2
 8003af4:	2200      	movs	r2, #0
 8003af6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003af8:	7bfb      	ldrb	r3, [r7, #15]
 8003afa:	3301      	adds	r3, #1
 8003afc:	73fb      	strb	r3, [r7, #15]
 8003afe:	7bfa      	ldrb	r2, [r7, #15]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d3c8      	bcc.n	8003a9a <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	603b      	str	r3, [r7, #0]
 8003b0e:	687e      	ldr	r6, [r7, #4]
 8003b10:	466d      	mov	r5, sp
 8003b12:	f106 0410 	add.w	r4, r6, #16
 8003b16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b1a:	6823      	ldr	r3, [r4, #0]
 8003b1c:	602b      	str	r3, [r5, #0]
 8003b1e:	1d33      	adds	r3, r6, #4
 8003b20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b22:	6838      	ldr	r0, [r7, #0]
 8003b24:	f001 feb1 	bl	800588a <USB_DevInit>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d005      	beq.n	8003b3a <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2202      	movs	r2, #2
 8003b32:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e00d      	b.n	8003b56 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f002 feef 	bl	8006932 <USB_DevDisconnect>

  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3714      	adds	r7, #20
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b5e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b082      	sub	sp, #8
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d101      	bne.n	8003b74 <HAL_PCD_Start+0x16>
 8003b70:	2302      	movs	r3, #2
 8003b72:	e016      	b.n	8003ba2 <HAL_PCD_Start+0x44>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003b7c:	2101      	movs	r1, #1
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f004 ff43 	bl	8008a0a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f002 fec8 	bl	800691e <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f001 fe3a 	bl	800580c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3708      	adds	r7, #8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b082      	sub	sp, #8
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f002 fec5 	bl	8006946 <USB_ReadInterrupts>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bc6:	d102      	bne.n	8003bce <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 faf3 	bl	80041b4 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f002 feb7 	bl	8006946 <USB_ReadInterrupts>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003be2:	d112      	bne.n	8003c0a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bf6:	b292      	uxth	r2, r2
 8003bf8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f004 fd12 	bl	8008626 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003c02:	2100      	movs	r1, #0
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 f8de 	bl	8003dc6 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f002 fe99 	bl	8006946 <USB_ReadInterrupts>
 8003c14:	4603      	mov	r3, r0
 8003c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c1e:	d10b      	bne.n	8003c38 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c32:	b292      	uxth	r2, r2
 8003c34:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f002 fe82 	bl	8006946 <USB_ReadInterrupts>
 8003c42:	4603      	mov	r3, r0
 8003c44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c4c:	d10b      	bne.n	8003c66 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c60:	b292      	uxth	r2, r2
 8003c62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f002 fe6b 	bl	8006946 <USB_ReadInterrupts>
 8003c70:	4603      	mov	r3, r0
 8003c72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c7a:	d126      	bne.n	8003cca <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f022 0204 	bic.w	r2, r2, #4
 8003c8e:	b292      	uxth	r2, r2
 8003c90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 0208 	bic.w	r2, r2, #8
 8003ca6:	b292      	uxth	r2, r2
 8003ca8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f004 fcf3 	bl	8008698 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003cc4:	b292      	uxth	r2, r2
 8003cc6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f002 fe39 	bl	8006946 <USB_ReadInterrupts>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cde:	d13d      	bne.n	8003d5c <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f042 0208 	orr.w	r2, r2, #8
 8003cf2:	b292      	uxth	r2, r2
 8003cf4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d0a:	b292      	uxth	r2, r2
 8003d0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f042 0204 	orr.w	r2, r2, #4
 8003d22:	b292      	uxth	r2, r2
 8003d24:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f002 fe0a 	bl	8006946 <USB_ReadInterrupts>
 8003d32:	4603      	mov	r3, r0
 8003d34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d3c:	d10b      	bne.n	8003d56 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d50:	b292      	uxth	r2, r2
 8003d52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f004 fc84 	bl	8008664 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4618      	mov	r0, r3
 8003d62:	f002 fdf0 	bl	8006946 <USB_ReadInterrupts>
 8003d66:	4603      	mov	r3, r0
 8003d68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d70:	d10e      	bne.n	8003d90 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003d84:	b292      	uxth	r2, r2
 8003d86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f004 fc3d 	bl	800860a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f002 fdd6 	bl	8006946 <USB_ReadInterrupts>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003da4:	d10b      	bne.n	8003dbe <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003db8:	b292      	uxth	r2, r2
 8003dba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003dbe:	bf00      	nop
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b082      	sub	sp, #8
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
 8003dce:	460b      	mov	r3, r1
 8003dd0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d101      	bne.n	8003de0 <HAL_PCD_SetAddress+0x1a>
 8003ddc:	2302      	movs	r3, #2
 8003dde:	e013      	b.n	8003e08 <HAL_PCD_SetAddress+0x42>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	78fa      	ldrb	r2, [r7, #3]
 8003dec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	78fa      	ldrb	r2, [r7, #3]
 8003df6:	4611      	mov	r1, r2
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f002 fd7d 	bl	80068f8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3708      	adds	r7, #8
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	4608      	mov	r0, r1
 8003e1a:	4611      	mov	r1, r2
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	4603      	mov	r3, r0
 8003e20:	70fb      	strb	r3, [r7, #3]
 8003e22:	460b      	mov	r3, r1
 8003e24:	803b      	strh	r3, [r7, #0]
 8003e26:	4613      	mov	r3, r2
 8003e28:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	da0b      	bge.n	8003e4e <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e36:	78fb      	ldrb	r3, [r7, #3]
 8003e38:	f003 0307 	and.w	r3, r3, #7
 8003e3c:	015b      	lsls	r3, r3, #5
 8003e3e:	3328      	adds	r3, #40	; 0x28
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	4413      	add	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	705a      	strb	r2, [r3, #1]
 8003e4c:	e00b      	b.n	8003e66 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e4e:	78fb      	ldrb	r3, [r7, #3]
 8003e50:	f003 0307 	and.w	r3, r3, #7
 8003e54:	015b      	lsls	r3, r3, #5
 8003e56:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003e66:	78fb      	ldrb	r3, [r7, #3]
 8003e68:	f003 0307 	and.w	r3, r3, #7
 8003e6c:	b2da      	uxtb	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003e72:	883a      	ldrh	r2, [r7, #0]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	78ba      	ldrb	r2, [r7, #2]
 8003e7c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	785b      	ldrb	r3, [r3, #1]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d004      	beq.n	8003e90 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	b29a      	uxth	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003e90:	78bb      	ldrb	r3, [r7, #2]
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d102      	bne.n	8003e9c <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d101      	bne.n	8003eaa <HAL_PCD_EP_Open+0x9a>
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	e00e      	b.n	8003ec8 <HAL_PCD_EP_Open+0xb8>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68f9      	ldr	r1, [r7, #12]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f001 fd0b 	bl	80058d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8003ec6:	7afb      	ldrb	r3, [r7, #11]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	460b      	mov	r3, r1
 8003eda:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003edc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	da0b      	bge.n	8003efc <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ee4:	78fb      	ldrb	r3, [r7, #3]
 8003ee6:	f003 0307 	and.w	r3, r3, #7
 8003eea:	015b      	lsls	r3, r3, #5
 8003eec:	3328      	adds	r3, #40	; 0x28
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	705a      	strb	r2, [r3, #1]
 8003efa:	e00b      	b.n	8003f14 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003efc:	78fb      	ldrb	r3, [r7, #3]
 8003efe:	f003 0307 	and.w	r3, r3, #7
 8003f02:	015b      	lsls	r3, r3, #5
 8003f04:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003f14:	78fb      	ldrb	r3, [r7, #3]
 8003f16:	f003 0307 	and.w	r3, r3, #7
 8003f1a:	b2da      	uxtb	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d101      	bne.n	8003f2e <HAL_PCD_EP_Close+0x5e>
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	e00e      	b.n	8003f4c <HAL_PCD_EP_Close+0x7c>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68f9      	ldr	r1, [r7, #12]
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f001 ffb7 	bl	8005eb0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3710      	adds	r7, #16
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	607a      	str	r2, [r7, #4]
 8003f5e:	603b      	str	r3, [r7, #0]
 8003f60:	460b      	mov	r3, r1
 8003f62:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f64:	7afb      	ldrb	r3, [r7, #11]
 8003f66:	f003 0307 	and.w	r3, r3, #7
 8003f6a:	015b      	lsls	r3, r3, #5
 8003f6c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	4413      	add	r3, r2
 8003f74:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	683a      	ldr	r2, [r7, #0]
 8003f80:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	2200      	movs	r2, #0
 8003f86:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f8e:	7afb      	ldrb	r3, [r7, #11]
 8003f90:	f003 0307 	and.w	r3, r3, #7
 8003f94:	b2da      	uxtb	r2, r3
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f9a:	7afb      	ldrb	r3, [r7, #11]
 8003f9c:	f003 0307 	and.w	r3, r3, #7
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d106      	bne.n	8003fb2 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	6979      	ldr	r1, [r7, #20]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f002 f916 	bl	80061dc <USB_EPStartXfer>
 8003fb0:	e005      	b.n	8003fbe <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	6979      	ldr	r1, [r7, #20]
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f002 f90f 	bl	80061dc <USB_EPStartXfer>
  }

  return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3718      	adds	r7, #24
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003fd4:	78fb      	ldrb	r3, [r7, #3]
 8003fd6:	f003 0307 	and.w	r3, r3, #7
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	330a      	adds	r3, #10
 8003fde:	015b      	lsls	r3, r3, #5
 8003fe0:	4413      	add	r3, r2
 8003fe2:	3304      	adds	r3, #4
 8003fe4:	681b      	ldr	r3, [r3, #0]
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	370c      	adds	r7, #12
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bc80      	pop	{r7}
 8003fee:	4770      	bx	lr

08003ff0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b086      	sub	sp, #24
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	607a      	str	r2, [r7, #4]
 8003ffa:	603b      	str	r3, [r7, #0]
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004000:	7afb      	ldrb	r3, [r7, #11]
 8004002:	f003 0307 	and.w	r3, r3, #7
 8004006:	015b      	lsls	r3, r3, #5
 8004008:	3328      	adds	r3, #40	; 0x28
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	4413      	add	r3, r2
 800400e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	683a      	ldr	r2, [r7, #0]
 800401a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	2200      	movs	r2, #0
 8004020:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	2201      	movs	r2, #1
 8004026:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004028:	7afb      	ldrb	r3, [r7, #11]
 800402a:	f003 0307 	and.w	r3, r3, #7
 800402e:	b2da      	uxtb	r2, r3
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004034:	7afb      	ldrb	r3, [r7, #11]
 8004036:	f003 0307 	and.w	r3, r3, #7
 800403a:	2b00      	cmp	r3, #0
 800403c:	d106      	bne.n	800404c <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	6979      	ldr	r1, [r7, #20]
 8004044:	4618      	mov	r0, r3
 8004046:	f002 f8c9 	bl	80061dc <USB_EPStartXfer>
 800404a:	e005      	b.n	8004058 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6979      	ldr	r1, [r7, #20]
 8004052:	4618      	mov	r0, r3
 8004054:	f002 f8c2 	bl	80061dc <USB_EPStartXfer>
  }

  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3718      	adds	r7, #24
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b084      	sub	sp, #16
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
 800406a:	460b      	mov	r3, r1
 800406c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800406e:	78fb      	ldrb	r3, [r7, #3]
 8004070:	f003 0207 	and.w	r2, r3, #7
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	429a      	cmp	r2, r3
 800407a:	d901      	bls.n	8004080 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e046      	b.n	800410e <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004080:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004084:	2b00      	cmp	r3, #0
 8004086:	da0b      	bge.n	80040a0 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004088:	78fb      	ldrb	r3, [r7, #3]
 800408a:	f003 0307 	and.w	r3, r3, #7
 800408e:	015b      	lsls	r3, r3, #5
 8004090:	3328      	adds	r3, #40	; 0x28
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	4413      	add	r3, r2
 8004096:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2201      	movs	r2, #1
 800409c:	705a      	strb	r2, [r3, #1]
 800409e:	e009      	b.n	80040b4 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80040a0:	78fb      	ldrb	r3, [r7, #3]
 80040a2:	015b      	lsls	r3, r3, #5
 80040a4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	4413      	add	r3, r2
 80040ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2201      	movs	r2, #1
 80040b8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040ba:	78fb      	ldrb	r3, [r7, #3]
 80040bc:	f003 0307 	and.w	r3, r3, #7
 80040c0:	b2da      	uxtb	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d101      	bne.n	80040d4 <HAL_PCD_EP_SetStall+0x72>
 80040d0:	2302      	movs	r3, #2
 80040d2:	e01c      	b.n	800410e <HAL_PCD_EP_SetStall+0xac>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68f9      	ldr	r1, [r7, #12]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f002 fb32 	bl	800674c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80040e8:	78fb      	ldrb	r3, [r7, #3]
 80040ea:	f003 0307 	and.w	r3, r3, #7
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d108      	bne.n	8004104 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80040fc:	4619      	mov	r1, r3
 80040fe:	4610      	mov	r0, r2
 8004100:	f002 fc30 	bl	8006964 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b084      	sub	sp, #16
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
 800411e:	460b      	mov	r3, r1
 8004120:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004122:	78fb      	ldrb	r3, [r7, #3]
 8004124:	f003 020f 	and.w	r2, r3, #15
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	429a      	cmp	r2, r3
 800412e:	d901      	bls.n	8004134 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e03a      	b.n	80041aa <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004134:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004138:	2b00      	cmp	r3, #0
 800413a:	da0b      	bge.n	8004154 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800413c:	78fb      	ldrb	r3, [r7, #3]
 800413e:	f003 0307 	and.w	r3, r3, #7
 8004142:	015b      	lsls	r3, r3, #5
 8004144:	3328      	adds	r3, #40	; 0x28
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	4413      	add	r3, r2
 800414a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2201      	movs	r2, #1
 8004150:	705a      	strb	r2, [r3, #1]
 8004152:	e00b      	b.n	800416c <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004154:	78fb      	ldrb	r3, [r7, #3]
 8004156:	f003 0307 	and.w	r3, r3, #7
 800415a:	015b      	lsls	r3, r3, #5
 800415c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	4413      	add	r3, r2
 8004164:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004172:	78fb      	ldrb	r3, [r7, #3]
 8004174:	f003 0307 	and.w	r3, r3, #7
 8004178:	b2da      	uxtb	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8004184:	2b01      	cmp	r3, #1
 8004186:	d101      	bne.n	800418c <HAL_PCD_EP_ClrStall+0x76>
 8004188:	2302      	movs	r3, #2
 800418a:	e00e      	b.n	80041aa <HAL_PCD_EP_ClrStall+0x94>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68f9      	ldr	r1, [r7, #12]
 800419a:	4618      	mov	r0, r3
 800419c:	f002 fb18 	bl	80067d0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
	...

080041b4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80041b4:	b590      	push	{r4, r7, lr}
 80041b6:	b089      	sub	sp, #36	; 0x24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80041bc:	e282      	b.n	80046c4 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80041c6:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80041c8:	8afb      	ldrh	r3, [r7, #22]
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	f003 030f 	and.w	r3, r3, #15
 80041d0:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 80041d2:	7d7b      	ldrb	r3, [r7, #21]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f040 8142 	bne.w	800445e <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80041da:	8afb      	ldrh	r3, [r7, #22]
 80041dc:	f003 0310 	and.w	r3, r3, #16
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d151      	bne.n	8004288 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	881b      	ldrh	r3, [r3, #0]
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80041f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f4:	b29c      	uxth	r4, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80041fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004202:	b29b      	uxth	r3, r3
 8004204:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	3328      	adds	r3, #40	; 0x28
 800420a:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004214:	b29b      	uxth	r3, r3
 8004216:	461a      	mov	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	00db      	lsls	r3, r3, #3
 800421e:	4413      	add	r3, r2
 8004220:	3302      	adds	r3, #2
 8004222:	005b      	lsls	r3, r3, #1
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	6812      	ldr	r2, [r2, #0]
 8004228:	4413      	add	r3, r2
 800422a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800422e:	881b      	ldrh	r3, [r3, #0]
 8004230:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	695a      	ldr	r2, [r3, #20]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	69db      	ldr	r3, [r3, #28]
 8004240:	441a      	add	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004246:	2100      	movs	r1, #0
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f004 f9c7 	bl	80085dc <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	f000 8234 	beq.w	80046c4 <PCD_EP_ISR_Handler+0x510>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	2b00      	cmp	r3, #0
 8004262:	f040 822f 	bne.w	80046c4 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800426c:	b2db      	uxtb	r3, r3
 800426e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004272:	b2da      	uxtb	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	b292      	uxth	r2, r2
 800427a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004286:	e21d      	b.n	80046c4 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800428e:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	881b      	ldrh	r3, [r3, #0]
 8004296:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004298:	8a7b      	ldrh	r3, [r7, #18]
 800429a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d033      	beq.n	800430a <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	461a      	mov	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	00db      	lsls	r3, r3, #3
 80042b4:	4413      	add	r3, r2
 80042b6:	3306      	adds	r3, #6
 80042b8:	005b      	lsls	r3, r3, #1
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	6812      	ldr	r2, [r2, #0]
 80042be:	4413      	add	r3, r2
 80042c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042c4:	881b      	ldrh	r3, [r3, #0]
 80042c6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6818      	ldr	r0, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f503 710c 	add.w	r1, r3, #560	; 0x230
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	f002 fb8e 	bl	8006a02 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	881b      	ldrh	r3, [r3, #0]
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	f640 738f 	movw	r3, #3983	; 0xf8f
 80042f2:	4013      	ands	r3, r2
 80042f4:	b29c      	uxth	r4, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80042fe:	b292      	uxth	r2, r2
 8004300:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f004 f940 	bl	8008588 <HAL_PCD_SetupStageCallback>
 8004308:	e1dc      	b.n	80046c4 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800430a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800430e:	2b00      	cmp	r3, #0
 8004310:	f280 81d8 	bge.w	80046c4 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	881b      	ldrh	r3, [r3, #0]
 800431a:	b29a      	uxth	r2, r3
 800431c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004320:	4013      	ands	r3, r2
 8004322:	b29c      	uxth	r4, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800432c:	b292      	uxth	r2, r2
 800432e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004338:	b29b      	uxth	r3, r3
 800433a:	461a      	mov	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	00db      	lsls	r3, r3, #3
 8004342:	4413      	add	r3, r2
 8004344:	3306      	adds	r3, #6
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	6812      	ldr	r2, [r2, #0]
 800434c:	4413      	add	r3, r2
 800434e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004352:	881b      	ldrh	r3, [r3, #0]
 8004354:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	69db      	ldr	r3, [r3, #28]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d019      	beq.n	8004398 <PCD_EP_ISR_Handler+0x1e4>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	695b      	ldr	r3, [r3, #20]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d015      	beq.n	8004398 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6818      	ldr	r0, [r3, #0]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6959      	ldr	r1, [r3, #20]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800437c:	b29b      	uxth	r3, r3
 800437e:	f002 fb40 	bl	8006a02 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	695a      	ldr	r2, [r3, #20]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	69db      	ldr	r3, [r3, #28]
 800438a:	441a      	add	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004390:	2100      	movs	r1, #0
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f004 f90a 	bl	80085ac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	461c      	mov	r4, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	441c      	add	r4, r3
 80043aa:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 80043ae:	461c      	mov	r4, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10e      	bne.n	80043d6 <PCD_EP_ISR_Handler+0x222>
 80043b8:	8823      	ldrh	r3, [r4, #0]
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	8023      	strh	r3, [r4, #0]
 80043c4:	8823      	ldrh	r3, [r4, #0]
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	8023      	strh	r3, [r4, #0]
 80043d4:	e02d      	b.n	8004432 <PCD_EP_ISR_Handler+0x27e>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	2b3e      	cmp	r3, #62	; 0x3e
 80043dc:	d812      	bhi.n	8004404 <PCD_EP_ISR_Handler+0x250>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	085b      	lsrs	r3, r3, #1
 80043e4:	61bb      	str	r3, [r7, #24]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	f003 0301 	and.w	r3, r3, #1
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d002      	beq.n	80043f8 <PCD_EP_ISR_Handler+0x244>
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	3301      	adds	r3, #1
 80043f6:	61bb      	str	r3, [r7, #24]
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	029b      	lsls	r3, r3, #10
 80043fe:	b29b      	uxth	r3, r3
 8004400:	8023      	strh	r3, [r4, #0]
 8004402:	e016      	b.n	8004432 <PCD_EP_ISR_Handler+0x27e>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	095b      	lsrs	r3, r3, #5
 800440a:	61bb      	str	r3, [r7, #24]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	691b      	ldr	r3, [r3, #16]
 8004410:	f003 031f 	and.w	r3, r3, #31
 8004414:	2b00      	cmp	r3, #0
 8004416:	d102      	bne.n	800441e <PCD_EP_ISR_Handler+0x26a>
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	3b01      	subs	r3, #1
 800441c:	61bb      	str	r3, [r7, #24]
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	b29b      	uxth	r3, r3
 8004422:	029b      	lsls	r3, r3, #10
 8004424:	b29b      	uxth	r3, r3
 8004426:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800442a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800442e:	b29b      	uxth	r3, r3
 8004430:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	881b      	ldrh	r3, [r3, #0]
 8004438:	b29b      	uxth	r3, r3
 800443a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800443e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004442:	b29c      	uxth	r4, r3
 8004444:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004448:	b29c      	uxth	r4, r3
 800444a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800444e:	b29c      	uxth	r4, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	4ba2      	ldr	r3, [pc, #648]	; (80046e0 <PCD_EP_ISR_Handler+0x52c>)
 8004456:	4323      	orrs	r3, r4
 8004458:	b29b      	uxth	r3, r3
 800445a:	8013      	strh	r3, [r2, #0]
 800445c:	e132      	b.n	80046c4 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	461a      	mov	r2, r3
 8004464:	7d7b      	ldrb	r3, [r7, #21]
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	4413      	add	r3, r2
 800446a:	881b      	ldrh	r3, [r3, #0]
 800446c:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800446e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004472:	2b00      	cmp	r3, #0
 8004474:	f280 80d1 	bge.w	800461a <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	461a      	mov	r2, r3
 800447e:	7d7b      	ldrb	r3, [r7, #21]
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	4413      	add	r3, r2
 8004484:	881b      	ldrh	r3, [r3, #0]
 8004486:	b29a      	uxth	r2, r3
 8004488:	f640 738f 	movw	r3, #3983	; 0xf8f
 800448c:	4013      	ands	r3, r2
 800448e:	b29c      	uxth	r4, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	461a      	mov	r2, r3
 8004496:	7d7b      	ldrb	r3, [r7, #21]
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	4413      	add	r3, r2
 800449c:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80044a0:	b292      	uxth	r2, r2
 80044a2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80044a4:	7d7b      	ldrb	r3, [r7, #21]
 80044a6:	015b      	lsls	r3, r3, #5
 80044a8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	4413      	add	r3, r2
 80044b0:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	7b1b      	ldrb	r3, [r3, #12]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d121      	bne.n	80044fe <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	461a      	mov	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	00db      	lsls	r3, r3, #3
 80044cc:	4413      	add	r3, r2
 80044ce:	3306      	adds	r3, #6
 80044d0:	005b      	lsls	r3, r3, #1
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	6812      	ldr	r2, [r2, #0]
 80044d6:	4413      	add	r3, r2
 80044d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044dc:	881b      	ldrh	r3, [r3, #0]
 80044de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044e2:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 80044e4:	8bfb      	ldrh	r3, [r7, #30]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d072      	beq.n	80045d0 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6818      	ldr	r0, [r3, #0]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6959      	ldr	r1, [r3, #20]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	88da      	ldrh	r2, [r3, #6]
 80044f6:	8bfb      	ldrh	r3, [r7, #30]
 80044f8:	f002 fa83 	bl	8006a02 <USB_ReadPMA>
 80044fc:	e068      	b.n	80045d0 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	461a      	mov	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	4413      	add	r3, r2
 800450c:	881b      	ldrh	r3, [r3, #0]
 800450e:	b29b      	uxth	r3, r3
 8004510:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d021      	beq.n	800455c <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004520:	b29b      	uxth	r3, r3
 8004522:	461a      	mov	r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	00db      	lsls	r3, r3, #3
 800452a:	4413      	add	r3, r2
 800452c:	3302      	adds	r3, #2
 800452e:	005b      	lsls	r3, r3, #1
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	6812      	ldr	r2, [r2, #0]
 8004534:	4413      	add	r3, r2
 8004536:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800453a:	881b      	ldrh	r3, [r3, #0]
 800453c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004540:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8004542:	8bfb      	ldrh	r3, [r7, #30]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d02a      	beq.n	800459e <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6818      	ldr	r0, [r3, #0]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6959      	ldr	r1, [r3, #20]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	891a      	ldrh	r2, [r3, #8]
 8004554:	8bfb      	ldrh	r3, [r7, #30]
 8004556:	f002 fa54 	bl	8006a02 <USB_ReadPMA>
 800455a:	e020      	b.n	800459e <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004564:	b29b      	uxth	r3, r3
 8004566:	461a      	mov	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	00db      	lsls	r3, r3, #3
 800456e:	4413      	add	r3, r2
 8004570:	3306      	adds	r3, #6
 8004572:	005b      	lsls	r3, r3, #1
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	6812      	ldr	r2, [r2, #0]
 8004578:	4413      	add	r3, r2
 800457a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800457e:	881b      	ldrh	r3, [r3, #0]
 8004580:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004584:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8004586:	8bfb      	ldrh	r3, [r7, #30]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d008      	beq.n	800459e <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6818      	ldr	r0, [r3, #0]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6959      	ldr	r1, [r3, #20]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	895a      	ldrh	r2, [r3, #10]
 8004598:	8bfb      	ldrh	r3, [r7, #30]
 800459a:	f002 fa32 	bl	8006a02 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	461a      	mov	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	4413      	add	r3, r2
 80045ac:	881b      	ldrh	r3, [r3, #0]
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045b8:	b29c      	uxth	r4, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	461a      	mov	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	441a      	add	r2, r3
 80045c8:	4b46      	ldr	r3, [pc, #280]	; (80046e4 <PCD_EP_ISR_Handler+0x530>)
 80045ca:	4323      	orrs	r3, r4
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	69da      	ldr	r2, [r3, #28]
 80045d4:	8bfb      	ldrh	r3, [r7, #30]
 80045d6:	441a      	add	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	695a      	ldr	r2, [r3, #20]
 80045e0:	8bfb      	ldrh	r3, [r7, #30]
 80045e2:	441a      	add	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d004      	beq.n	80045fa <PCD_EP_ISR_Handler+0x446>
 80045f0:	8bfa      	ldrh	r2, [r7, #30]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d206      	bcs.n	8004608 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	4619      	mov	r1, r3
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f003 ffd3 	bl	80085ac <HAL_PCD_DataOutStageCallback>
 8004606:	e008      	b.n	800461a <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	7819      	ldrb	r1, [r3, #0]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	695a      	ldr	r2, [r3, #20]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	699b      	ldr	r3, [r3, #24]
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f7ff fc9d 	bl	8003f54 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800461a:	8a7b      	ldrh	r3, [r7, #18]
 800461c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004620:	2b00      	cmp	r3, #0
 8004622:	d04f      	beq.n	80046c4 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8004624:	7d7b      	ldrb	r3, [r7, #21]
 8004626:	015b      	lsls	r3, r3, #5
 8004628:	3328      	adds	r3, #40	; 0x28
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	4413      	add	r3, r2
 800462e:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	461a      	mov	r2, r3
 8004636:	7d7b      	ldrb	r3, [r7, #21]
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	4413      	add	r3, r2
 800463c:	881b      	ldrh	r3, [r3, #0]
 800463e:	b29b      	uxth	r3, r3
 8004640:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004644:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004648:	b29c      	uxth	r4, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	461a      	mov	r2, r3
 8004650:	7d7b      	ldrb	r3, [r7, #21]
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	441a      	add	r2, r3
 8004656:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800465a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800465e:	b29b      	uxth	r3, r3
 8004660:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800466a:	b29b      	uxth	r3, r3
 800466c:	461a      	mov	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	00db      	lsls	r3, r3, #3
 8004674:	4413      	add	r3, r2
 8004676:	3302      	adds	r3, #2
 8004678:	005b      	lsls	r3, r3, #1
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	6812      	ldr	r2, [r2, #0]
 800467e:	4413      	add	r3, r2
 8004680:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004684:	881b      	ldrh	r3, [r3, #0]
 8004686:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	695a      	ldr	r2, [r3, #20]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	69db      	ldr	r3, [r3, #28]
 8004696:	441a      	add	r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d106      	bne.n	80046b2 <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	4619      	mov	r1, r3
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f003 ff96 	bl	80085dc <HAL_PCD_DataInStageCallback>
 80046b0:	e008      	b.n	80046c4 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	7819      	ldrb	r1, [r3, #0]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	695a      	ldr	r2, [r3, #20]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f7ff fc96 	bl	8003ff0 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	b21b      	sxth	r3, r3
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f6ff ad74 	blt.w	80041be <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3724      	adds	r7, #36	; 0x24
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd90      	pop	{r4, r7, pc}
 80046e0:	ffff8080 	.word	0xffff8080
 80046e4:	ffff80c0 	.word	0xffff80c0

080046e8 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b087      	sub	sp, #28
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	607b      	str	r3, [r7, #4]
 80046f2:	460b      	mov	r3, r1
 80046f4:	817b      	strh	r3, [r7, #10]
 80046f6:	4613      	mov	r3, r2
 80046f8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80046fa:	897b      	ldrh	r3, [r7, #10]
 80046fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004700:	b29b      	uxth	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d008      	beq.n	8004718 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004706:	897b      	ldrh	r3, [r7, #10]
 8004708:	f003 0307 	and.w	r3, r3, #7
 800470c:	015b      	lsls	r3, r3, #5
 800470e:	3328      	adds	r3, #40	; 0x28
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	4413      	add	r3, r2
 8004714:	617b      	str	r3, [r7, #20]
 8004716:	e006      	b.n	8004726 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004718:	897b      	ldrh	r3, [r7, #10]
 800471a:	015b      	lsls	r3, r3, #5
 800471c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	4413      	add	r3, r2
 8004724:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004726:	893b      	ldrh	r3, [r7, #8]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d107      	bne.n	800473c <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	2200      	movs	r2, #0
 8004730:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	b29a      	uxth	r2, r3
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	80da      	strh	r2, [r3, #6]
 800473a:	e00b      	b.n	8004754 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	2201      	movs	r2, #1
 8004740:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	b29a      	uxth	r2, r3
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	0c1b      	lsrs	r3, r3, #16
 800474e:	b29a      	uxth	r2, r3
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	371c      	adds	r7, #28
 800475a:	46bd      	mov	sp, r7
 800475c:	bc80      	pop	{r7}
 800475e:	4770      	bx	lr

08004760 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b086      	sub	sp, #24
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d101      	bne.n	8004772 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e26c      	b.n	8004c4c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0301 	and.w	r3, r3, #1
 800477a:	2b00      	cmp	r3, #0
 800477c:	f000 8087 	beq.w	800488e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004780:	4b92      	ldr	r3, [pc, #584]	; (80049cc <HAL_RCC_OscConfig+0x26c>)
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f003 030c 	and.w	r3, r3, #12
 8004788:	2b04      	cmp	r3, #4
 800478a:	d00c      	beq.n	80047a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800478c:	4b8f      	ldr	r3, [pc, #572]	; (80049cc <HAL_RCC_OscConfig+0x26c>)
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f003 030c 	and.w	r3, r3, #12
 8004794:	2b08      	cmp	r3, #8
 8004796:	d112      	bne.n	80047be <HAL_RCC_OscConfig+0x5e>
 8004798:	4b8c      	ldr	r3, [pc, #560]	; (80049cc <HAL_RCC_OscConfig+0x26c>)
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047a4:	d10b      	bne.n	80047be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047a6:	4b89      	ldr	r3, [pc, #548]	; (80049cc <HAL_RCC_OscConfig+0x26c>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d06c      	beq.n	800488c <HAL_RCC_OscConfig+0x12c>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d168      	bne.n	800488c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e246      	b.n	8004c4c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047c6:	d106      	bne.n	80047d6 <HAL_RCC_OscConfig+0x76>
 80047c8:	4b80      	ldr	r3, [pc, #512]	; (80049cc <HAL_RCC_OscConfig+0x26c>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a7f      	ldr	r2, [pc, #508]	; (80049cc <HAL_RCC_OscConfig+0x26c>)
 80047ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047d2:	6013      	str	r3, [r2, #0]
 80047d4:	e02e      	b.n	8004834 <HAL_RCC_OscConfig+0xd4>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d10c      	bne.n	80047f8 <HAL_RCC_OscConfig+0x98>
 80047de:	4b7b      	ldr	r3, [pc, #492]	; (80049cc <HAL_RCC_OscConfig+0x26c>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a7a      	ldr	r2, [pc, #488]	; (80049cc <HAL_RCC_OscConfig+0x26c>)
 80047e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047e8:	6013      	str	r3, [r2, #0]
 80047ea:	4b78      	ldr	r3, [pc, #480]	; (80049cc <HAL_RCC_OscConfig+0x26c>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a77      	ldr	r2, [pc, #476]	; (80049cc <HAL_RCC_OscConfig+0x26c>)
 80047f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047f4:	6013      	str	r3, [r2, #0]
 80047f6:	e01d      	b.n	8004834 <HAL_RCC_OscConfig+0xd4>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004800:	d10c      	bne.n	800481c <HAL_RCC_OscConfig+0xbc>
 8004802:	4b72      	ldr	r3, [pc, #456]	; (80049cc <HAL_RCC_OscConfig+0x26c>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a71      	ldr	r2, [pc, #452]	; (80049cc <HAL_RCC_OscConfig+0x26c>)
 8004808:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800480c:	6013      	str	r3, [r2, #0]
 800480e:	4b6f      	ldr	r3, [pc, #444]	; (80049cc <HAL_RCC_OscConfig+0x26c>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a6e      	ldr	r2, [pc, #440]	; (80049cc <HAL_RCC_OscConfig+0x26c>)
 8004814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004818:	6013      	str	r3, [r2, #0]
 800481a:	e00b      	b.n	8004834 <HAL_RCC_OscConfig+0xd4>
 800481c:	4b6b      	ldr	r3, [pc, #428]	; (80049cc <HAL_RCC_OscConfig+0x26c>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a6a      	ldr	r2, [pc, #424]	; (80049cc <HAL_RCC_OscConfig+0x26c>)
 8004822:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004826:	6013      	str	r3, [r2, #0]
 8004828:	4b68      	ldr	r3, [pc, #416]	; (80049cc <HAL_RCC_OscConfig+0x26c>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a67      	ldr	r2, [pc, #412]	; (80049cc <HAL_RCC_OscConfig+0x26c>)
 800482e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004832:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d013      	beq.n	8004864 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800483c:	f7fd fe8c 	bl	8002558 <HAL_GetTick>
 8004840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004842:	e008      	b.n	8004856 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004844:	f7fd fe88 	bl	8002558 <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	2b64      	cmp	r3, #100	; 0x64
 8004850:	d901      	bls.n	8004856 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e1fa      	b.n	8004c4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004856:	4b5d      	ldr	r3, [pc, #372]	; (80049cc <HAL_RCC_OscConfig+0x26c>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d0f0      	beq.n	8004844 <HAL_RCC_OscConfig+0xe4>
 8004862:	e014      	b.n	800488e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004864:	f7fd fe78 	bl	8002558 <HAL_GetTick>
 8004868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800486a:	e008      	b.n	800487e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800486c:	f7fd fe74 	bl	8002558 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b64      	cmp	r3, #100	; 0x64
 8004878:	d901      	bls.n	800487e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e1e6      	b.n	8004c4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800487e:	4b53      	ldr	r3, [pc, #332]	; (80049cc <HAL_RCC_OscConfig+0x26c>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1f0      	bne.n	800486c <HAL_RCC_OscConfig+0x10c>
 800488a:	e000      	b.n	800488e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800488c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	2b00      	cmp	r3, #0
 8004898:	d063      	beq.n	8004962 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800489a:	4b4c      	ldr	r3, [pc, #304]	; (80049cc <HAL_RCC_OscConfig+0x26c>)
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f003 030c 	and.w	r3, r3, #12
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00b      	beq.n	80048be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80048a6:	4b49      	ldr	r3, [pc, #292]	; (80049cc <HAL_RCC_OscConfig+0x26c>)
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f003 030c 	and.w	r3, r3, #12
 80048ae:	2b08      	cmp	r3, #8
 80048b0:	d11c      	bne.n	80048ec <HAL_RCC_OscConfig+0x18c>
 80048b2:	4b46      	ldr	r3, [pc, #280]	; (80049cc <HAL_RCC_OscConfig+0x26c>)
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d116      	bne.n	80048ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048be:	4b43      	ldr	r3, [pc, #268]	; (80049cc <HAL_RCC_OscConfig+0x26c>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d005      	beq.n	80048d6 <HAL_RCC_OscConfig+0x176>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d001      	beq.n	80048d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e1ba      	b.n	8004c4c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048d6:	4b3d      	ldr	r3, [pc, #244]	; (80049cc <HAL_RCC_OscConfig+0x26c>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	00db      	lsls	r3, r3, #3
 80048e4:	4939      	ldr	r1, [pc, #228]	; (80049cc <HAL_RCC_OscConfig+0x26c>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ea:	e03a      	b.n	8004962 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d020      	beq.n	8004936 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048f4:	4b36      	ldr	r3, [pc, #216]	; (80049d0 <HAL_RCC_OscConfig+0x270>)
 80048f6:	2201      	movs	r2, #1
 80048f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048fa:	f7fd fe2d 	bl	8002558 <HAL_GetTick>
 80048fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004900:	e008      	b.n	8004914 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004902:	f7fd fe29 	bl	8002558 <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	2b02      	cmp	r3, #2
 800490e:	d901      	bls.n	8004914 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e19b      	b.n	8004c4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004914:	4b2d      	ldr	r3, [pc, #180]	; (80049cc <HAL_RCC_OscConfig+0x26c>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0302 	and.w	r3, r3, #2
 800491c:	2b00      	cmp	r3, #0
 800491e:	d0f0      	beq.n	8004902 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004920:	4b2a      	ldr	r3, [pc, #168]	; (80049cc <HAL_RCC_OscConfig+0x26c>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	695b      	ldr	r3, [r3, #20]
 800492c:	00db      	lsls	r3, r3, #3
 800492e:	4927      	ldr	r1, [pc, #156]	; (80049cc <HAL_RCC_OscConfig+0x26c>)
 8004930:	4313      	orrs	r3, r2
 8004932:	600b      	str	r3, [r1, #0]
 8004934:	e015      	b.n	8004962 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004936:	4b26      	ldr	r3, [pc, #152]	; (80049d0 <HAL_RCC_OscConfig+0x270>)
 8004938:	2200      	movs	r2, #0
 800493a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800493c:	f7fd fe0c 	bl	8002558 <HAL_GetTick>
 8004940:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004942:	e008      	b.n	8004956 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004944:	f7fd fe08 	bl	8002558 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	2b02      	cmp	r3, #2
 8004950:	d901      	bls.n	8004956 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e17a      	b.n	8004c4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004956:	4b1d      	ldr	r3, [pc, #116]	; (80049cc <HAL_RCC_OscConfig+0x26c>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1f0      	bne.n	8004944 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0308 	and.w	r3, r3, #8
 800496a:	2b00      	cmp	r3, #0
 800496c:	d03a      	beq.n	80049e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d019      	beq.n	80049aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004976:	4b17      	ldr	r3, [pc, #92]	; (80049d4 <HAL_RCC_OscConfig+0x274>)
 8004978:	2201      	movs	r2, #1
 800497a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800497c:	f7fd fdec 	bl	8002558 <HAL_GetTick>
 8004980:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004982:	e008      	b.n	8004996 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004984:	f7fd fde8 	bl	8002558 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b02      	cmp	r3, #2
 8004990:	d901      	bls.n	8004996 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e15a      	b.n	8004c4c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004996:	4b0d      	ldr	r3, [pc, #52]	; (80049cc <HAL_RCC_OscConfig+0x26c>)
 8004998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499a:	f003 0302 	and.w	r3, r3, #2
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d0f0      	beq.n	8004984 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80049a2:	2001      	movs	r0, #1
 80049a4:	f000 fac6 	bl	8004f34 <RCC_Delay>
 80049a8:	e01c      	b.n	80049e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049aa:	4b0a      	ldr	r3, [pc, #40]	; (80049d4 <HAL_RCC_OscConfig+0x274>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049b0:	f7fd fdd2 	bl	8002558 <HAL_GetTick>
 80049b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049b6:	e00f      	b.n	80049d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049b8:	f7fd fdce 	bl	8002558 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d908      	bls.n	80049d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e140      	b.n	8004c4c <HAL_RCC_OscConfig+0x4ec>
 80049ca:	bf00      	nop
 80049cc:	40021000 	.word	0x40021000
 80049d0:	42420000 	.word	0x42420000
 80049d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049d8:	4b9e      	ldr	r3, [pc, #632]	; (8004c54 <HAL_RCC_OscConfig+0x4f4>)
 80049da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049dc:	f003 0302 	and.w	r3, r3, #2
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d1e9      	bne.n	80049b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0304 	and.w	r3, r3, #4
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f000 80a6 	beq.w	8004b3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049f2:	2300      	movs	r3, #0
 80049f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049f6:	4b97      	ldr	r3, [pc, #604]	; (8004c54 <HAL_RCC_OscConfig+0x4f4>)
 80049f8:	69db      	ldr	r3, [r3, #28]
 80049fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d10d      	bne.n	8004a1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a02:	4b94      	ldr	r3, [pc, #592]	; (8004c54 <HAL_RCC_OscConfig+0x4f4>)
 8004a04:	69db      	ldr	r3, [r3, #28]
 8004a06:	4a93      	ldr	r2, [pc, #588]	; (8004c54 <HAL_RCC_OscConfig+0x4f4>)
 8004a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a0c:	61d3      	str	r3, [r2, #28]
 8004a0e:	4b91      	ldr	r3, [pc, #580]	; (8004c54 <HAL_RCC_OscConfig+0x4f4>)
 8004a10:	69db      	ldr	r3, [r3, #28]
 8004a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a16:	60bb      	str	r3, [r7, #8]
 8004a18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a1e:	4b8e      	ldr	r3, [pc, #568]	; (8004c58 <HAL_RCC_OscConfig+0x4f8>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d118      	bne.n	8004a5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a2a:	4b8b      	ldr	r3, [pc, #556]	; (8004c58 <HAL_RCC_OscConfig+0x4f8>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a8a      	ldr	r2, [pc, #552]	; (8004c58 <HAL_RCC_OscConfig+0x4f8>)
 8004a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a36:	f7fd fd8f 	bl	8002558 <HAL_GetTick>
 8004a3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a3c:	e008      	b.n	8004a50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a3e:	f7fd fd8b 	bl	8002558 <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	2b64      	cmp	r3, #100	; 0x64
 8004a4a:	d901      	bls.n	8004a50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e0fd      	b.n	8004c4c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a50:	4b81      	ldr	r3, [pc, #516]	; (8004c58 <HAL_RCC_OscConfig+0x4f8>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d0f0      	beq.n	8004a3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d106      	bne.n	8004a72 <HAL_RCC_OscConfig+0x312>
 8004a64:	4b7b      	ldr	r3, [pc, #492]	; (8004c54 <HAL_RCC_OscConfig+0x4f4>)
 8004a66:	6a1b      	ldr	r3, [r3, #32]
 8004a68:	4a7a      	ldr	r2, [pc, #488]	; (8004c54 <HAL_RCC_OscConfig+0x4f4>)
 8004a6a:	f043 0301 	orr.w	r3, r3, #1
 8004a6e:	6213      	str	r3, [r2, #32]
 8004a70:	e02d      	b.n	8004ace <HAL_RCC_OscConfig+0x36e>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10c      	bne.n	8004a94 <HAL_RCC_OscConfig+0x334>
 8004a7a:	4b76      	ldr	r3, [pc, #472]	; (8004c54 <HAL_RCC_OscConfig+0x4f4>)
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
 8004a7e:	4a75      	ldr	r2, [pc, #468]	; (8004c54 <HAL_RCC_OscConfig+0x4f4>)
 8004a80:	f023 0301 	bic.w	r3, r3, #1
 8004a84:	6213      	str	r3, [r2, #32]
 8004a86:	4b73      	ldr	r3, [pc, #460]	; (8004c54 <HAL_RCC_OscConfig+0x4f4>)
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	4a72      	ldr	r2, [pc, #456]	; (8004c54 <HAL_RCC_OscConfig+0x4f4>)
 8004a8c:	f023 0304 	bic.w	r3, r3, #4
 8004a90:	6213      	str	r3, [r2, #32]
 8004a92:	e01c      	b.n	8004ace <HAL_RCC_OscConfig+0x36e>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	2b05      	cmp	r3, #5
 8004a9a:	d10c      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x356>
 8004a9c:	4b6d      	ldr	r3, [pc, #436]	; (8004c54 <HAL_RCC_OscConfig+0x4f4>)
 8004a9e:	6a1b      	ldr	r3, [r3, #32]
 8004aa0:	4a6c      	ldr	r2, [pc, #432]	; (8004c54 <HAL_RCC_OscConfig+0x4f4>)
 8004aa2:	f043 0304 	orr.w	r3, r3, #4
 8004aa6:	6213      	str	r3, [r2, #32]
 8004aa8:	4b6a      	ldr	r3, [pc, #424]	; (8004c54 <HAL_RCC_OscConfig+0x4f4>)
 8004aaa:	6a1b      	ldr	r3, [r3, #32]
 8004aac:	4a69      	ldr	r2, [pc, #420]	; (8004c54 <HAL_RCC_OscConfig+0x4f4>)
 8004aae:	f043 0301 	orr.w	r3, r3, #1
 8004ab2:	6213      	str	r3, [r2, #32]
 8004ab4:	e00b      	b.n	8004ace <HAL_RCC_OscConfig+0x36e>
 8004ab6:	4b67      	ldr	r3, [pc, #412]	; (8004c54 <HAL_RCC_OscConfig+0x4f4>)
 8004ab8:	6a1b      	ldr	r3, [r3, #32]
 8004aba:	4a66      	ldr	r2, [pc, #408]	; (8004c54 <HAL_RCC_OscConfig+0x4f4>)
 8004abc:	f023 0301 	bic.w	r3, r3, #1
 8004ac0:	6213      	str	r3, [r2, #32]
 8004ac2:	4b64      	ldr	r3, [pc, #400]	; (8004c54 <HAL_RCC_OscConfig+0x4f4>)
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	4a63      	ldr	r2, [pc, #396]	; (8004c54 <HAL_RCC_OscConfig+0x4f4>)
 8004ac8:	f023 0304 	bic.w	r3, r3, #4
 8004acc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d015      	beq.n	8004b02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ad6:	f7fd fd3f 	bl	8002558 <HAL_GetTick>
 8004ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004adc:	e00a      	b.n	8004af4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ade:	f7fd fd3b 	bl	8002558 <HAL_GetTick>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d901      	bls.n	8004af4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e0ab      	b.n	8004c4c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004af4:	4b57      	ldr	r3, [pc, #348]	; (8004c54 <HAL_RCC_OscConfig+0x4f4>)
 8004af6:	6a1b      	ldr	r3, [r3, #32]
 8004af8:	f003 0302 	and.w	r3, r3, #2
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d0ee      	beq.n	8004ade <HAL_RCC_OscConfig+0x37e>
 8004b00:	e014      	b.n	8004b2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b02:	f7fd fd29 	bl	8002558 <HAL_GetTick>
 8004b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b08:	e00a      	b.n	8004b20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b0a:	f7fd fd25 	bl	8002558 <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d901      	bls.n	8004b20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e095      	b.n	8004c4c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b20:	4b4c      	ldr	r3, [pc, #304]	; (8004c54 <HAL_RCC_OscConfig+0x4f4>)
 8004b22:	6a1b      	ldr	r3, [r3, #32]
 8004b24:	f003 0302 	and.w	r3, r3, #2
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d1ee      	bne.n	8004b0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004b2c:	7dfb      	ldrb	r3, [r7, #23]
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d105      	bne.n	8004b3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b32:	4b48      	ldr	r3, [pc, #288]	; (8004c54 <HAL_RCC_OscConfig+0x4f4>)
 8004b34:	69db      	ldr	r3, [r3, #28]
 8004b36:	4a47      	ldr	r2, [pc, #284]	; (8004c54 <HAL_RCC_OscConfig+0x4f4>)
 8004b38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	69db      	ldr	r3, [r3, #28]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	f000 8081 	beq.w	8004c4a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b48:	4b42      	ldr	r3, [pc, #264]	; (8004c54 <HAL_RCC_OscConfig+0x4f4>)
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f003 030c 	and.w	r3, r3, #12
 8004b50:	2b08      	cmp	r3, #8
 8004b52:	d061      	beq.n	8004c18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	69db      	ldr	r3, [r3, #28]
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d146      	bne.n	8004bea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b5c:	4b3f      	ldr	r3, [pc, #252]	; (8004c5c <HAL_RCC_OscConfig+0x4fc>)
 8004b5e:	2200      	movs	r2, #0
 8004b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b62:	f7fd fcf9 	bl	8002558 <HAL_GetTick>
 8004b66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b68:	e008      	b.n	8004b7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b6a:	f7fd fcf5 	bl	8002558 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d901      	bls.n	8004b7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e067      	b.n	8004c4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b7c:	4b35      	ldr	r3, [pc, #212]	; (8004c54 <HAL_RCC_OscConfig+0x4f4>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d1f0      	bne.n	8004b6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a1b      	ldr	r3, [r3, #32]
 8004b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b90:	d108      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004b92:	4b30      	ldr	r3, [pc, #192]	; (8004c54 <HAL_RCC_OscConfig+0x4f4>)
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	492d      	ldr	r1, [pc, #180]	; (8004c54 <HAL_RCC_OscConfig+0x4f4>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ba4:	4b2b      	ldr	r3, [pc, #172]	; (8004c54 <HAL_RCC_OscConfig+0x4f4>)
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a19      	ldr	r1, [r3, #32]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb4:	430b      	orrs	r3, r1
 8004bb6:	4927      	ldr	r1, [pc, #156]	; (8004c54 <HAL_RCC_OscConfig+0x4f4>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bbc:	4b27      	ldr	r3, [pc, #156]	; (8004c5c <HAL_RCC_OscConfig+0x4fc>)
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc2:	f7fd fcc9 	bl	8002558 <HAL_GetTick>
 8004bc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004bc8:	e008      	b.n	8004bdc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bca:	f7fd fcc5 	bl	8002558 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d901      	bls.n	8004bdc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e037      	b.n	8004c4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004bdc:	4b1d      	ldr	r3, [pc, #116]	; (8004c54 <HAL_RCC_OscConfig+0x4f4>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d0f0      	beq.n	8004bca <HAL_RCC_OscConfig+0x46a>
 8004be8:	e02f      	b.n	8004c4a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bea:	4b1c      	ldr	r3, [pc, #112]	; (8004c5c <HAL_RCC_OscConfig+0x4fc>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bf0:	f7fd fcb2 	bl	8002558 <HAL_GetTick>
 8004bf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bf6:	e008      	b.n	8004c0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bf8:	f7fd fcae 	bl	8002558 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e020      	b.n	8004c4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c0a:	4b12      	ldr	r3, [pc, #72]	; (8004c54 <HAL_RCC_OscConfig+0x4f4>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1f0      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x498>
 8004c16:	e018      	b.n	8004c4a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	69db      	ldr	r3, [r3, #28]
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d101      	bne.n	8004c24 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e013      	b.n	8004c4c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004c24:	4b0b      	ldr	r3, [pc, #44]	; (8004c54 <HAL_RCC_OscConfig+0x4f4>)
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a1b      	ldr	r3, [r3, #32]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d106      	bne.n	8004c46 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d001      	beq.n	8004c4a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e000      	b.n	8004c4c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3718      	adds	r7, #24
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	40021000 	.word	0x40021000
 8004c58:	40007000 	.word	0x40007000
 8004c5c:	42420060 	.word	0x42420060

08004c60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d101      	bne.n	8004c74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e0d0      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c74:	4b6a      	ldr	r3, [pc, #424]	; (8004e20 <HAL_RCC_ClockConfig+0x1c0>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0307 	and.w	r3, r3, #7
 8004c7c:	683a      	ldr	r2, [r7, #0]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d910      	bls.n	8004ca4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c82:	4b67      	ldr	r3, [pc, #412]	; (8004e20 <HAL_RCC_ClockConfig+0x1c0>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f023 0207 	bic.w	r2, r3, #7
 8004c8a:	4965      	ldr	r1, [pc, #404]	; (8004e20 <HAL_RCC_ClockConfig+0x1c0>)
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c92:	4b63      	ldr	r3, [pc, #396]	; (8004e20 <HAL_RCC_ClockConfig+0x1c0>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0307 	and.w	r3, r3, #7
 8004c9a:	683a      	ldr	r2, [r7, #0]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d001      	beq.n	8004ca4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e0b8      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d020      	beq.n	8004cf2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0304 	and.w	r3, r3, #4
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d005      	beq.n	8004cc8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cbc:	4b59      	ldr	r3, [pc, #356]	; (8004e24 <HAL_RCC_ClockConfig+0x1c4>)
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	4a58      	ldr	r2, [pc, #352]	; (8004e24 <HAL_RCC_ClockConfig+0x1c4>)
 8004cc2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004cc6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0308 	and.w	r3, r3, #8
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d005      	beq.n	8004ce0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cd4:	4b53      	ldr	r3, [pc, #332]	; (8004e24 <HAL_RCC_ClockConfig+0x1c4>)
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	4a52      	ldr	r2, [pc, #328]	; (8004e24 <HAL_RCC_ClockConfig+0x1c4>)
 8004cda:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004cde:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ce0:	4b50      	ldr	r3, [pc, #320]	; (8004e24 <HAL_RCC_ClockConfig+0x1c4>)
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	494d      	ldr	r1, [pc, #308]	; (8004e24 <HAL_RCC_ClockConfig+0x1c4>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d040      	beq.n	8004d80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d107      	bne.n	8004d16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d06:	4b47      	ldr	r3, [pc, #284]	; (8004e24 <HAL_RCC_ClockConfig+0x1c4>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d115      	bne.n	8004d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e07f      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d107      	bne.n	8004d2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d1e:	4b41      	ldr	r3, [pc, #260]	; (8004e24 <HAL_RCC_ClockConfig+0x1c4>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d109      	bne.n	8004d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e073      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d2e:	4b3d      	ldr	r3, [pc, #244]	; (8004e24 <HAL_RCC_ClockConfig+0x1c4>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e06b      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d3e:	4b39      	ldr	r3, [pc, #228]	; (8004e24 <HAL_RCC_ClockConfig+0x1c4>)
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f023 0203 	bic.w	r2, r3, #3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	4936      	ldr	r1, [pc, #216]	; (8004e24 <HAL_RCC_ClockConfig+0x1c4>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d50:	f7fd fc02 	bl	8002558 <HAL_GetTick>
 8004d54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d56:	e00a      	b.n	8004d6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d58:	f7fd fbfe 	bl	8002558 <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d901      	bls.n	8004d6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e053      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d6e:	4b2d      	ldr	r3, [pc, #180]	; (8004e24 <HAL_RCC_ClockConfig+0x1c4>)
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f003 020c 	and.w	r2, r3, #12
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d1eb      	bne.n	8004d58 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d80:	4b27      	ldr	r3, [pc, #156]	; (8004e20 <HAL_RCC_ClockConfig+0x1c0>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0307 	and.w	r3, r3, #7
 8004d88:	683a      	ldr	r2, [r7, #0]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d210      	bcs.n	8004db0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d8e:	4b24      	ldr	r3, [pc, #144]	; (8004e20 <HAL_RCC_ClockConfig+0x1c0>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f023 0207 	bic.w	r2, r3, #7
 8004d96:	4922      	ldr	r1, [pc, #136]	; (8004e20 <HAL_RCC_ClockConfig+0x1c0>)
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d9e:	4b20      	ldr	r3, [pc, #128]	; (8004e20 <HAL_RCC_ClockConfig+0x1c0>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0307 	and.w	r3, r3, #7
 8004da6:	683a      	ldr	r2, [r7, #0]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d001      	beq.n	8004db0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e032      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0304 	and.w	r3, r3, #4
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d008      	beq.n	8004dce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dbc:	4b19      	ldr	r3, [pc, #100]	; (8004e24 <HAL_RCC_ClockConfig+0x1c4>)
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	4916      	ldr	r1, [pc, #88]	; (8004e24 <HAL_RCC_ClockConfig+0x1c4>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0308 	and.w	r3, r3, #8
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d009      	beq.n	8004dee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004dda:	4b12      	ldr	r3, [pc, #72]	; (8004e24 <HAL_RCC_ClockConfig+0x1c4>)
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	00db      	lsls	r3, r3, #3
 8004de8:	490e      	ldr	r1, [pc, #56]	; (8004e24 <HAL_RCC_ClockConfig+0x1c4>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004dee:	f000 f821 	bl	8004e34 <HAL_RCC_GetSysClockFreq>
 8004df2:	4601      	mov	r1, r0
 8004df4:	4b0b      	ldr	r3, [pc, #44]	; (8004e24 <HAL_RCC_ClockConfig+0x1c4>)
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	091b      	lsrs	r3, r3, #4
 8004dfa:	f003 030f 	and.w	r3, r3, #15
 8004dfe:	4a0a      	ldr	r2, [pc, #40]	; (8004e28 <HAL_RCC_ClockConfig+0x1c8>)
 8004e00:	5cd3      	ldrb	r3, [r2, r3]
 8004e02:	fa21 f303 	lsr.w	r3, r1, r3
 8004e06:	4a09      	ldr	r2, [pc, #36]	; (8004e2c <HAL_RCC_ClockConfig+0x1cc>)
 8004e08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004e0a:	4b09      	ldr	r3, [pc, #36]	; (8004e30 <HAL_RCC_ClockConfig+0x1d0>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7fd fb60 	bl	80024d4 <HAL_InitTick>

  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	40022000 	.word	0x40022000
 8004e24:	40021000 	.word	0x40021000
 8004e28:	0800b8b4 	.word	0x0800b8b4
 8004e2c:	20000000 	.word	0x20000000
 8004e30:	20000004 	.word	0x20000004

08004e34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e34:	b490      	push	{r4, r7}
 8004e36:	b08a      	sub	sp, #40	; 0x28
 8004e38:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004e3a:	4b2a      	ldr	r3, [pc, #168]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004e3c:	1d3c      	adds	r4, r7, #4
 8004e3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004e44:	4b28      	ldr	r3, [pc, #160]	; (8004ee8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004e46:	881b      	ldrh	r3, [r3, #0]
 8004e48:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	61fb      	str	r3, [r7, #28]
 8004e4e:	2300      	movs	r3, #0
 8004e50:	61bb      	str	r3, [r7, #24]
 8004e52:	2300      	movs	r3, #0
 8004e54:	627b      	str	r3, [r7, #36]	; 0x24
 8004e56:	2300      	movs	r3, #0
 8004e58:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004e5e:	4b23      	ldr	r3, [pc, #140]	; (8004eec <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	f003 030c 	and.w	r3, r3, #12
 8004e6a:	2b04      	cmp	r3, #4
 8004e6c:	d002      	beq.n	8004e74 <HAL_RCC_GetSysClockFreq+0x40>
 8004e6e:	2b08      	cmp	r3, #8
 8004e70:	d003      	beq.n	8004e7a <HAL_RCC_GetSysClockFreq+0x46>
 8004e72:	e02d      	b.n	8004ed0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004e74:	4b1e      	ldr	r3, [pc, #120]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004e76:	623b      	str	r3, [r7, #32]
      break;
 8004e78:	e02d      	b.n	8004ed6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	0c9b      	lsrs	r3, r3, #18
 8004e7e:	f003 030f 	and.w	r3, r3, #15
 8004e82:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004e86:	4413      	add	r3, r2
 8004e88:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004e8c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d013      	beq.n	8004ec0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004e98:	4b14      	ldr	r3, [pc, #80]	; (8004eec <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	0c5b      	lsrs	r3, r3, #17
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004ea6:	4413      	add	r3, r2
 8004ea8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004eac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	4a0f      	ldr	r2, [pc, #60]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004eb2:	fb02 f203 	mul.w	r2, r2, r3
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8004ebe:	e004      	b.n	8004eca <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	4a0c      	ldr	r2, [pc, #48]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004ec4:	fb02 f303 	mul.w	r3, r2, r3
 8004ec8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ecc:	623b      	str	r3, [r7, #32]
      break;
 8004ece:	e002      	b.n	8004ed6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004ed0:	4b07      	ldr	r3, [pc, #28]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004ed2:	623b      	str	r3, [r7, #32]
      break;
 8004ed4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ed6:	6a3b      	ldr	r3, [r7, #32]
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3728      	adds	r7, #40	; 0x28
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bc90      	pop	{r4, r7}
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	0800b858 	.word	0x0800b858
 8004ee8:	0800b868 	.word	0x0800b868
 8004eec:	40021000 	.word	0x40021000
 8004ef0:	007a1200 	.word	0x007a1200
 8004ef4:	003d0900 	.word	0x003d0900

08004ef8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004efc:	4b02      	ldr	r3, [pc, #8]	; (8004f08 <HAL_RCC_GetHCLKFreq+0x10>)
 8004efe:	681b      	ldr	r3, [r3, #0]
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bc80      	pop	{r7}
 8004f06:	4770      	bx	lr
 8004f08:	20000000 	.word	0x20000000

08004f0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f10:	f7ff fff2 	bl	8004ef8 <HAL_RCC_GetHCLKFreq>
 8004f14:	4601      	mov	r1, r0
 8004f16:	4b05      	ldr	r3, [pc, #20]	; (8004f2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	0a1b      	lsrs	r3, r3, #8
 8004f1c:	f003 0307 	and.w	r3, r3, #7
 8004f20:	4a03      	ldr	r2, [pc, #12]	; (8004f30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f22:	5cd3      	ldrb	r3, [r2, r3]
 8004f24:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	40021000 	.word	0x40021000
 8004f30:	0800b8c4 	.word	0x0800b8c4

08004f34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004f3c:	4b0a      	ldr	r3, [pc, #40]	; (8004f68 <RCC_Delay+0x34>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a0a      	ldr	r2, [pc, #40]	; (8004f6c <RCC_Delay+0x38>)
 8004f42:	fba2 2303 	umull	r2, r3, r2, r3
 8004f46:	0a5b      	lsrs	r3, r3, #9
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	fb02 f303 	mul.w	r3, r2, r3
 8004f4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004f50:	bf00      	nop
  }
  while (Delay --);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	1e5a      	subs	r2, r3, #1
 8004f56:	60fa      	str	r2, [r7, #12]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d1f9      	bne.n	8004f50 <RCC_Delay+0x1c>
}
 8004f5c:	bf00      	nop
 8004f5e:	3714      	adds	r7, #20
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bc80      	pop	{r7}
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	20000000 	.word	0x20000000
 8004f6c:	10624dd3 	.word	0x10624dd3

08004f70 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b086      	sub	sp, #24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	613b      	str	r3, [r7, #16]
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d07d      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f90:	4b4f      	ldr	r3, [pc, #316]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f92:	69db      	ldr	r3, [r3, #28]
 8004f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10d      	bne.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f9c:	4b4c      	ldr	r3, [pc, #304]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f9e:	69db      	ldr	r3, [r3, #28]
 8004fa0:	4a4b      	ldr	r2, [pc, #300]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fa6:	61d3      	str	r3, [r2, #28]
 8004fa8:	4b49      	ldr	r3, [pc, #292]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004faa:	69db      	ldr	r3, [r3, #28]
 8004fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fb0:	60bb      	str	r3, [r7, #8]
 8004fb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fb8:	4b46      	ldr	r3, [pc, #280]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d118      	bne.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fc4:	4b43      	ldr	r3, [pc, #268]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a42      	ldr	r2, [pc, #264]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fd0:	f7fd fac2 	bl	8002558 <HAL_GetTick>
 8004fd4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fd6:	e008      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fd8:	f7fd fabe 	bl	8002558 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	2b64      	cmp	r3, #100	; 0x64
 8004fe4:	d901      	bls.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e06d      	b.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fea:	4b3a      	ldr	r3, [pc, #232]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d0f0      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ff6:	4b36      	ldr	r3, [pc, #216]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ffe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d02e      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	429a      	cmp	r2, r3
 8005012:	d027      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005014:	4b2e      	ldr	r3, [pc, #184]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005016:	6a1b      	ldr	r3, [r3, #32]
 8005018:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800501c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800501e:	4b2e      	ldr	r3, [pc, #184]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005020:	2201      	movs	r2, #1
 8005022:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005024:	4b2c      	ldr	r3, [pc, #176]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005026:	2200      	movs	r2, #0
 8005028:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800502a:	4a29      	ldr	r2, [pc, #164]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f003 0301 	and.w	r3, r3, #1
 8005036:	2b00      	cmp	r3, #0
 8005038:	d014      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800503a:	f7fd fa8d 	bl	8002558 <HAL_GetTick>
 800503e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005040:	e00a      	b.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005042:	f7fd fa89 	bl	8002558 <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005050:	4293      	cmp	r3, r2
 8005052:	d901      	bls.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e036      	b.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005058:	4b1d      	ldr	r3, [pc, #116]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800505a:	6a1b      	ldr	r3, [r3, #32]
 800505c:	f003 0302 	and.w	r3, r3, #2
 8005060:	2b00      	cmp	r3, #0
 8005062:	d0ee      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005064:	4b1a      	ldr	r3, [pc, #104]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005066:	6a1b      	ldr	r3, [r3, #32]
 8005068:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	4917      	ldr	r1, [pc, #92]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005072:	4313      	orrs	r3, r2
 8005074:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005076:	7dfb      	ldrb	r3, [r7, #23]
 8005078:	2b01      	cmp	r3, #1
 800507a:	d105      	bne.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800507c:	4b14      	ldr	r3, [pc, #80]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800507e:	69db      	ldr	r3, [r3, #28]
 8005080:	4a13      	ldr	r2, [pc, #76]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005082:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005086:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0302 	and.w	r3, r3, #2
 8005090:	2b00      	cmp	r3, #0
 8005092:	d008      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005094:	4b0e      	ldr	r3, [pc, #56]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	490b      	ldr	r1, [pc, #44]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0310 	and.w	r3, r3, #16
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d008      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80050b2:	4b07      	ldr	r3, [pc, #28]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	4904      	ldr	r1, [pc, #16]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050c0:	4313      	orrs	r3, r2
 80050c2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3718      	adds	r7, #24
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	40021000 	.word	0x40021000
 80050d4:	40007000 	.word	0x40007000
 80050d8:	42420440 	.word	0x42420440

080050dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d101      	bne.n	80050ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e01d      	b.n	800512a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d106      	bne.n	8005108 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f7fd f898 	bl	8002238 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2202      	movs	r2, #2
 800510c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	3304      	adds	r3, #4
 8005118:	4619      	mov	r1, r3
 800511a:	4610      	mov	r0, r2
 800511c:	f000 fa18 	bl	8005550 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3708      	adds	r7, #8
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005132:	b480      	push	{r7}
 8005134:	b085      	sub	sp, #20
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68da      	ldr	r2, [r3, #12]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f042 0201 	orr.w	r2, r2, #1
 8005148:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	f003 0307 	and.w	r3, r3, #7
 8005154:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2b06      	cmp	r3, #6
 800515a:	d007      	beq.n	800516c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f042 0201 	orr.w	r2, r2, #1
 800516a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3714      	adds	r7, #20
 8005172:	46bd      	mov	sp, r7
 8005174:	bc80      	pop	{r7}
 8005176:	4770      	bx	lr

08005178 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	f003 0302 	and.w	r3, r3, #2
 800518a:	2b02      	cmp	r3, #2
 800518c:	d122      	bne.n	80051d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	f003 0302 	and.w	r3, r3, #2
 8005198:	2b02      	cmp	r3, #2
 800519a:	d11b      	bne.n	80051d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f06f 0202 	mvn.w	r2, #2
 80051a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	f003 0303 	and.w	r3, r3, #3
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d003      	beq.n	80051c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 f9ad 	bl	800551a <HAL_TIM_IC_CaptureCallback>
 80051c0:	e005      	b.n	80051ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 f9a0 	bl	8005508 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 f9af 	bl	800552c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	f003 0304 	and.w	r3, r3, #4
 80051de:	2b04      	cmp	r3, #4
 80051e0:	d122      	bne.n	8005228 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	f003 0304 	and.w	r3, r3, #4
 80051ec:	2b04      	cmp	r3, #4
 80051ee:	d11b      	bne.n	8005228 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f06f 0204 	mvn.w	r2, #4
 80051f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2202      	movs	r2, #2
 80051fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800520a:	2b00      	cmp	r3, #0
 800520c:	d003      	beq.n	8005216 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 f983 	bl	800551a <HAL_TIM_IC_CaptureCallback>
 8005214:	e005      	b.n	8005222 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 f976 	bl	8005508 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 f985 	bl	800552c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	f003 0308 	and.w	r3, r3, #8
 8005232:	2b08      	cmp	r3, #8
 8005234:	d122      	bne.n	800527c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	f003 0308 	and.w	r3, r3, #8
 8005240:	2b08      	cmp	r3, #8
 8005242:	d11b      	bne.n	800527c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f06f 0208 	mvn.w	r2, #8
 800524c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2204      	movs	r2, #4
 8005252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	69db      	ldr	r3, [r3, #28]
 800525a:	f003 0303 	and.w	r3, r3, #3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d003      	beq.n	800526a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 f959 	bl	800551a <HAL_TIM_IC_CaptureCallback>
 8005268:	e005      	b.n	8005276 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 f94c 	bl	8005508 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 f95b 	bl	800552c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	f003 0310 	and.w	r3, r3, #16
 8005286:	2b10      	cmp	r3, #16
 8005288:	d122      	bne.n	80052d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	f003 0310 	and.w	r3, r3, #16
 8005294:	2b10      	cmp	r3, #16
 8005296:	d11b      	bne.n	80052d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f06f 0210 	mvn.w	r2, #16
 80052a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2208      	movs	r2, #8
 80052a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	69db      	ldr	r3, [r3, #28]
 80052ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d003      	beq.n	80052be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 f92f 	bl	800551a <HAL_TIM_IC_CaptureCallback>
 80052bc:	e005      	b.n	80052ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 f922 	bl	8005508 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 f931 	bl	800552c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	f003 0301 	and.w	r3, r3, #1
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d10e      	bne.n	80052fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	f003 0301 	and.w	r3, r3, #1
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d107      	bne.n	80052fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f06f 0201 	mvn.w	r2, #1
 80052f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 f8fd 	bl	80054f6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005306:	2b80      	cmp	r3, #128	; 0x80
 8005308:	d10e      	bne.n	8005328 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005314:	2b80      	cmp	r3, #128	; 0x80
 8005316:	d107      	bne.n	8005328 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 fa59 	bl	80057da <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005332:	2b40      	cmp	r3, #64	; 0x40
 8005334:	d10e      	bne.n	8005354 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005340:	2b40      	cmp	r3, #64	; 0x40
 8005342:	d107      	bne.n	8005354 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800534c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 f8f5 	bl	800553e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	f003 0320 	and.w	r3, r3, #32
 800535e:	2b20      	cmp	r3, #32
 8005360:	d10e      	bne.n	8005380 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	f003 0320 	and.w	r3, r3, #32
 800536c:	2b20      	cmp	r3, #32
 800536e:	d107      	bne.n	8005380 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f06f 0220 	mvn.w	r2, #32
 8005378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 fa24 	bl	80057c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005380:	bf00      	nop
 8005382:	3708      	adds	r7, #8
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005398:	2b01      	cmp	r3, #1
 800539a:	d101      	bne.n	80053a0 <HAL_TIM_ConfigClockSource+0x18>
 800539c:	2302      	movs	r3, #2
 800539e:	e0a6      	b.n	80054ee <HAL_TIM_ConfigClockSource+0x166>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2202      	movs	r2, #2
 80053ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80053be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2b40      	cmp	r3, #64	; 0x40
 80053d6:	d067      	beq.n	80054a8 <HAL_TIM_ConfigClockSource+0x120>
 80053d8:	2b40      	cmp	r3, #64	; 0x40
 80053da:	d80b      	bhi.n	80053f4 <HAL_TIM_ConfigClockSource+0x6c>
 80053dc:	2b10      	cmp	r3, #16
 80053de:	d073      	beq.n	80054c8 <HAL_TIM_ConfigClockSource+0x140>
 80053e0:	2b10      	cmp	r3, #16
 80053e2:	d802      	bhi.n	80053ea <HAL_TIM_ConfigClockSource+0x62>
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d06f      	beq.n	80054c8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80053e8:	e078      	b.n	80054dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80053ea:	2b20      	cmp	r3, #32
 80053ec:	d06c      	beq.n	80054c8 <HAL_TIM_ConfigClockSource+0x140>
 80053ee:	2b30      	cmp	r3, #48	; 0x30
 80053f0:	d06a      	beq.n	80054c8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80053f2:	e073      	b.n	80054dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80053f4:	2b70      	cmp	r3, #112	; 0x70
 80053f6:	d00d      	beq.n	8005414 <HAL_TIM_ConfigClockSource+0x8c>
 80053f8:	2b70      	cmp	r3, #112	; 0x70
 80053fa:	d804      	bhi.n	8005406 <HAL_TIM_ConfigClockSource+0x7e>
 80053fc:	2b50      	cmp	r3, #80	; 0x50
 80053fe:	d033      	beq.n	8005468 <HAL_TIM_ConfigClockSource+0xe0>
 8005400:	2b60      	cmp	r3, #96	; 0x60
 8005402:	d041      	beq.n	8005488 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005404:	e06a      	b.n	80054dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005406:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800540a:	d066      	beq.n	80054da <HAL_TIM_ConfigClockSource+0x152>
 800540c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005410:	d017      	beq.n	8005442 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005412:	e063      	b.n	80054dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6818      	ldr	r0, [r3, #0]
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	6899      	ldr	r1, [r3, #8]
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	685a      	ldr	r2, [r3, #4]
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	f000 f96d 	bl	8005702 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005436:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	609a      	str	r2, [r3, #8]
      break;
 8005440:	e04c      	b.n	80054dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6818      	ldr	r0, [r3, #0]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	6899      	ldr	r1, [r3, #8]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	685a      	ldr	r2, [r3, #4]
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	f000 f956 	bl	8005702 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	689a      	ldr	r2, [r3, #8]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005464:	609a      	str	r2, [r3, #8]
      break;
 8005466:	e039      	b.n	80054dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6818      	ldr	r0, [r3, #0]
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	6859      	ldr	r1, [r3, #4]
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	461a      	mov	r2, r3
 8005476:	f000 f8cd 	bl	8005614 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2150      	movs	r1, #80	; 0x50
 8005480:	4618      	mov	r0, r3
 8005482:	f000 f924 	bl	80056ce <TIM_ITRx_SetConfig>
      break;
 8005486:	e029      	b.n	80054dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6818      	ldr	r0, [r3, #0]
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	6859      	ldr	r1, [r3, #4]
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	461a      	mov	r2, r3
 8005496:	f000 f8eb 	bl	8005670 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2160      	movs	r1, #96	; 0x60
 80054a0:	4618      	mov	r0, r3
 80054a2:	f000 f914 	bl	80056ce <TIM_ITRx_SetConfig>
      break;
 80054a6:	e019      	b.n	80054dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6818      	ldr	r0, [r3, #0]
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	6859      	ldr	r1, [r3, #4]
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	461a      	mov	r2, r3
 80054b6:	f000 f8ad 	bl	8005614 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2140      	movs	r1, #64	; 0x40
 80054c0:	4618      	mov	r0, r3
 80054c2:	f000 f904 	bl	80056ce <TIM_ITRx_SetConfig>
      break;
 80054c6:	e009      	b.n	80054dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4619      	mov	r1, r3
 80054d2:	4610      	mov	r0, r2
 80054d4:	f000 f8fb 	bl	80056ce <TIM_ITRx_SetConfig>
      break;
 80054d8:	e000      	b.n	80054dc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80054da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054f6:	b480      	push	{r7}
 80054f8:	b083      	sub	sp, #12
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80054fe:	bf00      	nop
 8005500:	370c      	adds	r7, #12
 8005502:	46bd      	mov	sp, r7
 8005504:	bc80      	pop	{r7}
 8005506:	4770      	bx	lr

08005508 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005510:	bf00      	nop
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	bc80      	pop	{r7}
 8005518:	4770      	bx	lr

0800551a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800551a:	b480      	push	{r7}
 800551c:	b083      	sub	sp, #12
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005522:	bf00      	nop
 8005524:	370c      	adds	r7, #12
 8005526:	46bd      	mov	sp, r7
 8005528:	bc80      	pop	{r7}
 800552a:	4770      	bx	lr

0800552c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005534:	bf00      	nop
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	bc80      	pop	{r7}
 800553c:	4770      	bx	lr

0800553e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800553e:	b480      	push	{r7}
 8005540:	b083      	sub	sp, #12
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005546:	bf00      	nop
 8005548:	370c      	adds	r7, #12
 800554a:	46bd      	mov	sp, r7
 800554c:	bc80      	pop	{r7}
 800554e:	4770      	bx	lr

08005550 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005550:	b480      	push	{r7}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a29      	ldr	r2, [pc, #164]	; (8005608 <TIM_Base_SetConfig+0xb8>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d00b      	beq.n	8005580 <TIM_Base_SetConfig+0x30>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800556e:	d007      	beq.n	8005580 <TIM_Base_SetConfig+0x30>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a26      	ldr	r2, [pc, #152]	; (800560c <TIM_Base_SetConfig+0xbc>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d003      	beq.n	8005580 <TIM_Base_SetConfig+0x30>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a25      	ldr	r2, [pc, #148]	; (8005610 <TIM_Base_SetConfig+0xc0>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d108      	bne.n	8005592 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005586:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	4313      	orrs	r3, r2
 8005590:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a1c      	ldr	r2, [pc, #112]	; (8005608 <TIM_Base_SetConfig+0xb8>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d00b      	beq.n	80055b2 <TIM_Base_SetConfig+0x62>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055a0:	d007      	beq.n	80055b2 <TIM_Base_SetConfig+0x62>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a19      	ldr	r2, [pc, #100]	; (800560c <TIM_Base_SetConfig+0xbc>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d003      	beq.n	80055b2 <TIM_Base_SetConfig+0x62>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a18      	ldr	r2, [pc, #96]	; (8005610 <TIM_Base_SetConfig+0xc0>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d108      	bne.n	80055c4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	689a      	ldr	r2, [r3, #8]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a07      	ldr	r2, [pc, #28]	; (8005608 <TIM_Base_SetConfig+0xb8>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d103      	bne.n	80055f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	691a      	ldr	r2, [r3, #16]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	615a      	str	r2, [r3, #20]
}
 80055fe:	bf00      	nop
 8005600:	3714      	adds	r7, #20
 8005602:	46bd      	mov	sp, r7
 8005604:	bc80      	pop	{r7}
 8005606:	4770      	bx	lr
 8005608:	40012c00 	.word	0x40012c00
 800560c:	40000400 	.word	0x40000400
 8005610:	40000800 	.word	0x40000800

08005614 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005614:	b480      	push	{r7}
 8005616:	b087      	sub	sp, #28
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6a1b      	ldr	r3, [r3, #32]
 8005624:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6a1b      	ldr	r3, [r3, #32]
 800562a:	f023 0201 	bic.w	r2, r3, #1
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800563e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	011b      	lsls	r3, r3, #4
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	4313      	orrs	r3, r2
 8005648:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	f023 030a 	bic.w	r3, r3, #10
 8005650:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005652:	697a      	ldr	r2, [r7, #20]
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	4313      	orrs	r3, r2
 8005658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	693a      	ldr	r2, [r7, #16]
 800565e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	697a      	ldr	r2, [r7, #20]
 8005664:	621a      	str	r2, [r3, #32]
}
 8005666:	bf00      	nop
 8005668:	371c      	adds	r7, #28
 800566a:	46bd      	mov	sp, r7
 800566c:	bc80      	pop	{r7}
 800566e:	4770      	bx	lr

08005670 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005670:	b480      	push	{r7}
 8005672:	b087      	sub	sp, #28
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6a1b      	ldr	r3, [r3, #32]
 8005680:	f023 0210 	bic.w	r2, r3, #16
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	699b      	ldr	r3, [r3, #24]
 800568c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6a1b      	ldr	r3, [r3, #32]
 8005692:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800569a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	031b      	lsls	r3, r3, #12
 80056a0:	697a      	ldr	r2, [r7, #20]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	011b      	lsls	r3, r3, #4
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	621a      	str	r2, [r3, #32]
}
 80056c4:	bf00      	nop
 80056c6:	371c      	adds	r7, #28
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bc80      	pop	{r7}
 80056cc:	4770      	bx	lr

080056ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056ce:	b480      	push	{r7}
 80056d0:	b085      	sub	sp, #20
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
 80056d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056e6:	683a      	ldr	r2, [r7, #0]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	f043 0307 	orr.w	r3, r3, #7
 80056f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	609a      	str	r2, [r3, #8]
}
 80056f8:	bf00      	nop
 80056fa:	3714      	adds	r7, #20
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bc80      	pop	{r7}
 8005700:	4770      	bx	lr

08005702 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005702:	b480      	push	{r7}
 8005704:	b087      	sub	sp, #28
 8005706:	af00      	add	r7, sp, #0
 8005708:	60f8      	str	r0, [r7, #12]
 800570a:	60b9      	str	r1, [r7, #8]
 800570c:	607a      	str	r2, [r7, #4]
 800570e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800571c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	021a      	lsls	r2, r3, #8
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	431a      	orrs	r2, r3
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	4313      	orrs	r3, r2
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	4313      	orrs	r3, r2
 800572e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	609a      	str	r2, [r3, #8]
}
 8005736:	bf00      	nop
 8005738:	371c      	adds	r7, #28
 800573a:	46bd      	mov	sp, r7
 800573c:	bc80      	pop	{r7}
 800573e:	4770      	bx	lr

08005740 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005750:	2b01      	cmp	r3, #1
 8005752:	d101      	bne.n	8005758 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005754:	2302      	movs	r3, #2
 8005756:	e032      	b.n	80057be <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2202      	movs	r2, #2
 8005764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800577e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	4313      	orrs	r3, r2
 8005788:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005790:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	4313      	orrs	r3, r2
 800579a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68ba      	ldr	r2, [r7, #8]
 80057aa:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3714      	adds	r7, #20
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bc80      	pop	{r7}
 80057c6:	4770      	bx	lr

080057c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bc80      	pop	{r7}
 80057d8:	4770      	bx	lr

080057da <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057da:	b480      	push	{r7}
 80057dc:	b083      	sub	sp, #12
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057e2:	bf00      	nop
 80057e4:	370c      	adds	r7, #12
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bc80      	pop	{r7}
 80057ea:	4770      	bx	lr

080057ec <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80057ec:	b084      	sub	sp, #16
 80057ee:	b480      	push	{r7}
 80057f0:	b083      	sub	sp, #12
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
 80057f6:	f107 0014 	add.w	r0, r7, #20
 80057fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	bc80      	pop	{r7}
 8005808:	b004      	add	sp, #16
 800580a:	4770      	bx	lr

0800580c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800580c:	b480      	push	{r7}
 800580e:	b085      	sub	sp, #20
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005814:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005818:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005820:	b29a      	uxth	r2, r3
 8005822:	89fb      	ldrh	r3, [r7, #14]
 8005824:	4313      	orrs	r3, r2
 8005826:	b29a      	uxth	r2, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	3714      	adds	r7, #20
 8005834:	46bd      	mov	sp, r7
 8005836:	bc80      	pop	{r7}
 8005838:	4770      	bx	lr

0800583a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800583a:	b480      	push	{r7}
 800583c:	b085      	sub	sp, #20
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005842:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005846:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800584e:	b29b      	uxth	r3, r3
 8005850:	b21a      	sxth	r2, r3
 8005852:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005856:	43db      	mvns	r3, r3
 8005858:	b21b      	sxth	r3, r3
 800585a:	4013      	ands	r3, r2
 800585c:	b21b      	sxth	r3, r3
 800585e:	b29a      	uxth	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	3714      	adds	r7, #20
 800586c:	46bd      	mov	sp, r7
 800586e:	bc80      	pop	{r7}
 8005870:	4770      	bx	lr

08005872 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005872:	b480      	push	{r7}
 8005874:	b083      	sub	sp, #12
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
 800587a:	460b      	mov	r3, r1
 800587c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	bc80      	pop	{r7}
 8005888:	4770      	bx	lr

0800588a <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800588a:	b084      	sub	sp, #16
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	f107 0014 	add.w	r0, r7, #20
 8005898:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f7ff ffa5 	bl	800580c <USB_EnableGlobalInt>

  return HAL_OK;
 80058c2:	2300      	movs	r3, #0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3708      	adds	r7, #8
 80058c8:	46bd      	mov	sp, r7
 80058ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058ce:	b004      	add	sp, #16
 80058d0:	4770      	bx	lr
	...

080058d4 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80058d4:	b490      	push	{r4, r7}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80058de:	2300      	movs	r3, #0
 80058e0:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	4413      	add	r3, r2
 80058ec:	881b      	ldrh	r3, [r3, #0]
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80058f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058f8:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	78db      	ldrb	r3, [r3, #3]
 80058fe:	2b03      	cmp	r3, #3
 8005900:	d819      	bhi.n	8005936 <USB_ActivateEndpoint+0x62>
 8005902:	a201      	add	r2, pc, #4	; (adr r2, 8005908 <USB_ActivateEndpoint+0x34>)
 8005904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005908:	08005919 	.word	0x08005919
 800590c:	0800592d 	.word	0x0800592d
 8005910:	0800593d 	.word	0x0800593d
 8005914:	08005923 	.word	0x08005923
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005918:	89bb      	ldrh	r3, [r7, #12]
 800591a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800591e:	81bb      	strh	r3, [r7, #12]
      break;
 8005920:	e00d      	b.n	800593e <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005922:	89bb      	ldrh	r3, [r7, #12]
 8005924:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005928:	81bb      	strh	r3, [r7, #12]
      break;
 800592a:	e008      	b.n	800593e <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800592c:	89bb      	ldrh	r3, [r7, #12]
 800592e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005932:	81bb      	strh	r3, [r7, #12]
      break;
 8005934:	e003      	b.n	800593e <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	73fb      	strb	r3, [r7, #15]
      break;
 800593a:	e000      	b.n	800593e <USB_ActivateEndpoint+0x6a>
      break;
 800593c:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	441a      	add	r2, r3
 8005948:	89bb      	ldrh	r3, [r7, #12]
 800594a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800594e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005952:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800595a:	b29b      	uxth	r3, r3
 800595c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	4413      	add	r3, r2
 8005968:	881b      	ldrh	r3, [r3, #0]
 800596a:	b29b      	uxth	r3, r3
 800596c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005974:	b29a      	uxth	r2, r3
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	b29b      	uxth	r3, r3
 800597c:	4313      	orrs	r3, r2
 800597e:	b29c      	uxth	r4, r3
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	441a      	add	r2, r3
 800598a:	4b8a      	ldr	r3, [pc, #552]	; (8005bb4 <USB_ActivateEndpoint+0x2e0>)
 800598c:	4323      	orrs	r3, r4
 800598e:	b29b      	uxth	r3, r3
 8005990:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	7b1b      	ldrb	r3, [r3, #12]
 8005996:	2b00      	cmp	r3, #0
 8005998:	f040 8112 	bne.w	8005bc0 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	785b      	ldrb	r3, [r3, #1]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d067      	beq.n	8005a74 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80059a4:	687c      	ldr	r4, [r7, #4]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	441c      	add	r4, r3
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	011b      	lsls	r3, r3, #4
 80059b6:	4423      	add	r3, r4
 80059b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059bc:	461c      	mov	r4, r3
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	88db      	ldrh	r3, [r3, #6]
 80059c2:	085b      	lsrs	r3, r3, #1
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	005b      	lsls	r3, r3, #1
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	4413      	add	r3, r2
 80059d6:	881b      	ldrh	r3, [r3, #0]
 80059d8:	b29c      	uxth	r4, r3
 80059da:	4623      	mov	r3, r4
 80059dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d014      	beq.n	8005a0e <USB_ActivateEndpoint+0x13a>
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	4413      	add	r3, r2
 80059ee:	881b      	ldrh	r3, [r3, #0]
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059fa:	b29c      	uxth	r4, r3
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	441a      	add	r2, r3
 8005a06:	4b6c      	ldr	r3, [pc, #432]	; (8005bb8 <USB_ActivateEndpoint+0x2e4>)
 8005a08:	4323      	orrs	r3, r4
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	78db      	ldrb	r3, [r3, #3]
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d018      	beq.n	8005a48 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	4413      	add	r3, r2
 8005a20:	881b      	ldrh	r3, [r3, #0]
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a2c:	b29c      	uxth	r4, r3
 8005a2e:	f084 0320 	eor.w	r3, r4, #32
 8005a32:	b29c      	uxth	r4, r3
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	441a      	add	r2, r3
 8005a3e:	4b5d      	ldr	r3, [pc, #372]	; (8005bb4 <USB_ActivateEndpoint+0x2e0>)
 8005a40:	4323      	orrs	r3, r4
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	8013      	strh	r3, [r2, #0]
 8005a46:	e22b      	b.n	8005ea0 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	4413      	add	r3, r2
 8005a52:	881b      	ldrh	r3, [r3, #0]
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a5e:	b29c      	uxth	r4, r3
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	441a      	add	r2, r3
 8005a6a:	4b52      	ldr	r3, [pc, #328]	; (8005bb4 <USB_ActivateEndpoint+0x2e0>)
 8005a6c:	4323      	orrs	r3, r4
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	8013      	strh	r3, [r2, #0]
 8005a72:	e215      	b.n	8005ea0 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005a74:	687c      	ldr	r4, [r7, #4]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	441c      	add	r4, r3
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	011b      	lsls	r3, r3, #4
 8005a86:	4423      	add	r3, r4
 8005a88:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005a8c:	461c      	mov	r4, r3
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	88db      	ldrh	r3, [r3, #6]
 8005a92:	085b      	lsrs	r3, r3, #1
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	005b      	lsls	r3, r3, #1
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005a9c:	687c      	ldr	r4, [r7, #4]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	441c      	add	r4, r3
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	011b      	lsls	r3, r3, #4
 8005aae:	4423      	add	r3, r4
 8005ab0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ab4:	461c      	mov	r4, r3
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d10e      	bne.n	8005adc <USB_ActivateEndpoint+0x208>
 8005abe:	8823      	ldrh	r3, [r4, #0]
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	8023      	strh	r3, [r4, #0]
 8005aca:	8823      	ldrh	r3, [r4, #0]
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ad2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	8023      	strh	r3, [r4, #0]
 8005ada:	e02d      	b.n	8005b38 <USB_ActivateEndpoint+0x264>
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	2b3e      	cmp	r3, #62	; 0x3e
 8005ae2:	d812      	bhi.n	8005b0a <USB_ActivateEndpoint+0x236>
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	085b      	lsrs	r3, r3, #1
 8005aea:	60bb      	str	r3, [r7, #8]
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	f003 0301 	and.w	r3, r3, #1
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d002      	beq.n	8005afe <USB_ActivateEndpoint+0x22a>
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	3301      	adds	r3, #1
 8005afc:	60bb      	str	r3, [r7, #8]
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	029b      	lsls	r3, r3, #10
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	8023      	strh	r3, [r4, #0]
 8005b08:	e016      	b.n	8005b38 <USB_ActivateEndpoint+0x264>
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	095b      	lsrs	r3, r3, #5
 8005b10:	60bb      	str	r3, [r7, #8]
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	f003 031f 	and.w	r3, r3, #31
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d102      	bne.n	8005b24 <USB_ActivateEndpoint+0x250>
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	3b01      	subs	r3, #1
 8005b22:	60bb      	str	r3, [r7, #8]
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	029b      	lsls	r3, r3, #10
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	4413      	add	r3, r2
 8005b42:	881b      	ldrh	r3, [r3, #0]
 8005b44:	b29c      	uxth	r4, r3
 8005b46:	4623      	mov	r3, r4
 8005b48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d014      	beq.n	8005b7a <USB_ActivateEndpoint+0x2a6>
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	4413      	add	r3, r2
 8005b5a:	881b      	ldrh	r3, [r3, #0]
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b66:	b29c      	uxth	r4, r3
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	441a      	add	r2, r3
 8005b72:	4b12      	ldr	r3, [pc, #72]	; (8005bbc <USB_ActivateEndpoint+0x2e8>)
 8005b74:	4323      	orrs	r3, r4
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	4413      	add	r3, r2
 8005b84:	881b      	ldrh	r3, [r3, #0]
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b90:	b29c      	uxth	r4, r3
 8005b92:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005b96:	b29c      	uxth	r4, r3
 8005b98:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005b9c:	b29c      	uxth	r4, r3
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	441a      	add	r2, r3
 8005ba8:	4b02      	ldr	r3, [pc, #8]	; (8005bb4 <USB_ActivateEndpoint+0x2e0>)
 8005baa:	4323      	orrs	r3, r4
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	8013      	strh	r3, [r2, #0]
 8005bb0:	e176      	b.n	8005ea0 <USB_ActivateEndpoint+0x5cc>
 8005bb2:	bf00      	nop
 8005bb4:	ffff8080 	.word	0xffff8080
 8005bb8:	ffff80c0 	.word	0xffff80c0
 8005bbc:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	4413      	add	r3, r2
 8005bca:	881b      	ldrh	r3, [r3, #0]
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bd6:	b29c      	uxth	r4, r3
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	441a      	add	r2, r3
 8005be2:	4b96      	ldr	r3, [pc, #600]	; (8005e3c <USB_ActivateEndpoint+0x568>)
 8005be4:	4323      	orrs	r3, r4
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005bea:	687c      	ldr	r4, [r7, #4]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	441c      	add	r4, r3
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	011b      	lsls	r3, r3, #4
 8005bfc:	4423      	add	r3, r4
 8005bfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c02:	461c      	mov	r4, r3
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	891b      	ldrh	r3, [r3, #8]
 8005c08:	085b      	lsrs	r3, r3, #1
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	005b      	lsls	r3, r3, #1
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	8023      	strh	r3, [r4, #0]
 8005c12:	687c      	ldr	r4, [r7, #4]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	441c      	add	r4, r3
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	011b      	lsls	r3, r3, #4
 8005c24:	4423      	add	r3, r4
 8005c26:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005c2a:	461c      	mov	r4, r3
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	895b      	ldrh	r3, [r3, #10]
 8005c30:	085b      	lsrs	r3, r3, #1
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	005b      	lsls	r3, r3, #1
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	785b      	ldrb	r3, [r3, #1]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	f040 8088 	bne.w	8005d54 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	4413      	add	r3, r2
 8005c4e:	881b      	ldrh	r3, [r3, #0]
 8005c50:	b29c      	uxth	r4, r3
 8005c52:	4623      	mov	r3, r4
 8005c54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d014      	beq.n	8005c86 <USB_ActivateEndpoint+0x3b2>
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	4413      	add	r3, r2
 8005c66:	881b      	ldrh	r3, [r3, #0]
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c72:	b29c      	uxth	r4, r3
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	441a      	add	r2, r3
 8005c7e:	4b70      	ldr	r3, [pc, #448]	; (8005e40 <USB_ActivateEndpoint+0x56c>)
 8005c80:	4323      	orrs	r3, r4
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	4413      	add	r3, r2
 8005c90:	881b      	ldrh	r3, [r3, #0]
 8005c92:	b29c      	uxth	r4, r3
 8005c94:	4623      	mov	r3, r4
 8005c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d014      	beq.n	8005cc8 <USB_ActivateEndpoint+0x3f4>
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	4413      	add	r3, r2
 8005ca8:	881b      	ldrh	r3, [r3, #0]
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cb4:	b29c      	uxth	r4, r3
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	441a      	add	r2, r3
 8005cc0:	4b60      	ldr	r3, [pc, #384]	; (8005e44 <USB_ActivateEndpoint+0x570>)
 8005cc2:	4323      	orrs	r3, r4
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	4413      	add	r3, r2
 8005cd2:	881b      	ldrh	r3, [r3, #0]
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cde:	b29c      	uxth	r4, r3
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	441a      	add	r2, r3
 8005cea:	4b56      	ldr	r3, [pc, #344]	; (8005e44 <USB_ActivateEndpoint+0x570>)
 8005cec:	4323      	orrs	r3, r4
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	4413      	add	r3, r2
 8005cfc:	881b      	ldrh	r3, [r3, #0]
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d08:	b29c      	uxth	r4, r3
 8005d0a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005d0e:	b29c      	uxth	r4, r3
 8005d10:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005d14:	b29c      	uxth	r4, r3
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	441a      	add	r2, r3
 8005d20:	4b49      	ldr	r3, [pc, #292]	; (8005e48 <USB_ActivateEndpoint+0x574>)
 8005d22:	4323      	orrs	r3, r4
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	4413      	add	r3, r2
 8005d32:	881b      	ldrh	r3, [r3, #0]
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d3e:	b29c      	uxth	r4, r3
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	441a      	add	r2, r3
 8005d4a:	4b3f      	ldr	r3, [pc, #252]	; (8005e48 <USB_ActivateEndpoint+0x574>)
 8005d4c:	4323      	orrs	r3, r4
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	8013      	strh	r3, [r2, #0]
 8005d52:	e0a5      	b.n	8005ea0 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	4413      	add	r3, r2
 8005d5e:	881b      	ldrh	r3, [r3, #0]
 8005d60:	b29c      	uxth	r4, r3
 8005d62:	4623      	mov	r3, r4
 8005d64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d014      	beq.n	8005d96 <USB_ActivateEndpoint+0x4c2>
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	4413      	add	r3, r2
 8005d76:	881b      	ldrh	r3, [r3, #0]
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d82:	b29c      	uxth	r4, r3
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	441a      	add	r2, r3
 8005d8e:	4b2c      	ldr	r3, [pc, #176]	; (8005e40 <USB_ActivateEndpoint+0x56c>)
 8005d90:	4323      	orrs	r3, r4
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	4413      	add	r3, r2
 8005da0:	881b      	ldrh	r3, [r3, #0]
 8005da2:	b29c      	uxth	r4, r3
 8005da4:	4623      	mov	r3, r4
 8005da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d014      	beq.n	8005dd8 <USB_ActivateEndpoint+0x504>
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	4413      	add	r3, r2
 8005db8:	881b      	ldrh	r3, [r3, #0]
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dc4:	b29c      	uxth	r4, r3
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	441a      	add	r2, r3
 8005dd0:	4b1c      	ldr	r3, [pc, #112]	; (8005e44 <USB_ActivateEndpoint+0x570>)
 8005dd2:	4323      	orrs	r3, r4
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	4413      	add	r3, r2
 8005de2:	881b      	ldrh	r3, [r3, #0]
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dee:	b29c      	uxth	r4, r3
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	441a      	add	r2, r3
 8005dfa:	4b11      	ldr	r3, [pc, #68]	; (8005e40 <USB_ActivateEndpoint+0x56c>)
 8005dfc:	4323      	orrs	r3, r4
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	78db      	ldrb	r3, [r3, #3]
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d020      	beq.n	8005e4c <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	4413      	add	r3, r2
 8005e14:	881b      	ldrh	r3, [r3, #0]
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e20:	b29c      	uxth	r4, r3
 8005e22:	f084 0320 	eor.w	r3, r4, #32
 8005e26:	b29c      	uxth	r4, r3
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	441a      	add	r2, r3
 8005e32:	4b05      	ldr	r3, [pc, #20]	; (8005e48 <USB_ActivateEndpoint+0x574>)
 8005e34:	4323      	orrs	r3, r4
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	8013      	strh	r3, [r2, #0]
 8005e3a:	e01c      	b.n	8005e76 <USB_ActivateEndpoint+0x5a2>
 8005e3c:	ffff8180 	.word	0xffff8180
 8005e40:	ffffc080 	.word	0xffffc080
 8005e44:	ffff80c0 	.word	0xffff80c0
 8005e48:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	4413      	add	r3, r2
 8005e56:	881b      	ldrh	r3, [r3, #0]
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e62:	b29c      	uxth	r4, r3
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	441a      	add	r2, r3
 8005e6e:	4b0f      	ldr	r3, [pc, #60]	; (8005eac <USB_ActivateEndpoint+0x5d8>)
 8005e70:	4323      	orrs	r3, r4
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	4413      	add	r3, r2
 8005e80:	881b      	ldrh	r3, [r3, #0]
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e8c:	b29c      	uxth	r4, r3
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	441a      	add	r2, r3
 8005e98:	4b04      	ldr	r3, [pc, #16]	; (8005eac <USB_ActivateEndpoint+0x5d8>)
 8005e9a:	4323      	orrs	r3, r4
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3710      	adds	r7, #16
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bc90      	pop	{r4, r7}
 8005eaa:	4770      	bx	lr
 8005eac:	ffff8080 	.word	0xffff8080

08005eb0 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005eb0:	b490      	push	{r4, r7}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	7b1b      	ldrb	r3, [r3, #12]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d171      	bne.n	8005fa6 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	785b      	ldrb	r3, [r3, #1]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d036      	beq.n	8005f38 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	4413      	add	r3, r2
 8005ed4:	881b      	ldrh	r3, [r3, #0]
 8005ed6:	b29c      	uxth	r4, r3
 8005ed8:	4623      	mov	r3, r4
 8005eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d014      	beq.n	8005f0c <USB_DeactivateEndpoint+0x5c>
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	4413      	add	r3, r2
 8005eec:	881b      	ldrh	r3, [r3, #0]
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ef4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ef8:	b29c      	uxth	r4, r3
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	441a      	add	r2, r3
 8005f04:	4b6b      	ldr	r3, [pc, #428]	; (80060b4 <USB_DeactivateEndpoint+0x204>)
 8005f06:	4323      	orrs	r3, r4
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	4413      	add	r3, r2
 8005f16:	881b      	ldrh	r3, [r3, #0]
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f22:	b29c      	uxth	r4, r3
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	441a      	add	r2, r3
 8005f2e:	4b62      	ldr	r3, [pc, #392]	; (80060b8 <USB_DeactivateEndpoint+0x208>)
 8005f30:	4323      	orrs	r3, r4
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	8013      	strh	r3, [r2, #0]
 8005f36:	e144      	b.n	80061c2 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	4413      	add	r3, r2
 8005f42:	881b      	ldrh	r3, [r3, #0]
 8005f44:	b29c      	uxth	r4, r3
 8005f46:	4623      	mov	r3, r4
 8005f48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d014      	beq.n	8005f7a <USB_DeactivateEndpoint+0xca>
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	4413      	add	r3, r2
 8005f5a:	881b      	ldrh	r3, [r3, #0]
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f66:	b29c      	uxth	r4, r3
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	441a      	add	r2, r3
 8005f72:	4b52      	ldr	r3, [pc, #328]	; (80060bc <USB_DeactivateEndpoint+0x20c>)
 8005f74:	4323      	orrs	r3, r4
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	4413      	add	r3, r2
 8005f84:	881b      	ldrh	r3, [r3, #0]
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f90:	b29c      	uxth	r4, r3
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	441a      	add	r2, r3
 8005f9c:	4b46      	ldr	r3, [pc, #280]	; (80060b8 <USB_DeactivateEndpoint+0x208>)
 8005f9e:	4323      	orrs	r3, r4
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	8013      	strh	r3, [r2, #0]
 8005fa4:	e10d      	b.n	80061c2 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	785b      	ldrb	r3, [r3, #1]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	f040 8088 	bne.w	80060c0 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	4413      	add	r3, r2
 8005fba:	881b      	ldrh	r3, [r3, #0]
 8005fbc:	b29c      	uxth	r4, r3
 8005fbe:	4623      	mov	r3, r4
 8005fc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d014      	beq.n	8005ff2 <USB_DeactivateEndpoint+0x142>
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	4413      	add	r3, r2
 8005fd2:	881b      	ldrh	r3, [r3, #0]
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fde:	b29c      	uxth	r4, r3
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	441a      	add	r2, r3
 8005fea:	4b34      	ldr	r3, [pc, #208]	; (80060bc <USB_DeactivateEndpoint+0x20c>)
 8005fec:	4323      	orrs	r3, r4
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	4413      	add	r3, r2
 8005ffc:	881b      	ldrh	r3, [r3, #0]
 8005ffe:	b29c      	uxth	r4, r3
 8006000:	4623      	mov	r3, r4
 8006002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006006:	2b00      	cmp	r3, #0
 8006008:	d014      	beq.n	8006034 <USB_DeactivateEndpoint+0x184>
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	4413      	add	r3, r2
 8006014:	881b      	ldrh	r3, [r3, #0]
 8006016:	b29b      	uxth	r3, r3
 8006018:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800601c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006020:	b29c      	uxth	r4, r3
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	441a      	add	r2, r3
 800602c:	4b21      	ldr	r3, [pc, #132]	; (80060b4 <USB_DeactivateEndpoint+0x204>)
 800602e:	4323      	orrs	r3, r4
 8006030:	b29b      	uxth	r3, r3
 8006032:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	4413      	add	r3, r2
 800603e:	881b      	ldrh	r3, [r3, #0]
 8006040:	b29b      	uxth	r3, r3
 8006042:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800604a:	b29c      	uxth	r4, r3
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	441a      	add	r2, r3
 8006056:	4b17      	ldr	r3, [pc, #92]	; (80060b4 <USB_DeactivateEndpoint+0x204>)
 8006058:	4323      	orrs	r3, r4
 800605a:	b29b      	uxth	r3, r3
 800605c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	4413      	add	r3, r2
 8006068:	881b      	ldrh	r3, [r3, #0]
 800606a:	b29b      	uxth	r3, r3
 800606c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006070:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006074:	b29c      	uxth	r4, r3
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	441a      	add	r2, r3
 8006080:	4b0d      	ldr	r3, [pc, #52]	; (80060b8 <USB_DeactivateEndpoint+0x208>)
 8006082:	4323      	orrs	r3, r4
 8006084:	b29b      	uxth	r3, r3
 8006086:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	4413      	add	r3, r2
 8006092:	881b      	ldrh	r3, [r3, #0]
 8006094:	b29b      	uxth	r3, r3
 8006096:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800609a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800609e:	b29c      	uxth	r4, r3
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	441a      	add	r2, r3
 80060aa:	4b03      	ldr	r3, [pc, #12]	; (80060b8 <USB_DeactivateEndpoint+0x208>)
 80060ac:	4323      	orrs	r3, r4
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	8013      	strh	r3, [r2, #0]
 80060b2:	e086      	b.n	80061c2 <USB_DeactivateEndpoint+0x312>
 80060b4:	ffff80c0 	.word	0xffff80c0
 80060b8:	ffff8080 	.word	0xffff8080
 80060bc:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4413      	add	r3, r2
 80060ca:	881b      	ldrh	r3, [r3, #0]
 80060cc:	b29c      	uxth	r4, r3
 80060ce:	4623      	mov	r3, r4
 80060d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d014      	beq.n	8006102 <USB_DeactivateEndpoint+0x252>
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	4413      	add	r3, r2
 80060e2:	881b      	ldrh	r3, [r3, #0]
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ee:	b29c      	uxth	r4, r3
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	441a      	add	r2, r3
 80060fa:	4b35      	ldr	r3, [pc, #212]	; (80061d0 <USB_DeactivateEndpoint+0x320>)
 80060fc:	4323      	orrs	r3, r4
 80060fe:	b29b      	uxth	r3, r3
 8006100:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	4413      	add	r3, r2
 800610c:	881b      	ldrh	r3, [r3, #0]
 800610e:	b29c      	uxth	r4, r3
 8006110:	4623      	mov	r3, r4
 8006112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006116:	2b00      	cmp	r3, #0
 8006118:	d014      	beq.n	8006144 <USB_DeactivateEndpoint+0x294>
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	4413      	add	r3, r2
 8006124:	881b      	ldrh	r3, [r3, #0]
 8006126:	b29b      	uxth	r3, r3
 8006128:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800612c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006130:	b29c      	uxth	r4, r3
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	441a      	add	r2, r3
 800613c:	4b25      	ldr	r3, [pc, #148]	; (80061d4 <USB_DeactivateEndpoint+0x324>)
 800613e:	4323      	orrs	r3, r4
 8006140:	b29b      	uxth	r3, r3
 8006142:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	4413      	add	r3, r2
 800614e:	881b      	ldrh	r3, [r3, #0]
 8006150:	b29b      	uxth	r3, r3
 8006152:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800615a:	b29c      	uxth	r4, r3
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	441a      	add	r2, r3
 8006166:	4b1a      	ldr	r3, [pc, #104]	; (80061d0 <USB_DeactivateEndpoint+0x320>)
 8006168:	4323      	orrs	r3, r4
 800616a:	b29b      	uxth	r3, r3
 800616c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	4413      	add	r3, r2
 8006178:	881b      	ldrh	r3, [r3, #0]
 800617a:	b29b      	uxth	r3, r3
 800617c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006180:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006184:	b29c      	uxth	r4, r3
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	441a      	add	r2, r3
 8006190:	4b11      	ldr	r3, [pc, #68]	; (80061d8 <USB_DeactivateEndpoint+0x328>)
 8006192:	4323      	orrs	r3, r4
 8006194:	b29b      	uxth	r3, r3
 8006196:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	4413      	add	r3, r2
 80061a2:	881b      	ldrh	r3, [r3, #0]
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ae:	b29c      	uxth	r4, r3
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	441a      	add	r2, r3
 80061ba:	4b07      	ldr	r3, [pc, #28]	; (80061d8 <USB_DeactivateEndpoint+0x328>)
 80061bc:	4323      	orrs	r3, r4
 80061be:	b29b      	uxth	r3, r3
 80061c0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3708      	adds	r7, #8
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bc90      	pop	{r4, r7}
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop
 80061d0:	ffffc080 	.word	0xffffc080
 80061d4:	ffff80c0 	.word	0xffff80c0
 80061d8:	ffff8080 	.word	0xffff8080

080061dc <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80061dc:	b590      	push	{r4, r7, lr}
 80061de:	b08d      	sub	sp, #52	; 0x34
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	785b      	ldrb	r3, [r3, #1]
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	f040 8160 	bne.w	80064b0 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	699a      	ldr	r2, [r3, #24]
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d909      	bls.n	8006210 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	699a      	ldr	r2, [r3, #24]
 8006206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006208:	1ad2      	subs	r2, r2, r3
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	619a      	str	r2, [r3, #24]
 800620e:	e005      	b.n	800621c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	699b      	ldr	r3, [r3, #24]
 8006214:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	2200      	movs	r2, #0
 800621a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	7b1b      	ldrb	r3, [r3, #12]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d119      	bne.n	8006258 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	6959      	ldr	r1, [r3, #20]
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	88da      	ldrh	r2, [r3, #6]
 800622c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622e:	b29b      	uxth	r3, r3
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 fba2 	bl	800697a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006236:	687c      	ldr	r4, [r7, #4]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800623e:	b29b      	uxth	r3, r3
 8006240:	441c      	add	r4, r3
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	011b      	lsls	r3, r3, #4
 8006248:	4423      	add	r3, r4
 800624a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800624e:	461c      	mov	r4, r3
 8006250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006252:	b29b      	uxth	r3, r3
 8006254:	8023      	strh	r3, [r4, #0]
 8006256:	e10f      	b.n	8006478 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	4413      	add	r3, r2
 8006262:	881b      	ldrh	r3, [r3, #0]
 8006264:	b29b      	uxth	r3, r3
 8006266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800626a:	2b00      	cmp	r3, #0
 800626c:	d065      	beq.n	800633a <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800626e:	687c      	ldr	r4, [r7, #4]
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	785b      	ldrb	r3, [r3, #1]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d148      	bne.n	800630a <USB_EPStartXfer+0x12e>
 8006278:	687c      	ldr	r4, [r7, #4]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006280:	b29b      	uxth	r3, r3
 8006282:	441c      	add	r4, r3
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	011b      	lsls	r3, r3, #4
 800628a:	4423      	add	r3, r4
 800628c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006290:	461c      	mov	r4, r3
 8006292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006294:	2b00      	cmp	r3, #0
 8006296:	d10e      	bne.n	80062b6 <USB_EPStartXfer+0xda>
 8006298:	8823      	ldrh	r3, [r4, #0]
 800629a:	b29b      	uxth	r3, r3
 800629c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	8023      	strh	r3, [r4, #0]
 80062a4:	8823      	ldrh	r3, [r4, #0]
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	8023      	strh	r3, [r4, #0]
 80062b4:	e03d      	b.n	8006332 <USB_EPStartXfer+0x156>
 80062b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b8:	2b3e      	cmp	r3, #62	; 0x3e
 80062ba:	d810      	bhi.n	80062de <USB_EPStartXfer+0x102>
 80062bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062be:	085b      	lsrs	r3, r3, #1
 80062c0:	627b      	str	r3, [r7, #36]	; 0x24
 80062c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c4:	f003 0301 	and.w	r3, r3, #1
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d002      	beq.n	80062d2 <USB_EPStartXfer+0xf6>
 80062cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ce:	3301      	adds	r3, #1
 80062d0:	627b      	str	r3, [r7, #36]	; 0x24
 80062d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	029b      	lsls	r3, r3, #10
 80062d8:	b29b      	uxth	r3, r3
 80062da:	8023      	strh	r3, [r4, #0]
 80062dc:	e029      	b.n	8006332 <USB_EPStartXfer+0x156>
 80062de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e0:	095b      	lsrs	r3, r3, #5
 80062e2:	627b      	str	r3, [r7, #36]	; 0x24
 80062e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e6:	f003 031f 	and.w	r3, r3, #31
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d102      	bne.n	80062f4 <USB_EPStartXfer+0x118>
 80062ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f0:	3b01      	subs	r3, #1
 80062f2:	627b      	str	r3, [r7, #36]	; 0x24
 80062f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	029b      	lsls	r3, r3, #10
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006300:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006304:	b29b      	uxth	r3, r3
 8006306:	8023      	strh	r3, [r4, #0]
 8006308:	e013      	b.n	8006332 <USB_EPStartXfer+0x156>
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	785b      	ldrb	r3, [r3, #1]
 800630e:	2b01      	cmp	r3, #1
 8006310:	d10f      	bne.n	8006332 <USB_EPStartXfer+0x156>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006318:	b29b      	uxth	r3, r3
 800631a:	441c      	add	r4, r3
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	011b      	lsls	r3, r3, #4
 8006322:	4423      	add	r3, r4
 8006324:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006328:	60fb      	str	r3, [r7, #12]
 800632a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632c:	b29a      	uxth	r2, r3
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	895b      	ldrh	r3, [r3, #10]
 8006336:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006338:	e063      	b.n	8006402 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	785b      	ldrb	r3, [r3, #1]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d148      	bne.n	80063d4 <USB_EPStartXfer+0x1f8>
 8006342:	687c      	ldr	r4, [r7, #4]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800634a:	b29b      	uxth	r3, r3
 800634c:	441c      	add	r4, r3
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	011b      	lsls	r3, r3, #4
 8006354:	4423      	add	r3, r4
 8006356:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800635a:	461c      	mov	r4, r3
 800635c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635e:	2b00      	cmp	r3, #0
 8006360:	d10e      	bne.n	8006380 <USB_EPStartXfer+0x1a4>
 8006362:	8823      	ldrh	r3, [r4, #0]
 8006364:	b29b      	uxth	r3, r3
 8006366:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800636a:	b29b      	uxth	r3, r3
 800636c:	8023      	strh	r3, [r4, #0]
 800636e:	8823      	ldrh	r3, [r4, #0]
 8006370:	b29b      	uxth	r3, r3
 8006372:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006376:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800637a:	b29b      	uxth	r3, r3
 800637c:	8023      	strh	r3, [r4, #0]
 800637e:	e03d      	b.n	80063fc <USB_EPStartXfer+0x220>
 8006380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006382:	2b3e      	cmp	r3, #62	; 0x3e
 8006384:	d810      	bhi.n	80063a8 <USB_EPStartXfer+0x1cc>
 8006386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006388:	085b      	lsrs	r3, r3, #1
 800638a:	623b      	str	r3, [r7, #32]
 800638c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638e:	f003 0301 	and.w	r3, r3, #1
 8006392:	2b00      	cmp	r3, #0
 8006394:	d002      	beq.n	800639c <USB_EPStartXfer+0x1c0>
 8006396:	6a3b      	ldr	r3, [r7, #32]
 8006398:	3301      	adds	r3, #1
 800639a:	623b      	str	r3, [r7, #32]
 800639c:	6a3b      	ldr	r3, [r7, #32]
 800639e:	b29b      	uxth	r3, r3
 80063a0:	029b      	lsls	r3, r3, #10
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	8023      	strh	r3, [r4, #0]
 80063a6:	e029      	b.n	80063fc <USB_EPStartXfer+0x220>
 80063a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063aa:	095b      	lsrs	r3, r3, #5
 80063ac:	623b      	str	r3, [r7, #32]
 80063ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b0:	f003 031f 	and.w	r3, r3, #31
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d102      	bne.n	80063be <USB_EPStartXfer+0x1e2>
 80063b8:	6a3b      	ldr	r3, [r7, #32]
 80063ba:	3b01      	subs	r3, #1
 80063bc:	623b      	str	r3, [r7, #32]
 80063be:	6a3b      	ldr	r3, [r7, #32]
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	029b      	lsls	r3, r3, #10
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	8023      	strh	r3, [r4, #0]
 80063d2:	e013      	b.n	80063fc <USB_EPStartXfer+0x220>
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	785b      	ldrb	r3, [r3, #1]
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d10f      	bne.n	80063fc <USB_EPStartXfer+0x220>
 80063dc:	687c      	ldr	r4, [r7, #4]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	441c      	add	r4, r3
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	011b      	lsls	r3, r3, #4
 80063ee:	4423      	add	r3, r4
 80063f0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80063f4:	461c      	mov	r4, r3
 80063f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	891b      	ldrh	r3, [r3, #8]
 8006400:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	6959      	ldr	r1, [r3, #20]
 8006406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006408:	b29b      	uxth	r3, r3
 800640a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f000 fab4 	bl	800697a <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	785b      	ldrb	r3, [r3, #1]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d115      	bne.n	8006446 <USB_EPStartXfer+0x26a>
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	4413      	add	r3, r2
 8006424:	881b      	ldrh	r3, [r3, #0]
 8006426:	b29b      	uxth	r3, r3
 8006428:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800642c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006430:	b29c      	uxth	r4, r3
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	441a      	add	r2, r3
 800643c:	4b9a      	ldr	r3, [pc, #616]	; (80066a8 <USB_EPStartXfer+0x4cc>)
 800643e:	4323      	orrs	r3, r4
 8006440:	b29b      	uxth	r3, r3
 8006442:	8013      	strh	r3, [r2, #0]
 8006444:	e018      	b.n	8006478 <USB_EPStartXfer+0x29c>
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	785b      	ldrb	r3, [r3, #1]
 800644a:	2b01      	cmp	r3, #1
 800644c:	d114      	bne.n	8006478 <USB_EPStartXfer+0x29c>
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	4413      	add	r3, r2
 8006458:	881b      	ldrh	r3, [r3, #0]
 800645a:	b29b      	uxth	r3, r3
 800645c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006460:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006464:	b29c      	uxth	r4, r3
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	441a      	add	r2, r3
 8006470:	4b8e      	ldr	r3, [pc, #568]	; (80066ac <USB_EPStartXfer+0x4d0>)
 8006472:	4323      	orrs	r3, r4
 8006474:	b29b      	uxth	r3, r3
 8006476:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	4413      	add	r3, r2
 8006482:	881b      	ldrh	r3, [r3, #0]
 8006484:	b29b      	uxth	r3, r3
 8006486:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800648a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800648e:	b29c      	uxth	r4, r3
 8006490:	f084 0310 	eor.w	r3, r4, #16
 8006494:	b29c      	uxth	r4, r3
 8006496:	f084 0320 	eor.w	r3, r4, #32
 800649a:	b29c      	uxth	r4, r3
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	441a      	add	r2, r3
 80064a6:	4b82      	ldr	r3, [pc, #520]	; (80066b0 <USB_EPStartXfer+0x4d4>)
 80064a8:	4323      	orrs	r3, r4
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	8013      	strh	r3, [r2, #0]
 80064ae:	e146      	b.n	800673e <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	699a      	ldr	r2, [r3, #24]
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	691b      	ldr	r3, [r3, #16]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d909      	bls.n	80064d0 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	699a      	ldr	r2, [r3, #24]
 80064c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c8:	1ad2      	subs	r2, r2, r3
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	619a      	str	r2, [r3, #24]
 80064ce:	e005      	b.n	80064dc <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	699b      	ldr	r3, [r3, #24]
 80064d4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	2200      	movs	r2, #0
 80064da:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	7b1b      	ldrb	r3, [r3, #12]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d148      	bne.n	8006576 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80064e4:	687c      	ldr	r4, [r7, #4]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	441c      	add	r4, r3
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	011b      	lsls	r3, r3, #4
 80064f6:	4423      	add	r3, r4
 80064f8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80064fc:	461c      	mov	r4, r3
 80064fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006500:	2b00      	cmp	r3, #0
 8006502:	d10e      	bne.n	8006522 <USB_EPStartXfer+0x346>
 8006504:	8823      	ldrh	r3, [r4, #0]
 8006506:	b29b      	uxth	r3, r3
 8006508:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800650c:	b29b      	uxth	r3, r3
 800650e:	8023      	strh	r3, [r4, #0]
 8006510:	8823      	ldrh	r3, [r4, #0]
 8006512:	b29b      	uxth	r3, r3
 8006514:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006518:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800651c:	b29b      	uxth	r3, r3
 800651e:	8023      	strh	r3, [r4, #0]
 8006520:	e0f2      	b.n	8006708 <USB_EPStartXfer+0x52c>
 8006522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006524:	2b3e      	cmp	r3, #62	; 0x3e
 8006526:	d810      	bhi.n	800654a <USB_EPStartXfer+0x36e>
 8006528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652a:	085b      	lsrs	r3, r3, #1
 800652c:	61fb      	str	r3, [r7, #28]
 800652e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006530:	f003 0301 	and.w	r3, r3, #1
 8006534:	2b00      	cmp	r3, #0
 8006536:	d002      	beq.n	800653e <USB_EPStartXfer+0x362>
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	3301      	adds	r3, #1
 800653c:	61fb      	str	r3, [r7, #28]
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	b29b      	uxth	r3, r3
 8006542:	029b      	lsls	r3, r3, #10
 8006544:	b29b      	uxth	r3, r3
 8006546:	8023      	strh	r3, [r4, #0]
 8006548:	e0de      	b.n	8006708 <USB_EPStartXfer+0x52c>
 800654a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800654c:	095b      	lsrs	r3, r3, #5
 800654e:	61fb      	str	r3, [r7, #28]
 8006550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006552:	f003 031f 	and.w	r3, r3, #31
 8006556:	2b00      	cmp	r3, #0
 8006558:	d102      	bne.n	8006560 <USB_EPStartXfer+0x384>
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	3b01      	subs	r3, #1
 800655e:	61fb      	str	r3, [r7, #28]
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	b29b      	uxth	r3, r3
 8006564:	029b      	lsls	r3, r3, #10
 8006566:	b29b      	uxth	r3, r3
 8006568:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800656c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006570:	b29b      	uxth	r3, r3
 8006572:	8023      	strh	r3, [r4, #0]
 8006574:	e0c8      	b.n	8006708 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	785b      	ldrb	r3, [r3, #1]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d148      	bne.n	8006610 <USB_EPStartXfer+0x434>
 800657e:	687c      	ldr	r4, [r7, #4]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006586:	b29b      	uxth	r3, r3
 8006588:	441c      	add	r4, r3
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	011b      	lsls	r3, r3, #4
 8006590:	4423      	add	r3, r4
 8006592:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006596:	461c      	mov	r4, r3
 8006598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659a:	2b00      	cmp	r3, #0
 800659c:	d10e      	bne.n	80065bc <USB_EPStartXfer+0x3e0>
 800659e:	8823      	ldrh	r3, [r4, #0]
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	8023      	strh	r3, [r4, #0]
 80065aa:	8823      	ldrh	r3, [r4, #0]
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	8023      	strh	r3, [r4, #0]
 80065ba:	e03d      	b.n	8006638 <USB_EPStartXfer+0x45c>
 80065bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065be:	2b3e      	cmp	r3, #62	; 0x3e
 80065c0:	d810      	bhi.n	80065e4 <USB_EPStartXfer+0x408>
 80065c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c4:	085b      	lsrs	r3, r3, #1
 80065c6:	61bb      	str	r3, [r7, #24]
 80065c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ca:	f003 0301 	and.w	r3, r3, #1
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d002      	beq.n	80065d8 <USB_EPStartXfer+0x3fc>
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	3301      	adds	r3, #1
 80065d6:	61bb      	str	r3, [r7, #24]
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	b29b      	uxth	r3, r3
 80065dc:	029b      	lsls	r3, r3, #10
 80065de:	b29b      	uxth	r3, r3
 80065e0:	8023      	strh	r3, [r4, #0]
 80065e2:	e029      	b.n	8006638 <USB_EPStartXfer+0x45c>
 80065e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e6:	095b      	lsrs	r3, r3, #5
 80065e8:	61bb      	str	r3, [r7, #24]
 80065ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ec:	f003 031f 	and.w	r3, r3, #31
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d102      	bne.n	80065fa <USB_EPStartXfer+0x41e>
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	3b01      	subs	r3, #1
 80065f8:	61bb      	str	r3, [r7, #24]
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	029b      	lsls	r3, r3, #10
 8006600:	b29b      	uxth	r3, r3
 8006602:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006606:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800660a:	b29b      	uxth	r3, r3
 800660c:	8023      	strh	r3, [r4, #0]
 800660e:	e013      	b.n	8006638 <USB_EPStartXfer+0x45c>
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	785b      	ldrb	r3, [r3, #1]
 8006614:	2b01      	cmp	r3, #1
 8006616:	d10f      	bne.n	8006638 <USB_EPStartXfer+0x45c>
 8006618:	687c      	ldr	r4, [r7, #4]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006620:	b29b      	uxth	r3, r3
 8006622:	441c      	add	r4, r3
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	011b      	lsls	r3, r3, #4
 800662a:	4423      	add	r3, r4
 800662c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006630:	461c      	mov	r4, r3
 8006632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006634:	b29b      	uxth	r3, r3
 8006636:	8023      	strh	r3, [r4, #0]
 8006638:	687c      	ldr	r4, [r7, #4]
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	785b      	ldrb	r3, [r3, #1]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d14e      	bne.n	80066e0 <USB_EPStartXfer+0x504>
 8006642:	687c      	ldr	r4, [r7, #4]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800664a:	b29b      	uxth	r3, r3
 800664c:	441c      	add	r4, r3
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	011b      	lsls	r3, r3, #4
 8006654:	4423      	add	r3, r4
 8006656:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800665a:	461c      	mov	r4, r3
 800665c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665e:	2b00      	cmp	r3, #0
 8006660:	d10e      	bne.n	8006680 <USB_EPStartXfer+0x4a4>
 8006662:	8823      	ldrh	r3, [r4, #0]
 8006664:	b29b      	uxth	r3, r3
 8006666:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800666a:	b29b      	uxth	r3, r3
 800666c:	8023      	strh	r3, [r4, #0]
 800666e:	8823      	ldrh	r3, [r4, #0]
 8006670:	b29b      	uxth	r3, r3
 8006672:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006676:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800667a:	b29b      	uxth	r3, r3
 800667c:	8023      	strh	r3, [r4, #0]
 800667e:	e043      	b.n	8006708 <USB_EPStartXfer+0x52c>
 8006680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006682:	2b3e      	cmp	r3, #62	; 0x3e
 8006684:	d816      	bhi.n	80066b4 <USB_EPStartXfer+0x4d8>
 8006686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006688:	085b      	lsrs	r3, r3, #1
 800668a:	617b      	str	r3, [r7, #20]
 800668c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668e:	f003 0301 	and.w	r3, r3, #1
 8006692:	2b00      	cmp	r3, #0
 8006694:	d002      	beq.n	800669c <USB_EPStartXfer+0x4c0>
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	3301      	adds	r3, #1
 800669a:	617b      	str	r3, [r7, #20]
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	b29b      	uxth	r3, r3
 80066a0:	029b      	lsls	r3, r3, #10
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	8023      	strh	r3, [r4, #0]
 80066a6:	e02f      	b.n	8006708 <USB_EPStartXfer+0x52c>
 80066a8:	ffff80c0 	.word	0xffff80c0
 80066ac:	ffffc080 	.word	0xffffc080
 80066b0:	ffff8080 	.word	0xffff8080
 80066b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b6:	095b      	lsrs	r3, r3, #5
 80066b8:	617b      	str	r3, [r7, #20]
 80066ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066bc:	f003 031f 	and.w	r3, r3, #31
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d102      	bne.n	80066ca <USB_EPStartXfer+0x4ee>
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	3b01      	subs	r3, #1
 80066c8:	617b      	str	r3, [r7, #20]
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	029b      	lsls	r3, r3, #10
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066da:	b29b      	uxth	r3, r3
 80066dc:	8023      	strh	r3, [r4, #0]
 80066de:	e013      	b.n	8006708 <USB_EPStartXfer+0x52c>
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	785b      	ldrb	r3, [r3, #1]
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d10f      	bne.n	8006708 <USB_EPStartXfer+0x52c>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	441c      	add	r4, r3
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	011b      	lsls	r3, r3, #4
 80066f8:	4423      	add	r3, r4
 80066fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066fe:	613b      	str	r3, [r7, #16]
 8006700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006702:	b29a      	uxth	r2, r3
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	4413      	add	r3, r2
 8006712:	881b      	ldrh	r3, [r3, #0]
 8006714:	b29b      	uxth	r3, r3
 8006716:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800671a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800671e:	b29c      	uxth	r4, r3
 8006720:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006724:	b29c      	uxth	r4, r3
 8006726:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800672a:	b29c      	uxth	r4, r3
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	009b      	lsls	r3, r3, #2
 8006734:	441a      	add	r2, r3
 8006736:	4b04      	ldr	r3, [pc, #16]	; (8006748 <USB_EPStartXfer+0x56c>)
 8006738:	4323      	orrs	r3, r4
 800673a:	b29b      	uxth	r3, r3
 800673c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800673e:	2300      	movs	r3, #0
}
 8006740:	4618      	mov	r0, r3
 8006742:	3734      	adds	r7, #52	; 0x34
 8006744:	46bd      	mov	sp, r7
 8006746:	bd90      	pop	{r4, r7, pc}
 8006748:	ffff8080 	.word	0xffff8080

0800674c <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800674c:	b490      	push	{r4, r7}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	785b      	ldrb	r3, [r3, #1]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d018      	beq.n	8006790 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	4413      	add	r3, r2
 8006768:	881b      	ldrh	r3, [r3, #0]
 800676a:	b29b      	uxth	r3, r3
 800676c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006770:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006774:	b29c      	uxth	r4, r3
 8006776:	f084 0310 	eor.w	r3, r4, #16
 800677a:	b29c      	uxth	r4, r3
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	441a      	add	r2, r3
 8006786:	4b11      	ldr	r3, [pc, #68]	; (80067cc <USB_EPSetStall+0x80>)
 8006788:	4323      	orrs	r3, r4
 800678a:	b29b      	uxth	r3, r3
 800678c:	8013      	strh	r3, [r2, #0]
 800678e:	e017      	b.n	80067c0 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	4413      	add	r3, r2
 800679a:	881b      	ldrh	r3, [r3, #0]
 800679c:	b29b      	uxth	r3, r3
 800679e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067a6:	b29c      	uxth	r4, r3
 80067a8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80067ac:	b29c      	uxth	r4, r3
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	441a      	add	r2, r3
 80067b8:	4b04      	ldr	r3, [pc, #16]	; (80067cc <USB_EPSetStall+0x80>)
 80067ba:	4323      	orrs	r3, r4
 80067bc:	b29b      	uxth	r3, r3
 80067be:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3708      	adds	r7, #8
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bc90      	pop	{r4, r7}
 80067ca:	4770      	bx	lr
 80067cc:	ffff8080 	.word	0xffff8080

080067d0 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80067d0:	b490      	push	{r4, r7}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	7b1b      	ldrb	r3, [r3, #12]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d17d      	bne.n	80068de <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	785b      	ldrb	r3, [r3, #1]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d03d      	beq.n	8006866 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	4413      	add	r3, r2
 80067f4:	881b      	ldrh	r3, [r3, #0]
 80067f6:	b29c      	uxth	r4, r3
 80067f8:	4623      	mov	r3, r4
 80067fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d014      	beq.n	800682c <USB_EPClearStall+0x5c>
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	4413      	add	r3, r2
 800680c:	881b      	ldrh	r3, [r3, #0]
 800680e:	b29b      	uxth	r3, r3
 8006810:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006814:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006818:	b29c      	uxth	r4, r3
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	441a      	add	r2, r3
 8006824:	4b31      	ldr	r3, [pc, #196]	; (80068ec <USB_EPClearStall+0x11c>)
 8006826:	4323      	orrs	r3, r4
 8006828:	b29b      	uxth	r3, r3
 800682a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	78db      	ldrb	r3, [r3, #3]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d054      	beq.n	80068de <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	4413      	add	r3, r2
 800683e:	881b      	ldrh	r3, [r3, #0]
 8006840:	b29b      	uxth	r3, r3
 8006842:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006846:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800684a:	b29c      	uxth	r4, r3
 800684c:	f084 0320 	eor.w	r3, r4, #32
 8006850:	b29c      	uxth	r4, r3
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	441a      	add	r2, r3
 800685c:	4b24      	ldr	r3, [pc, #144]	; (80068f0 <USB_EPClearStall+0x120>)
 800685e:	4323      	orrs	r3, r4
 8006860:	b29b      	uxth	r3, r3
 8006862:	8013      	strh	r3, [r2, #0]
 8006864:	e03b      	b.n	80068de <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	4413      	add	r3, r2
 8006870:	881b      	ldrh	r3, [r3, #0]
 8006872:	b29c      	uxth	r4, r3
 8006874:	4623      	mov	r3, r4
 8006876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800687a:	2b00      	cmp	r3, #0
 800687c:	d014      	beq.n	80068a8 <USB_EPClearStall+0xd8>
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	4413      	add	r3, r2
 8006888:	881b      	ldrh	r3, [r3, #0]
 800688a:	b29b      	uxth	r3, r3
 800688c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006890:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006894:	b29c      	uxth	r4, r3
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	441a      	add	r2, r3
 80068a0:	4b14      	ldr	r3, [pc, #80]	; (80068f4 <USB_EPClearStall+0x124>)
 80068a2:	4323      	orrs	r3, r4
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	4413      	add	r3, r2
 80068b2:	881b      	ldrh	r3, [r3, #0]
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068be:	b29c      	uxth	r4, r3
 80068c0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80068c4:	b29c      	uxth	r4, r3
 80068c6:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80068ca:	b29c      	uxth	r4, r3
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	441a      	add	r2, r3
 80068d6:	4b06      	ldr	r3, [pc, #24]	; (80068f0 <USB_EPClearStall+0x120>)
 80068d8:	4323      	orrs	r3, r4
 80068da:	b29b      	uxth	r3, r3
 80068dc:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80068de:	2300      	movs	r3, #0
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3708      	adds	r7, #8
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bc90      	pop	{r4, r7}
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	ffff80c0 	.word	0xffff80c0
 80068f0:	ffff8080 	.word	0xffff8080
 80068f4:	ffffc080 	.word	0xffffc080

080068f8 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	460b      	mov	r3, r1
 8006902:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006904:	78fb      	ldrb	r3, [r7, #3]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d103      	bne.n	8006912 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2280      	movs	r2, #128	; 0x80
 800690e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	bc80      	pop	{r7}
 800691c:	4770      	bx	lr

0800691e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800691e:	b480      	push	{r7}
 8006920:	b083      	sub	sp, #12
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006926:	2300      	movs	r3, #0
}
 8006928:	4618      	mov	r0, r3
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	bc80      	pop	{r7}
 8006930:	4770      	bx	lr

08006932 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006932:	b480      	push	{r7}
 8006934:	b083      	sub	sp, #12
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800693a:	2300      	movs	r3, #0
}
 800693c:	4618      	mov	r0, r3
 800693e:	370c      	adds	r7, #12
 8006940:	46bd      	mov	sp, r7
 8006942:	bc80      	pop	{r7}
 8006944:	4770      	bx	lr

08006946 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006946:	b480      	push	{r7}
 8006948:	b085      	sub	sp, #20
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006954:	b29b      	uxth	r3, r3
 8006956:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006958:	68fb      	ldr	r3, [r7, #12]
}
 800695a:	4618      	mov	r0, r3
 800695c:	3714      	adds	r7, #20
 800695e:	46bd      	mov	sp, r7
 8006960:	bc80      	pop	{r7}
 8006962:	4770      	bx	lr

08006964 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800696e:	2300      	movs	r3, #0
}
 8006970:	4618      	mov	r0, r3
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	bc80      	pop	{r7}
 8006978:	4770      	bx	lr

0800697a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800697a:	b480      	push	{r7}
 800697c:	b08d      	sub	sp, #52	; 0x34
 800697e:	af00      	add	r7, sp, #0
 8006980:	60f8      	str	r0, [r7, #12]
 8006982:	60b9      	str	r1, [r7, #8]
 8006984:	4611      	mov	r1, r2
 8006986:	461a      	mov	r2, r3
 8006988:	460b      	mov	r3, r1
 800698a:	80fb      	strh	r3, [r7, #6]
 800698c:	4613      	mov	r3, r2
 800698e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006990:	88bb      	ldrh	r3, [r7, #4]
 8006992:	3301      	adds	r3, #1
 8006994:	085b      	lsrs	r3, r3, #1
 8006996:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80069a0:	88fb      	ldrh	r3, [r7, #6]
 80069a2:	005a      	lsls	r2, r3, #1
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	4413      	add	r3, r2
 80069a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069ac:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80069ae:	6a3b      	ldr	r3, [r7, #32]
 80069b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069b2:	e01e      	b.n	80069f2 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80069b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80069ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069bc:	3301      	adds	r3, #1
 80069be:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80069c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	021b      	lsls	r3, r3, #8
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	461a      	mov	r2, r3
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80069da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069dc:	3302      	adds	r3, #2
 80069de:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80069e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e2:	3302      	adds	r3, #2
 80069e4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80069e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e8:	3301      	adds	r3, #1
 80069ea:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80069ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ee:	3b01      	subs	r3, #1
 80069f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d1dd      	bne.n	80069b4 <USB_WritePMA+0x3a>
  }
}
 80069f8:	bf00      	nop
 80069fa:	3734      	adds	r7, #52	; 0x34
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bc80      	pop	{r7}
 8006a00:	4770      	bx	lr

08006a02 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006a02:	b480      	push	{r7}
 8006a04:	b08b      	sub	sp, #44	; 0x2c
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	60f8      	str	r0, [r7, #12]
 8006a0a:	60b9      	str	r1, [r7, #8]
 8006a0c:	4611      	mov	r1, r2
 8006a0e:	461a      	mov	r2, r3
 8006a10:	460b      	mov	r3, r1
 8006a12:	80fb      	strh	r3, [r7, #6]
 8006a14:	4613      	mov	r3, r2
 8006a16:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006a18:	88bb      	ldrh	r3, [r7, #4]
 8006a1a:	085b      	lsrs	r3, r3, #1
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006a28:	88fb      	ldrh	r3, [r7, #6]
 8006a2a:	005a      	lsls	r2, r3, #1
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	4413      	add	r3, r2
 8006a30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a34:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	627b      	str	r3, [r7, #36]	; 0x24
 8006a3a:	e01b      	b.n	8006a74 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006a3c:	6a3b      	ldr	r3, [r7, #32]
 8006a3e:	881b      	ldrh	r3, [r3, #0]
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006a44:	6a3b      	ldr	r3, [r7, #32]
 8006a46:	3302      	adds	r3, #2
 8006a48:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	b2da      	uxtb	r2, r3
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	3301      	adds	r3, #1
 8006a56:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	0a1b      	lsrs	r3, r3, #8
 8006a5c:	b2da      	uxtb	r2, r3
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	3301      	adds	r3, #1
 8006a66:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006a68:	6a3b      	ldr	r3, [r7, #32]
 8006a6a:	3302      	adds	r3, #2
 8006a6c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a70:	3b01      	subs	r3, #1
 8006a72:	627b      	str	r3, [r7, #36]	; 0x24
 8006a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d1e0      	bne.n	8006a3c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006a7a:	88bb      	ldrh	r3, [r7, #4]
 8006a7c:	f003 0301 	and.w	r3, r3, #1
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d007      	beq.n	8006a96 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006a86:	6a3b      	ldr	r3, [r7, #32]
 8006a88:	881b      	ldrh	r3, [r3, #0]
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	b2da      	uxtb	r2, r3
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	701a      	strb	r2, [r3, #0]
  }
}
 8006a96:	bf00      	nop
 8006a98:	372c      	adds	r7, #44	; 0x2c
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bc80      	pop	{r7}
 8006a9e:	4770      	bx	lr

08006aa0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	460b      	mov	r3, r1
 8006aaa:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006aac:	2300      	movs	r3, #0
 8006aae:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	7c1b      	ldrb	r3, [r3, #16]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d115      	bne.n	8006ae4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006ab8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006abc:	2202      	movs	r2, #2
 8006abe:	2181      	movs	r1, #129	; 0x81
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f001 fe6c 	bl	800879e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2201      	movs	r2, #1
 8006aca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006acc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ad0:	2202      	movs	r2, #2
 8006ad2:	2101      	movs	r1, #1
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f001 fe62 	bl	800879e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2201      	movs	r2, #1
 8006ade:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006ae2:	e012      	b.n	8006b0a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006ae4:	2340      	movs	r3, #64	; 0x40
 8006ae6:	2202      	movs	r2, #2
 8006ae8:	2181      	movs	r1, #129	; 0x81
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f001 fe57 	bl	800879e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006af6:	2340      	movs	r3, #64	; 0x40
 8006af8:	2202      	movs	r2, #2
 8006afa:	2101      	movs	r1, #1
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f001 fe4e 	bl	800879e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2201      	movs	r2, #1
 8006b06:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006b0a:	2308      	movs	r3, #8
 8006b0c:	2203      	movs	r2, #3
 8006b0e:	2182      	movs	r1, #130	; 0x82
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f001 fe44 	bl	800879e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006b1c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006b20:	f001 ff5e 	bl	80089e0 <USBD_static_malloc>
 8006b24:	4602      	mov	r2, r0
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d102      	bne.n	8006b3c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006b36:	2301      	movs	r3, #1
 8006b38:	73fb      	strb	r3, [r7, #15]
 8006b3a:	e026      	b.n	8006b8a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b42:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	7c1b      	ldrb	r3, [r3, #16]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d109      	bne.n	8006b7a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b70:	2101      	movs	r1, #1
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f001 fefd 	bl	8008972 <USBD_LL_PrepareReceive>
 8006b78:	e007      	b.n	8006b8a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b80:	2340      	movs	r3, #64	; 0x40
 8006b82:	2101      	movs	r1, #1
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f001 fef4 	bl	8008972 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3710      	adds	r7, #16
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006ba4:	2181      	movs	r1, #129	; 0x81
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f001 fe1f 	bl	80087ea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006bb2:	2101      	movs	r1, #1
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f001 fe18 	bl	80087ea <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006bc2:	2182      	movs	r1, #130	; 0x82
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f001 fe10 	bl	80087ea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d00e      	beq.n	8006bf8 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bea:	4618      	mov	r0, r3
 8006bec:	f001 ff04 	bl	80089f8 <USBD_static_free>
    pdev->pClassData = NULL;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3710      	adds	r7, #16
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b086      	sub	sp, #24
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
 8006c0a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c12:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006c14:	2300      	movs	r3, #0
 8006c16:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d039      	beq.n	8006ca0 <USBD_CDC_Setup+0x9e>
 8006c2c:	2b20      	cmp	r3, #32
 8006c2e:	d17c      	bne.n	8006d2a <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	88db      	ldrh	r3, [r3, #6]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d029      	beq.n	8006c8c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	b25b      	sxtb	r3, r3
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	da11      	bge.n	8006c66 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	683a      	ldr	r2, [r7, #0]
 8006c4c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006c4e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006c50:	683a      	ldr	r2, [r7, #0]
 8006c52:	88d2      	ldrh	r2, [r2, #6]
 8006c54:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006c56:	6939      	ldr	r1, [r7, #16]
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	88db      	ldrh	r3, [r3, #6]
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f001 f9f6 	bl	8008050 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006c64:	e068      	b.n	8006d38 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	785a      	ldrb	r2, [r3, #1]
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	88db      	ldrh	r3, [r3, #6]
 8006c74:	b2da      	uxtb	r2, r3
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006c7c:	6939      	ldr	r1, [r7, #16]
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	88db      	ldrh	r3, [r3, #6]
 8006c82:	461a      	mov	r2, r3
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f001 fa11 	bl	80080ac <USBD_CtlPrepareRx>
      break;
 8006c8a:	e055      	b.n	8006d38 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	683a      	ldr	r2, [r7, #0]
 8006c96:	7850      	ldrb	r0, [r2, #1]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	6839      	ldr	r1, [r7, #0]
 8006c9c:	4798      	blx	r3
      break;
 8006c9e:	e04b      	b.n	8006d38 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	785b      	ldrb	r3, [r3, #1]
 8006ca4:	2b0a      	cmp	r3, #10
 8006ca6:	d017      	beq.n	8006cd8 <USBD_CDC_Setup+0xd6>
 8006ca8:	2b0b      	cmp	r3, #11
 8006caa:	d029      	beq.n	8006d00 <USBD_CDC_Setup+0xfe>
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d133      	bne.n	8006d18 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cb6:	2b03      	cmp	r3, #3
 8006cb8:	d107      	bne.n	8006cca <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006cba:	f107 030c 	add.w	r3, r7, #12
 8006cbe:	2202      	movs	r2, #2
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f001 f9c4 	bl	8008050 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006cc8:	e02e      	b.n	8006d28 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8006cca:	6839      	ldr	r1, [r7, #0]
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f001 f955 	bl	8007f7c <USBD_CtlError>
            ret = USBD_FAIL;
 8006cd2:	2302      	movs	r3, #2
 8006cd4:	75fb      	strb	r3, [r7, #23]
          break;
 8006cd6:	e027      	b.n	8006d28 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cde:	2b03      	cmp	r3, #3
 8006ce0:	d107      	bne.n	8006cf2 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006ce2:	f107 030f 	add.w	r3, r7, #15
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	4619      	mov	r1, r3
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f001 f9b0 	bl	8008050 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006cf0:	e01a      	b.n	8006d28 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8006cf2:	6839      	ldr	r1, [r7, #0]
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f001 f941 	bl	8007f7c <USBD_CtlError>
            ret = USBD_FAIL;
 8006cfa:	2302      	movs	r3, #2
 8006cfc:	75fb      	strb	r3, [r7, #23]
          break;
 8006cfe:	e013      	b.n	8006d28 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d06:	2b03      	cmp	r3, #3
 8006d08:	d00d      	beq.n	8006d26 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8006d0a:	6839      	ldr	r1, [r7, #0]
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f001 f935 	bl	8007f7c <USBD_CtlError>
            ret = USBD_FAIL;
 8006d12:	2302      	movs	r3, #2
 8006d14:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006d16:	e006      	b.n	8006d26 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8006d18:	6839      	ldr	r1, [r7, #0]
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f001 f92e 	bl	8007f7c <USBD_CtlError>
          ret = USBD_FAIL;
 8006d20:	2302      	movs	r3, #2
 8006d22:	75fb      	strb	r3, [r7, #23]
          break;
 8006d24:	e000      	b.n	8006d28 <USBD_CDC_Setup+0x126>
          break;
 8006d26:	bf00      	nop
      }
      break;
 8006d28:	e006      	b.n	8006d38 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8006d2a:	6839      	ldr	r1, [r7, #0]
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f001 f925 	bl	8007f7c <USBD_CtlError>
      ret = USBD_FAIL;
 8006d32:	2302      	movs	r3, #2
 8006d34:	75fb      	strb	r3, [r7, #23]
      break;
 8006d36:	bf00      	nop
  }

  return ret;
 8006d38:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3718      	adds	r7, #24
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}

08006d42 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d42:	b580      	push	{r7, lr}
 8006d44:	b084      	sub	sp, #16
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
 8006d4a:	460b      	mov	r3, r1
 8006d4c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d54:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d5c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d037      	beq.n	8006dd8 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006d68:	78fa      	ldrb	r2, [r7, #3]
 8006d6a:	6879      	ldr	r1, [r7, #4]
 8006d6c:	4613      	mov	r3, r2
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	4413      	add	r3, r2
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	440b      	add	r3, r1
 8006d76:	331c      	adds	r3, #28
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d026      	beq.n	8006dcc <USBD_CDC_DataIn+0x8a>
 8006d7e:	78fa      	ldrb	r2, [r7, #3]
 8006d80:	6879      	ldr	r1, [r7, #4]
 8006d82:	4613      	mov	r3, r2
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	4413      	add	r3, r2
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	440b      	add	r3, r1
 8006d8c:	331c      	adds	r3, #28
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	78fa      	ldrb	r2, [r7, #3]
 8006d92:	68b9      	ldr	r1, [r7, #8]
 8006d94:	0152      	lsls	r2, r2, #5
 8006d96:	440a      	add	r2, r1
 8006d98:	3238      	adds	r2, #56	; 0x38
 8006d9a:	6812      	ldr	r2, [r2, #0]
 8006d9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006da0:	fb02 f201 	mul.w	r2, r2, r1
 8006da4:	1a9b      	subs	r3, r3, r2
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d110      	bne.n	8006dcc <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006daa:	78fa      	ldrb	r2, [r7, #3]
 8006dac:	6879      	ldr	r1, [r7, #4]
 8006dae:	4613      	mov	r3, r2
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	4413      	add	r3, r2
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	440b      	add	r3, r1
 8006db8:	331c      	adds	r3, #28
 8006dba:	2200      	movs	r2, #0
 8006dbc:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006dbe:	78f9      	ldrb	r1, [r7, #3]
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f001 fdb1 	bl	800892c <USBD_LL_Transmit>
 8006dca:	e003      	b.n	8006dd4 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	e000      	b.n	8006dda <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8006dd8:	2302      	movs	r3, #2
  }
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3710      	adds	r7, #16
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}

08006de2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006de2:	b580      	push	{r7, lr}
 8006de4:	b084      	sub	sp, #16
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
 8006dea:	460b      	mov	r3, r1
 8006dec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006df4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006df6:	78fb      	ldrb	r3, [r7, #3]
 8006df8:	4619      	mov	r1, r3
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f001 fddc 	bl	80089b8 <USBD_LL_GetRxDataSize>
 8006e00:	4602      	mov	r2, r0
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00d      	beq.n	8006e2e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006e20:	68fa      	ldr	r2, [r7, #12]
 8006e22:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006e26:	4611      	mov	r1, r2
 8006e28:	4798      	blx	r3

    return USBD_OK;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	e000      	b.n	8006e30 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006e2e:	2302      	movs	r3, #2
  }
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3710      	adds	r7, #16
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e46:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d015      	beq.n	8006e7e <USBD_CDC_EP0_RxReady+0x46>
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006e58:	2bff      	cmp	r3, #255	; 0xff
 8006e5a:	d010      	beq.n	8006e7e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006e6a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006e72:	b292      	uxth	r2, r2
 8006e74:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	22ff      	movs	r2, #255	; 0xff
 8006e7a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3710      	adds	r7, #16
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2243      	movs	r2, #67	; 0x43
 8006e94:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006e96:	4b03      	ldr	r3, [pc, #12]	; (8006ea4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bc80      	pop	{r7}
 8006ea0:	4770      	bx	lr
 8006ea2:	bf00      	nop
 8006ea4:	20000094 	.word	0x20000094

08006ea8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2243      	movs	r2, #67	; 0x43
 8006eb4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006eb6:	4b03      	ldr	r3, [pc, #12]	; (8006ec4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bc80      	pop	{r7}
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	20000050 	.word	0x20000050

08006ec8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2243      	movs	r2, #67	; 0x43
 8006ed4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006ed6:	4b03      	ldr	r3, [pc, #12]	; (8006ee4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	370c      	adds	r7, #12
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bc80      	pop	{r7}
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	200000d8 	.word	0x200000d8

08006ee8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	220a      	movs	r2, #10
 8006ef4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006ef6:	4b03      	ldr	r3, [pc, #12]	; (8006f04 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bc80      	pop	{r7}
 8006f00:	4770      	bx	lr
 8006f02:	bf00      	nop
 8006f04:	2000000c 	.word	0x2000000c

08006f08 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b085      	sub	sp, #20
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006f12:	2302      	movs	r3, #2
 8006f14:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d005      	beq.n	8006f28 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	683a      	ldr	r2, [r7, #0]
 8006f20:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006f24:	2300      	movs	r3, #0
 8006f26:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3714      	adds	r7, #20
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bc80      	pop	{r7}
 8006f32:	4770      	bx	lr

08006f34 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b087      	sub	sp, #28
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	60b9      	str	r1, [r7, #8]
 8006f3e:	4613      	mov	r3, r2
 8006f40:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f48:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	68ba      	ldr	r2, [r7, #8]
 8006f4e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006f52:	88fa      	ldrh	r2, [r7, #6]
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006f5a:	2300      	movs	r3, #0
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	371c      	adds	r7, #28
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bc80      	pop	{r7}
 8006f64:	4770      	bx	lr

08006f66 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006f66:	b480      	push	{r7}
 8006f68:	b085      	sub	sp, #20
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
 8006f6e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f76:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	683a      	ldr	r2, [r7, #0]
 8006f7c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006f80:	2300      	movs	r3, #0
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3714      	adds	r7, #20
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bc80      	pop	{r7}
 8006f8a:	4770      	bx	lr

08006f8c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f9a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d01c      	beq.n	8006fe0 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d115      	bne.n	8006fdc <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	2181      	movs	r1, #129	; 0x81
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f001 fcaa 	bl	800892c <USBD_LL_Transmit>

      return USBD_OK;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	e002      	b.n	8006fe2 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	e000      	b.n	8006fe2 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006fe0:	2302      	movs	r3, #2
  }
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3710      	adds	r7, #16
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}

08006fea <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b084      	sub	sp, #16
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ff8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007000:	2b00      	cmp	r3, #0
 8007002:	d017      	beq.n	8007034 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	7c1b      	ldrb	r3, [r3, #16]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d109      	bne.n	8007020 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007012:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007016:	2101      	movs	r1, #1
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f001 fcaa 	bl	8008972 <USBD_LL_PrepareReceive>
 800701e:	e007      	b.n	8007030 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007026:	2340      	movs	r3, #64	; 0x40
 8007028:	2101      	movs	r1, #1
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f001 fca1 	bl	8008972 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007030:	2300      	movs	r3, #0
 8007032:	e000      	b.n	8007036 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007034:	2302      	movs	r3, #2
  }
}
 8007036:	4618      	mov	r0, r3
 8007038:	3710      	adds	r7, #16
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}

0800703e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800703e:	b580      	push	{r7, lr}
 8007040:	b084      	sub	sp, #16
 8007042:	af00      	add	r7, sp, #0
 8007044:	60f8      	str	r0, [r7, #12]
 8007046:	60b9      	str	r1, [r7, #8]
 8007048:	4613      	mov	r3, r2
 800704a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d101      	bne.n	8007056 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007052:	2302      	movs	r3, #2
 8007054:	e01a      	b.n	800708c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800705c:	2b00      	cmp	r3, #0
 800705e:	d003      	beq.n	8007068 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2200      	movs	r2, #0
 8007064:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d003      	beq.n	8007076 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	68ba      	ldr	r2, [r7, #8]
 8007072:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2201      	movs	r2, #1
 800707a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	79fa      	ldrb	r2, [r7, #7]
 8007082:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007084:	68f8      	ldr	r0, [r7, #12]
 8007086:	f001 fb15 	bl	80086b4 <USBD_LL_Init>

  return USBD_OK;
 800708a:	2300      	movs	r3, #0
}
 800708c:	4618      	mov	r0, r3
 800708e:	3710      	adds	r7, #16
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007094:	b480      	push	{r7}
 8007096:	b085      	sub	sp, #20
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800709e:	2300      	movs	r3, #0
 80070a0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d006      	beq.n	80070b6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	683a      	ldr	r2, [r7, #0]
 80070ac:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80070b0:	2300      	movs	r3, #0
 80070b2:	73fb      	strb	r3, [r7, #15]
 80070b4:	e001      	b.n	80070ba <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80070b6:	2302      	movs	r3, #2
 80070b8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80070ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3714      	adds	r7, #20
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bc80      	pop	{r7}
 80070c4:	4770      	bx	lr

080070c6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80070c6:	b580      	push	{r7, lr}
 80070c8:	b082      	sub	sp, #8
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f001 fb4a 	bl	8008768 <USBD_LL_Start>

  return USBD_OK;
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3708      	adds	r7, #8
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}

080070de <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80070de:	b480      	push	{r7}
 80070e0:	b083      	sub	sp, #12
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80070e6:	2300      	movs	r3, #0
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	370c      	adds	r7, #12
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bc80      	pop	{r7}
 80070f0:	4770      	bx	lr

080070f2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b084      	sub	sp, #16
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
 80070fa:	460b      	mov	r3, r1
 80070fc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80070fe:	2302      	movs	r3, #2
 8007100:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007108:	2b00      	cmp	r3, #0
 800710a:	d00c      	beq.n	8007126 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	78fa      	ldrb	r2, [r7, #3]
 8007116:	4611      	mov	r1, r2
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	4798      	blx	r3
 800711c:	4603      	mov	r3, r0
 800711e:	2b00      	cmp	r3, #0
 8007120:	d101      	bne.n	8007126 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007122:	2300      	movs	r3, #0
 8007124:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007126:	7bfb      	ldrb	r3, [r7, #15]
}
 8007128:	4618      	mov	r0, r3
 800712a:	3710      	adds	r7, #16
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b082      	sub	sp, #8
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	460b      	mov	r3, r1
 800713a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	78fa      	ldrb	r2, [r7, #3]
 8007146:	4611      	mov	r1, r2
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	4798      	blx	r3

  return USBD_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3708      	adds	r7, #8
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007156:	b580      	push	{r7, lr}
 8007158:	b082      	sub	sp, #8
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
 800715e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007166:	6839      	ldr	r1, [r7, #0]
 8007168:	4618      	mov	r0, r3
 800716a:	f000 fecb 	bl	8007f04 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2201      	movs	r2, #1
 8007172:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800717c:	461a      	mov	r2, r3
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800718a:	f003 031f 	and.w	r3, r3, #31
 800718e:	2b01      	cmp	r3, #1
 8007190:	d00c      	beq.n	80071ac <USBD_LL_SetupStage+0x56>
 8007192:	2b01      	cmp	r3, #1
 8007194:	d302      	bcc.n	800719c <USBD_LL_SetupStage+0x46>
 8007196:	2b02      	cmp	r3, #2
 8007198:	d010      	beq.n	80071bc <USBD_LL_SetupStage+0x66>
 800719a:	e017      	b.n	80071cc <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80071a2:	4619      	mov	r1, r3
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 f9cb 	bl	8007540 <USBD_StdDevReq>
      break;
 80071aa:	e01a      	b.n	80071e2 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80071b2:	4619      	mov	r1, r3
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 fa2d 	bl	8007614 <USBD_StdItfReq>
      break;
 80071ba:	e012      	b.n	80071e2 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80071c2:	4619      	mov	r1, r3
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 fa6b 	bl	80076a0 <USBD_StdEPReq>
      break;
 80071ca:	e00a      	b.n	80071e2 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80071d2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	4619      	mov	r1, r3
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f001 fb24 	bl	8008828 <USBD_LL_StallEP>
      break;
 80071e0:	bf00      	nop
  }

  return USBD_OK;
 80071e2:	2300      	movs	r3, #0
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3708      	adds	r7, #8
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b086      	sub	sp, #24
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	460b      	mov	r3, r1
 80071f6:	607a      	str	r2, [r7, #4]
 80071f8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80071fa:	7afb      	ldrb	r3, [r7, #11]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d14b      	bne.n	8007298 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007206:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800720e:	2b03      	cmp	r3, #3
 8007210:	d134      	bne.n	800727c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	68da      	ldr	r2, [r3, #12]
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	691b      	ldr	r3, [r3, #16]
 800721a:	429a      	cmp	r2, r3
 800721c:	d919      	bls.n	8007252 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	68da      	ldr	r2, [r3, #12]
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	691b      	ldr	r3, [r3, #16]
 8007226:	1ad2      	subs	r2, r2, r3
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	68da      	ldr	r2, [r3, #12]
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007234:	429a      	cmp	r2, r3
 8007236:	d203      	bcs.n	8007240 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800723c:	b29b      	uxth	r3, r3
 800723e:	e002      	b.n	8007246 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007244:	b29b      	uxth	r3, r3
 8007246:	461a      	mov	r2, r3
 8007248:	6879      	ldr	r1, [r7, #4]
 800724a:	68f8      	ldr	r0, [r7, #12]
 800724c:	f000 ff4c 	bl	80080e8 <USBD_CtlContinueRx>
 8007250:	e038      	b.n	80072c4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d00a      	beq.n	8007274 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007264:	2b03      	cmp	r3, #3
 8007266:	d105      	bne.n	8007274 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800726e:	691b      	ldr	r3, [r3, #16]
 8007270:	68f8      	ldr	r0, [r7, #12]
 8007272:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007274:	68f8      	ldr	r0, [r7, #12]
 8007276:	f000 ff49 	bl	800810c <USBD_CtlSendStatus>
 800727a:	e023      	b.n	80072c4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007282:	2b05      	cmp	r3, #5
 8007284:	d11e      	bne.n	80072c4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2200      	movs	r2, #0
 800728a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800728e:	2100      	movs	r1, #0
 8007290:	68f8      	ldr	r0, [r7, #12]
 8007292:	f001 fac9 	bl	8008828 <USBD_LL_StallEP>
 8007296:	e015      	b.n	80072c4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800729e:	699b      	ldr	r3, [r3, #24]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d00d      	beq.n	80072c0 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80072aa:	2b03      	cmp	r3, #3
 80072ac:	d108      	bne.n	80072c0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072b4:	699b      	ldr	r3, [r3, #24]
 80072b6:	7afa      	ldrb	r2, [r7, #11]
 80072b8:	4611      	mov	r1, r2
 80072ba:	68f8      	ldr	r0, [r7, #12]
 80072bc:	4798      	blx	r3
 80072be:	e001      	b.n	80072c4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80072c0:	2302      	movs	r3, #2
 80072c2:	e000      	b.n	80072c6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3718      	adds	r7, #24
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}

080072ce <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80072ce:	b580      	push	{r7, lr}
 80072d0:	b086      	sub	sp, #24
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	60f8      	str	r0, [r7, #12]
 80072d6:	460b      	mov	r3, r1
 80072d8:	607a      	str	r2, [r7, #4]
 80072da:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80072dc:	7afb      	ldrb	r3, [r7, #11]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d17f      	bne.n	80073e2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	3314      	adds	r3, #20
 80072e6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	d15c      	bne.n	80073ac <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	68da      	ldr	r2, [r3, #12]
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	691b      	ldr	r3, [r3, #16]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d915      	bls.n	800732a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	68da      	ldr	r2, [r3, #12]
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	691b      	ldr	r3, [r3, #16]
 8007306:	1ad2      	subs	r2, r2, r3
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	b29b      	uxth	r3, r3
 8007312:	461a      	mov	r2, r3
 8007314:	6879      	ldr	r1, [r7, #4]
 8007316:	68f8      	ldr	r0, [r7, #12]
 8007318:	f000 feb6 	bl	8008088 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800731c:	2300      	movs	r3, #0
 800731e:	2200      	movs	r2, #0
 8007320:	2100      	movs	r1, #0
 8007322:	68f8      	ldr	r0, [r7, #12]
 8007324:	f001 fb25 	bl	8008972 <USBD_LL_PrepareReceive>
 8007328:	e04e      	b.n	80073c8 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	697a      	ldr	r2, [r7, #20]
 8007330:	6912      	ldr	r2, [r2, #16]
 8007332:	fbb3 f1f2 	udiv	r1, r3, r2
 8007336:	fb02 f201 	mul.w	r2, r2, r1
 800733a:	1a9b      	subs	r3, r3, r2
 800733c:	2b00      	cmp	r3, #0
 800733e:	d11c      	bne.n	800737a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	689a      	ldr	r2, [r3, #8]
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007348:	429a      	cmp	r2, r3
 800734a:	d316      	bcc.n	800737a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	689a      	ldr	r2, [r3, #8]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007356:	429a      	cmp	r2, r3
 8007358:	d20f      	bcs.n	800737a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800735a:	2200      	movs	r2, #0
 800735c:	2100      	movs	r1, #0
 800735e:	68f8      	ldr	r0, [r7, #12]
 8007360:	f000 fe92 	bl	8008088 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2200      	movs	r2, #0
 8007368:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800736c:	2300      	movs	r3, #0
 800736e:	2200      	movs	r2, #0
 8007370:	2100      	movs	r1, #0
 8007372:	68f8      	ldr	r0, [r7, #12]
 8007374:	f001 fafd 	bl	8008972 <USBD_LL_PrepareReceive>
 8007378:	e026      	b.n	80073c8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d00a      	beq.n	800739c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800738c:	2b03      	cmp	r3, #3
 800738e:	d105      	bne.n	800739c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	68f8      	ldr	r0, [r7, #12]
 800739a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800739c:	2180      	movs	r1, #128	; 0x80
 800739e:	68f8      	ldr	r0, [r7, #12]
 80073a0:	f001 fa42 	bl	8008828 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f000 fec4 	bl	8008132 <USBD_CtlReceiveStatus>
 80073aa:	e00d      	b.n	80073c8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80073b2:	2b04      	cmp	r3, #4
 80073b4:	d004      	beq.n	80073c0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d103      	bne.n	80073c8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80073c0:	2180      	movs	r1, #128	; 0x80
 80073c2:	68f8      	ldr	r0, [r7, #12]
 80073c4:	f001 fa30 	bl	8008828 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d11d      	bne.n	800740e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80073d2:	68f8      	ldr	r0, [r7, #12]
 80073d4:	f7ff fe83 	bl	80070de <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2200      	movs	r2, #0
 80073dc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80073e0:	e015      	b.n	800740e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073e8:	695b      	ldr	r3, [r3, #20]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d00d      	beq.n	800740a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80073f4:	2b03      	cmp	r3, #3
 80073f6:	d108      	bne.n	800740a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073fe:	695b      	ldr	r3, [r3, #20]
 8007400:	7afa      	ldrb	r2, [r7, #11]
 8007402:	4611      	mov	r1, r2
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	4798      	blx	r3
 8007408:	e001      	b.n	800740e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800740a:	2302      	movs	r3, #2
 800740c:	e000      	b.n	8007410 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800740e:	2300      	movs	r3, #0
}
 8007410:	4618      	mov	r0, r3
 8007412:	3718      	adds	r7, #24
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007420:	2340      	movs	r3, #64	; 0x40
 8007422:	2200      	movs	r2, #0
 8007424:	2100      	movs	r1, #0
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f001 f9b9 	bl	800879e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2201      	movs	r2, #1
 8007430:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2240      	movs	r2, #64	; 0x40
 8007438:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800743c:	2340      	movs	r3, #64	; 0x40
 800743e:	2200      	movs	r2, #0
 8007440:	2180      	movs	r1, #128	; 0x80
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f001 f9ab 	bl	800879e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2201      	movs	r2, #1
 800744c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2240      	movs	r2, #64	; 0x40
 8007452:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2201      	movs	r2, #1
 8007458:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007478:	2b00      	cmp	r3, #0
 800747a:	d009      	beq.n	8007490 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	6852      	ldr	r2, [r2, #4]
 8007488:	b2d2      	uxtb	r2, r2
 800748a:	4611      	mov	r1, r2
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	4798      	blx	r3
  }

  return USBD_OK;
 8007490:	2300      	movs	r3, #0
}
 8007492:	4618      	mov	r0, r3
 8007494:	3708      	adds	r7, #8
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}

0800749a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800749a:	b480      	push	{r7}
 800749c:	b083      	sub	sp, #12
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
 80074a2:	460b      	mov	r3, r1
 80074a4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	78fa      	ldrb	r2, [r7, #3]
 80074aa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80074ac:	2300      	movs	r3, #0
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	370c      	adds	r7, #12
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bc80      	pop	{r7}
 80074b6:	4770      	bx	lr

080074b8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b083      	sub	sp, #12
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2204      	movs	r2, #4
 80074d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	370c      	adds	r7, #12
 80074da:	46bd      	mov	sp, r7
 80074dc:	bc80      	pop	{r7}
 80074de:	4770      	bx	lr

080074e0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074ee:	2b04      	cmp	r3, #4
 80074f0:	d105      	bne.n	80074fe <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80074fe:	2300      	movs	r3, #0
}
 8007500:	4618      	mov	r0, r3
 8007502:	370c      	adds	r7, #12
 8007504:	46bd      	mov	sp, r7
 8007506:	bc80      	pop	{r7}
 8007508:	4770      	bx	lr

0800750a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800750a:	b580      	push	{r7, lr}
 800750c:	b082      	sub	sp, #8
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007518:	2b03      	cmp	r3, #3
 800751a:	d10b      	bne.n	8007534 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007522:	69db      	ldr	r3, [r3, #28]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d005      	beq.n	8007534 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800752e:	69db      	ldr	r3, [r3, #28]
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007534:	2300      	movs	r3, #0
}
 8007536:	4618      	mov	r0, r3
 8007538:	3708      	adds	r7, #8
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
	...

08007540 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800754a:	2300      	movs	r3, #0
 800754c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007556:	2b20      	cmp	r3, #32
 8007558:	d004      	beq.n	8007564 <USBD_StdDevReq+0x24>
 800755a:	2b40      	cmp	r3, #64	; 0x40
 800755c:	d002      	beq.n	8007564 <USBD_StdDevReq+0x24>
 800755e:	2b00      	cmp	r3, #0
 8007560:	d008      	beq.n	8007574 <USBD_StdDevReq+0x34>
 8007562:	e04c      	b.n	80075fe <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	6839      	ldr	r1, [r7, #0]
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	4798      	blx	r3
      break;
 8007572:	e049      	b.n	8007608 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	785b      	ldrb	r3, [r3, #1]
 8007578:	2b09      	cmp	r3, #9
 800757a:	d83a      	bhi.n	80075f2 <USBD_StdDevReq+0xb2>
 800757c:	a201      	add	r2, pc, #4	; (adr r2, 8007584 <USBD_StdDevReq+0x44>)
 800757e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007582:	bf00      	nop
 8007584:	080075d5 	.word	0x080075d5
 8007588:	080075e9 	.word	0x080075e9
 800758c:	080075f3 	.word	0x080075f3
 8007590:	080075df 	.word	0x080075df
 8007594:	080075f3 	.word	0x080075f3
 8007598:	080075b7 	.word	0x080075b7
 800759c:	080075ad 	.word	0x080075ad
 80075a0:	080075f3 	.word	0x080075f3
 80075a4:	080075cb 	.word	0x080075cb
 80075a8:	080075c1 	.word	0x080075c1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80075ac:	6839      	ldr	r1, [r7, #0]
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 f9d4 	bl	800795c <USBD_GetDescriptor>
          break;
 80075b4:	e022      	b.n	80075fc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80075b6:	6839      	ldr	r1, [r7, #0]
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 fb37 	bl	8007c2c <USBD_SetAddress>
          break;
 80075be:	e01d      	b.n	80075fc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80075c0:	6839      	ldr	r1, [r7, #0]
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 fb74 	bl	8007cb0 <USBD_SetConfig>
          break;
 80075c8:	e018      	b.n	80075fc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80075ca:	6839      	ldr	r1, [r7, #0]
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 fbfd 	bl	8007dcc <USBD_GetConfig>
          break;
 80075d2:	e013      	b.n	80075fc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80075d4:	6839      	ldr	r1, [r7, #0]
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 fc2c 	bl	8007e34 <USBD_GetStatus>
          break;
 80075dc:	e00e      	b.n	80075fc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80075de:	6839      	ldr	r1, [r7, #0]
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 fc5a 	bl	8007e9a <USBD_SetFeature>
          break;
 80075e6:	e009      	b.n	80075fc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80075e8:	6839      	ldr	r1, [r7, #0]
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 fc69 	bl	8007ec2 <USBD_ClrFeature>
          break;
 80075f0:	e004      	b.n	80075fc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80075f2:	6839      	ldr	r1, [r7, #0]
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 fcc1 	bl	8007f7c <USBD_CtlError>
          break;
 80075fa:	bf00      	nop
      }
      break;
 80075fc:	e004      	b.n	8007608 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80075fe:	6839      	ldr	r1, [r7, #0]
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f000 fcbb 	bl	8007f7c <USBD_CtlError>
      break;
 8007606:	bf00      	nop
  }

  return ret;
 8007608:	7bfb      	ldrb	r3, [r7, #15]
}
 800760a:	4618      	mov	r0, r3
 800760c:	3710      	adds	r7, #16
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop

08007614 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b084      	sub	sp, #16
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800761e:	2300      	movs	r3, #0
 8007620:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800762a:	2b20      	cmp	r3, #32
 800762c:	d003      	beq.n	8007636 <USBD_StdItfReq+0x22>
 800762e:	2b40      	cmp	r3, #64	; 0x40
 8007630:	d001      	beq.n	8007636 <USBD_StdItfReq+0x22>
 8007632:	2b00      	cmp	r3, #0
 8007634:	d12a      	bne.n	800768c <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800763c:	3b01      	subs	r3, #1
 800763e:	2b02      	cmp	r3, #2
 8007640:	d81d      	bhi.n	800767e <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	889b      	ldrh	r3, [r3, #4]
 8007646:	b2db      	uxtb	r3, r3
 8007648:	2b01      	cmp	r3, #1
 800764a:	d813      	bhi.n	8007674 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	6839      	ldr	r1, [r7, #0]
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	4798      	blx	r3
 800765a:	4603      	mov	r3, r0
 800765c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	88db      	ldrh	r3, [r3, #6]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d110      	bne.n	8007688 <USBD_StdItfReq+0x74>
 8007666:	7bfb      	ldrb	r3, [r7, #15]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d10d      	bne.n	8007688 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 fd4d 	bl	800810c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007672:	e009      	b.n	8007688 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8007674:	6839      	ldr	r1, [r7, #0]
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 fc80 	bl	8007f7c <USBD_CtlError>
          break;
 800767c:	e004      	b.n	8007688 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800767e:	6839      	ldr	r1, [r7, #0]
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 fc7b 	bl	8007f7c <USBD_CtlError>
          break;
 8007686:	e000      	b.n	800768a <USBD_StdItfReq+0x76>
          break;
 8007688:	bf00      	nop
      }
      break;
 800768a:	e004      	b.n	8007696 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800768c:	6839      	ldr	r1, [r7, #0]
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 fc74 	bl	8007f7c <USBD_CtlError>
      break;
 8007694:	bf00      	nop
  }

  return USBD_OK;
 8007696:	2300      	movs	r3, #0
}
 8007698:	4618      	mov	r0, r3
 800769a:	3710      	adds	r7, #16
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80076aa:	2300      	movs	r3, #0
 80076ac:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	889b      	ldrh	r3, [r3, #4]
 80076b2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076bc:	2b20      	cmp	r3, #32
 80076be:	d004      	beq.n	80076ca <USBD_StdEPReq+0x2a>
 80076c0:	2b40      	cmp	r3, #64	; 0x40
 80076c2:	d002      	beq.n	80076ca <USBD_StdEPReq+0x2a>
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d008      	beq.n	80076da <USBD_StdEPReq+0x3a>
 80076c8:	e13d      	b.n	8007946 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	6839      	ldr	r1, [r7, #0]
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	4798      	blx	r3
      break;
 80076d8:	e13a      	b.n	8007950 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076e2:	2b20      	cmp	r3, #32
 80076e4:	d10a      	bne.n	80076fc <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	6839      	ldr	r1, [r7, #0]
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	4798      	blx	r3
 80076f4:	4603      	mov	r3, r0
 80076f6:	73fb      	strb	r3, [r7, #15]

        return ret;
 80076f8:	7bfb      	ldrb	r3, [r7, #15]
 80076fa:	e12a      	b.n	8007952 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	785b      	ldrb	r3, [r3, #1]
 8007700:	2b01      	cmp	r3, #1
 8007702:	d03e      	beq.n	8007782 <USBD_StdEPReq+0xe2>
 8007704:	2b03      	cmp	r3, #3
 8007706:	d002      	beq.n	800770e <USBD_StdEPReq+0x6e>
 8007708:	2b00      	cmp	r3, #0
 800770a:	d070      	beq.n	80077ee <USBD_StdEPReq+0x14e>
 800770c:	e115      	b.n	800793a <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007714:	2b02      	cmp	r3, #2
 8007716:	d002      	beq.n	800771e <USBD_StdEPReq+0x7e>
 8007718:	2b03      	cmp	r3, #3
 800771a:	d015      	beq.n	8007748 <USBD_StdEPReq+0xa8>
 800771c:	e02b      	b.n	8007776 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800771e:	7bbb      	ldrb	r3, [r7, #14]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d00c      	beq.n	800773e <USBD_StdEPReq+0x9e>
 8007724:	7bbb      	ldrb	r3, [r7, #14]
 8007726:	2b80      	cmp	r3, #128	; 0x80
 8007728:	d009      	beq.n	800773e <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800772a:	7bbb      	ldrb	r3, [r7, #14]
 800772c:	4619      	mov	r1, r3
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f001 f87a 	bl	8008828 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007734:	2180      	movs	r1, #128	; 0x80
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f001 f876 	bl	8008828 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800773c:	e020      	b.n	8007780 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800773e:	6839      	ldr	r1, [r7, #0]
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 fc1b 	bl	8007f7c <USBD_CtlError>
              break;
 8007746:	e01b      	b.n	8007780 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	885b      	ldrh	r3, [r3, #2]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d10e      	bne.n	800776e <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8007750:	7bbb      	ldrb	r3, [r7, #14]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d00b      	beq.n	800776e <USBD_StdEPReq+0xce>
 8007756:	7bbb      	ldrb	r3, [r7, #14]
 8007758:	2b80      	cmp	r3, #128	; 0x80
 800775a:	d008      	beq.n	800776e <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	88db      	ldrh	r3, [r3, #6]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d104      	bne.n	800776e <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007764:	7bbb      	ldrb	r3, [r7, #14]
 8007766:	4619      	mov	r1, r3
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f001 f85d 	bl	8008828 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 fccc 	bl	800810c <USBD_CtlSendStatus>

              break;
 8007774:	e004      	b.n	8007780 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8007776:	6839      	ldr	r1, [r7, #0]
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 fbff 	bl	8007f7c <USBD_CtlError>
              break;
 800777e:	bf00      	nop
          }
          break;
 8007780:	e0e0      	b.n	8007944 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007788:	2b02      	cmp	r3, #2
 800778a:	d002      	beq.n	8007792 <USBD_StdEPReq+0xf2>
 800778c:	2b03      	cmp	r3, #3
 800778e:	d015      	beq.n	80077bc <USBD_StdEPReq+0x11c>
 8007790:	e026      	b.n	80077e0 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007792:	7bbb      	ldrb	r3, [r7, #14]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d00c      	beq.n	80077b2 <USBD_StdEPReq+0x112>
 8007798:	7bbb      	ldrb	r3, [r7, #14]
 800779a:	2b80      	cmp	r3, #128	; 0x80
 800779c:	d009      	beq.n	80077b2 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800779e:	7bbb      	ldrb	r3, [r7, #14]
 80077a0:	4619      	mov	r1, r3
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f001 f840 	bl	8008828 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80077a8:	2180      	movs	r1, #128	; 0x80
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f001 f83c 	bl	8008828 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80077b0:	e01c      	b.n	80077ec <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80077b2:	6839      	ldr	r1, [r7, #0]
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 fbe1 	bl	8007f7c <USBD_CtlError>
              break;
 80077ba:	e017      	b.n	80077ec <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	885b      	ldrh	r3, [r3, #2]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d112      	bne.n	80077ea <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80077c4:	7bbb      	ldrb	r3, [r7, #14]
 80077c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d004      	beq.n	80077d8 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80077ce:	7bbb      	ldrb	r3, [r7, #14]
 80077d0:	4619      	mov	r1, r3
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f001 f847 	bl	8008866 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f000 fc97 	bl	800810c <USBD_CtlSendStatus>
              }
              break;
 80077de:	e004      	b.n	80077ea <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80077e0:	6839      	ldr	r1, [r7, #0]
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 fbca 	bl	8007f7c <USBD_CtlError>
              break;
 80077e8:	e000      	b.n	80077ec <USBD_StdEPReq+0x14c>
              break;
 80077ea:	bf00      	nop
          }
          break;
 80077ec:	e0aa      	b.n	8007944 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077f4:	2b02      	cmp	r3, #2
 80077f6:	d002      	beq.n	80077fe <USBD_StdEPReq+0x15e>
 80077f8:	2b03      	cmp	r3, #3
 80077fa:	d032      	beq.n	8007862 <USBD_StdEPReq+0x1c2>
 80077fc:	e097      	b.n	800792e <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80077fe:	7bbb      	ldrb	r3, [r7, #14]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d007      	beq.n	8007814 <USBD_StdEPReq+0x174>
 8007804:	7bbb      	ldrb	r3, [r7, #14]
 8007806:	2b80      	cmp	r3, #128	; 0x80
 8007808:	d004      	beq.n	8007814 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800780a:	6839      	ldr	r1, [r7, #0]
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 fbb5 	bl	8007f7c <USBD_CtlError>
                break;
 8007812:	e091      	b.n	8007938 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007814:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007818:	2b00      	cmp	r3, #0
 800781a:	da0b      	bge.n	8007834 <USBD_StdEPReq+0x194>
 800781c:	7bbb      	ldrb	r3, [r7, #14]
 800781e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007822:	4613      	mov	r3, r2
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	4413      	add	r3, r2
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	3310      	adds	r3, #16
 800782c:	687a      	ldr	r2, [r7, #4]
 800782e:	4413      	add	r3, r2
 8007830:	3304      	adds	r3, #4
 8007832:	e00b      	b.n	800784c <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007834:	7bbb      	ldrb	r3, [r7, #14]
 8007836:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800783a:	4613      	mov	r3, r2
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	4413      	add	r3, r2
 8007840:	009b      	lsls	r3, r3, #2
 8007842:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	4413      	add	r3, r2
 800784a:	3304      	adds	r3, #4
 800784c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	2200      	movs	r2, #0
 8007852:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	2202      	movs	r2, #2
 8007858:	4619      	mov	r1, r3
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 fbf8 	bl	8008050 <USBD_CtlSendData>
              break;
 8007860:	e06a      	b.n	8007938 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007862:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007866:	2b00      	cmp	r3, #0
 8007868:	da11      	bge.n	800788e <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800786a:	7bbb      	ldrb	r3, [r7, #14]
 800786c:	f003 020f 	and.w	r2, r3, #15
 8007870:	6879      	ldr	r1, [r7, #4]
 8007872:	4613      	mov	r3, r2
 8007874:	009b      	lsls	r3, r3, #2
 8007876:	4413      	add	r3, r2
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	440b      	add	r3, r1
 800787c:	3318      	adds	r3, #24
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d117      	bne.n	80078b4 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007884:	6839      	ldr	r1, [r7, #0]
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 fb78 	bl	8007f7c <USBD_CtlError>
                  break;
 800788c:	e054      	b.n	8007938 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800788e:	7bbb      	ldrb	r3, [r7, #14]
 8007890:	f003 020f 	and.w	r2, r3, #15
 8007894:	6879      	ldr	r1, [r7, #4]
 8007896:	4613      	mov	r3, r2
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	4413      	add	r3, r2
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	440b      	add	r3, r1
 80078a0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d104      	bne.n	80078b4 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80078aa:	6839      	ldr	r1, [r7, #0]
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 fb65 	bl	8007f7c <USBD_CtlError>
                  break;
 80078b2:	e041      	b.n	8007938 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	da0b      	bge.n	80078d4 <USBD_StdEPReq+0x234>
 80078bc:	7bbb      	ldrb	r3, [r7, #14]
 80078be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80078c2:	4613      	mov	r3, r2
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	4413      	add	r3, r2
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	3310      	adds	r3, #16
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	4413      	add	r3, r2
 80078d0:	3304      	adds	r3, #4
 80078d2:	e00b      	b.n	80078ec <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80078d4:	7bbb      	ldrb	r3, [r7, #14]
 80078d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078da:	4613      	mov	r3, r2
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	4413      	add	r3, r2
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	4413      	add	r3, r2
 80078ea:	3304      	adds	r3, #4
 80078ec:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80078ee:	7bbb      	ldrb	r3, [r7, #14]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d002      	beq.n	80078fa <USBD_StdEPReq+0x25a>
 80078f4:	7bbb      	ldrb	r3, [r7, #14]
 80078f6:	2b80      	cmp	r3, #128	; 0x80
 80078f8:	d103      	bne.n	8007902 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	2200      	movs	r2, #0
 80078fe:	601a      	str	r2, [r3, #0]
 8007900:	e00e      	b.n	8007920 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007902:	7bbb      	ldrb	r3, [r7, #14]
 8007904:	4619      	mov	r1, r3
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 ffcc 	bl	80088a4 <USBD_LL_IsStallEP>
 800790c:	4603      	mov	r3, r0
 800790e:	2b00      	cmp	r3, #0
 8007910:	d003      	beq.n	800791a <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	2201      	movs	r2, #1
 8007916:	601a      	str	r2, [r3, #0]
 8007918:	e002      	b.n	8007920 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	2200      	movs	r2, #0
 800791e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	2202      	movs	r2, #2
 8007924:	4619      	mov	r1, r3
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 fb92 	bl	8008050 <USBD_CtlSendData>
              break;
 800792c:	e004      	b.n	8007938 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800792e:	6839      	ldr	r1, [r7, #0]
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 fb23 	bl	8007f7c <USBD_CtlError>
              break;
 8007936:	bf00      	nop
          }
          break;
 8007938:	e004      	b.n	8007944 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800793a:	6839      	ldr	r1, [r7, #0]
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 fb1d 	bl	8007f7c <USBD_CtlError>
          break;
 8007942:	bf00      	nop
      }
      break;
 8007944:	e004      	b.n	8007950 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8007946:	6839      	ldr	r1, [r7, #0]
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 fb17 	bl	8007f7c <USBD_CtlError>
      break;
 800794e:	bf00      	nop
  }

  return ret;
 8007950:	7bfb      	ldrb	r3, [r7, #15]
}
 8007952:	4618      	mov	r0, r3
 8007954:	3710      	adds	r7, #16
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
	...

0800795c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007966:	2300      	movs	r3, #0
 8007968:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800796a:	2300      	movs	r3, #0
 800796c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800796e:	2300      	movs	r3, #0
 8007970:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	885b      	ldrh	r3, [r3, #2]
 8007976:	0a1b      	lsrs	r3, r3, #8
 8007978:	b29b      	uxth	r3, r3
 800797a:	3b01      	subs	r3, #1
 800797c:	2b06      	cmp	r3, #6
 800797e:	f200 8128 	bhi.w	8007bd2 <USBD_GetDescriptor+0x276>
 8007982:	a201      	add	r2, pc, #4	; (adr r2, 8007988 <USBD_GetDescriptor+0x2c>)
 8007984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007988:	080079a5 	.word	0x080079a5
 800798c:	080079bd 	.word	0x080079bd
 8007990:	080079fd 	.word	0x080079fd
 8007994:	08007bd3 	.word	0x08007bd3
 8007998:	08007bd3 	.word	0x08007bd3
 800799c:	08007b73 	.word	0x08007b73
 80079a0:	08007b9f 	.word	0x08007b9f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	7c12      	ldrb	r2, [r2, #16]
 80079b0:	f107 0108 	add.w	r1, r7, #8
 80079b4:	4610      	mov	r0, r2
 80079b6:	4798      	blx	r3
 80079b8:	60f8      	str	r0, [r7, #12]
      break;
 80079ba:	e112      	b.n	8007be2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	7c1b      	ldrb	r3, [r3, #16]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d10d      	bne.n	80079e0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079cc:	f107 0208 	add.w	r2, r7, #8
 80079d0:	4610      	mov	r0, r2
 80079d2:	4798      	blx	r3
 80079d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	3301      	adds	r3, #1
 80079da:	2202      	movs	r2, #2
 80079dc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80079de:	e100      	b.n	8007be2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e8:	f107 0208 	add.w	r2, r7, #8
 80079ec:	4610      	mov	r0, r2
 80079ee:	4798      	blx	r3
 80079f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	3301      	adds	r3, #1
 80079f6:	2202      	movs	r2, #2
 80079f8:	701a      	strb	r2, [r3, #0]
      break;
 80079fa:	e0f2      	b.n	8007be2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	885b      	ldrh	r3, [r3, #2]
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	2b05      	cmp	r3, #5
 8007a04:	f200 80ac 	bhi.w	8007b60 <USBD_GetDescriptor+0x204>
 8007a08:	a201      	add	r2, pc, #4	; (adr r2, 8007a10 <USBD_GetDescriptor+0xb4>)
 8007a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a0e:	bf00      	nop
 8007a10:	08007a29 	.word	0x08007a29
 8007a14:	08007a5d 	.word	0x08007a5d
 8007a18:	08007a91 	.word	0x08007a91
 8007a1c:	08007ac5 	.word	0x08007ac5
 8007a20:	08007af9 	.word	0x08007af9
 8007a24:	08007b2d 	.word	0x08007b2d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d00b      	beq.n	8007a4c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	7c12      	ldrb	r2, [r2, #16]
 8007a40:	f107 0108 	add.w	r1, r7, #8
 8007a44:	4610      	mov	r0, r2
 8007a46:	4798      	blx	r3
 8007a48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a4a:	e091      	b.n	8007b70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a4c:	6839      	ldr	r1, [r7, #0]
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 fa94 	bl	8007f7c <USBD_CtlError>
            err++;
 8007a54:	7afb      	ldrb	r3, [r7, #11]
 8007a56:	3301      	adds	r3, #1
 8007a58:	72fb      	strb	r3, [r7, #11]
          break;
 8007a5a:	e089      	b.n	8007b70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d00b      	beq.n	8007a80 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	7c12      	ldrb	r2, [r2, #16]
 8007a74:	f107 0108 	add.w	r1, r7, #8
 8007a78:	4610      	mov	r0, r2
 8007a7a:	4798      	blx	r3
 8007a7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a7e:	e077      	b.n	8007b70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a80:	6839      	ldr	r1, [r7, #0]
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 fa7a 	bl	8007f7c <USBD_CtlError>
            err++;
 8007a88:	7afb      	ldrb	r3, [r7, #11]
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	72fb      	strb	r3, [r7, #11]
          break;
 8007a8e:	e06f      	b.n	8007b70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a96:	68db      	ldr	r3, [r3, #12]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d00b      	beq.n	8007ab4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007aa2:	68db      	ldr	r3, [r3, #12]
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	7c12      	ldrb	r2, [r2, #16]
 8007aa8:	f107 0108 	add.w	r1, r7, #8
 8007aac:	4610      	mov	r0, r2
 8007aae:	4798      	blx	r3
 8007ab0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ab2:	e05d      	b.n	8007b70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ab4:	6839      	ldr	r1, [r7, #0]
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 fa60 	bl	8007f7c <USBD_CtlError>
            err++;
 8007abc:	7afb      	ldrb	r3, [r7, #11]
 8007abe:	3301      	adds	r3, #1
 8007ac0:	72fb      	strb	r3, [r7, #11]
          break;
 8007ac2:	e055      	b.n	8007b70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007aca:	691b      	ldr	r3, [r3, #16]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d00b      	beq.n	8007ae8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ad6:	691b      	ldr	r3, [r3, #16]
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	7c12      	ldrb	r2, [r2, #16]
 8007adc:	f107 0108 	add.w	r1, r7, #8
 8007ae0:	4610      	mov	r0, r2
 8007ae2:	4798      	blx	r3
 8007ae4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ae6:	e043      	b.n	8007b70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ae8:	6839      	ldr	r1, [r7, #0]
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 fa46 	bl	8007f7c <USBD_CtlError>
            err++;
 8007af0:	7afb      	ldrb	r3, [r7, #11]
 8007af2:	3301      	adds	r3, #1
 8007af4:	72fb      	strb	r3, [r7, #11]
          break;
 8007af6:	e03b      	b.n	8007b70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007afe:	695b      	ldr	r3, [r3, #20]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d00b      	beq.n	8007b1c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b0a:	695b      	ldr	r3, [r3, #20]
 8007b0c:	687a      	ldr	r2, [r7, #4]
 8007b0e:	7c12      	ldrb	r2, [r2, #16]
 8007b10:	f107 0108 	add.w	r1, r7, #8
 8007b14:	4610      	mov	r0, r2
 8007b16:	4798      	blx	r3
 8007b18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b1a:	e029      	b.n	8007b70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b1c:	6839      	ldr	r1, [r7, #0]
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 fa2c 	bl	8007f7c <USBD_CtlError>
            err++;
 8007b24:	7afb      	ldrb	r3, [r7, #11]
 8007b26:	3301      	adds	r3, #1
 8007b28:	72fb      	strb	r3, [r7, #11]
          break;
 8007b2a:	e021      	b.n	8007b70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b32:	699b      	ldr	r3, [r3, #24]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d00b      	beq.n	8007b50 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b3e:	699b      	ldr	r3, [r3, #24]
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	7c12      	ldrb	r2, [r2, #16]
 8007b44:	f107 0108 	add.w	r1, r7, #8
 8007b48:	4610      	mov	r0, r2
 8007b4a:	4798      	blx	r3
 8007b4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b4e:	e00f      	b.n	8007b70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b50:	6839      	ldr	r1, [r7, #0]
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 fa12 	bl	8007f7c <USBD_CtlError>
            err++;
 8007b58:	7afb      	ldrb	r3, [r7, #11]
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	72fb      	strb	r3, [r7, #11]
          break;
 8007b5e:	e007      	b.n	8007b70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007b60:	6839      	ldr	r1, [r7, #0]
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 fa0a 	bl	8007f7c <USBD_CtlError>
          err++;
 8007b68:	7afb      	ldrb	r3, [r7, #11]
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007b6e:	e038      	b.n	8007be2 <USBD_GetDescriptor+0x286>
 8007b70:	e037      	b.n	8007be2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	7c1b      	ldrb	r3, [r3, #16]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d109      	bne.n	8007b8e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b82:	f107 0208 	add.w	r2, r7, #8
 8007b86:	4610      	mov	r0, r2
 8007b88:	4798      	blx	r3
 8007b8a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b8c:	e029      	b.n	8007be2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007b8e:	6839      	ldr	r1, [r7, #0]
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 f9f3 	bl	8007f7c <USBD_CtlError>
        err++;
 8007b96:	7afb      	ldrb	r3, [r7, #11]
 8007b98:	3301      	adds	r3, #1
 8007b9a:	72fb      	strb	r3, [r7, #11]
      break;
 8007b9c:	e021      	b.n	8007be2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	7c1b      	ldrb	r3, [r3, #16]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d10d      	bne.n	8007bc2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bae:	f107 0208 	add.w	r2, r7, #8
 8007bb2:	4610      	mov	r0, r2
 8007bb4:	4798      	blx	r3
 8007bb6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	3301      	adds	r3, #1
 8007bbc:	2207      	movs	r2, #7
 8007bbe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007bc0:	e00f      	b.n	8007be2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007bc2:	6839      	ldr	r1, [r7, #0]
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 f9d9 	bl	8007f7c <USBD_CtlError>
        err++;
 8007bca:	7afb      	ldrb	r3, [r7, #11]
 8007bcc:	3301      	adds	r3, #1
 8007bce:	72fb      	strb	r3, [r7, #11]
      break;
 8007bd0:	e007      	b.n	8007be2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007bd2:	6839      	ldr	r1, [r7, #0]
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 f9d1 	bl	8007f7c <USBD_CtlError>
      err++;
 8007bda:	7afb      	ldrb	r3, [r7, #11]
 8007bdc:	3301      	adds	r3, #1
 8007bde:	72fb      	strb	r3, [r7, #11]
      break;
 8007be0:	bf00      	nop
  }

  if (err != 0U)
 8007be2:	7afb      	ldrb	r3, [r7, #11]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d11c      	bne.n	8007c22 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007be8:	893b      	ldrh	r3, [r7, #8]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d011      	beq.n	8007c12 <USBD_GetDescriptor+0x2b6>
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	88db      	ldrh	r3, [r3, #6]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d00d      	beq.n	8007c12 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	88da      	ldrh	r2, [r3, #6]
 8007bfa:	893b      	ldrh	r3, [r7, #8]
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	bf28      	it	cs
 8007c00:	4613      	movcs	r3, r2
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007c06:	893b      	ldrh	r3, [r7, #8]
 8007c08:	461a      	mov	r2, r3
 8007c0a:	68f9      	ldr	r1, [r7, #12]
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 fa1f 	bl	8008050 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	88db      	ldrh	r3, [r3, #6]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d104      	bne.n	8007c24 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 fa76 	bl	800810c <USBD_CtlSendStatus>
 8007c20:	e000      	b.n	8007c24 <USBD_GetDescriptor+0x2c8>
    return;
 8007c22:	bf00      	nop
    }
  }
}
 8007c24:	3710      	adds	r7, #16
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
 8007c2a:	bf00      	nop

08007c2c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	889b      	ldrh	r3, [r3, #4]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d130      	bne.n	8007ca0 <USBD_SetAddress+0x74>
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	88db      	ldrh	r3, [r3, #6]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d12c      	bne.n	8007ca0 <USBD_SetAddress+0x74>
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	885b      	ldrh	r3, [r3, #2]
 8007c4a:	2b7f      	cmp	r3, #127	; 0x7f
 8007c4c:	d828      	bhi.n	8007ca0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	885b      	ldrh	r3, [r3, #2]
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c58:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c60:	2b03      	cmp	r3, #3
 8007c62:	d104      	bne.n	8007c6e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007c64:	6839      	ldr	r1, [r7, #0]
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 f988 	bl	8007f7c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c6c:	e01c      	b.n	8007ca8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	7bfa      	ldrb	r2, [r7, #15]
 8007c72:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007c76:	7bfb      	ldrb	r3, [r7, #15]
 8007c78:	4619      	mov	r1, r3
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 fe37 	bl	80088ee <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 fa43 	bl	800810c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007c86:	7bfb      	ldrb	r3, [r7, #15]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d004      	beq.n	8007c96 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2202      	movs	r2, #2
 8007c90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c94:	e008      	b.n	8007ca8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2201      	movs	r2, #1
 8007c9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c9e:	e003      	b.n	8007ca8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007ca0:	6839      	ldr	r1, [r7, #0]
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f96a 	bl	8007f7c <USBD_CtlError>
  }
}
 8007ca8:	bf00      	nop
 8007caa:	3710      	adds	r7, #16
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b082      	sub	sp, #8
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	885b      	ldrh	r3, [r3, #2]
 8007cbe:	b2da      	uxtb	r2, r3
 8007cc0:	4b41      	ldr	r3, [pc, #260]	; (8007dc8 <USBD_SetConfig+0x118>)
 8007cc2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007cc4:	4b40      	ldr	r3, [pc, #256]	; (8007dc8 <USBD_SetConfig+0x118>)
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d904      	bls.n	8007cd6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007ccc:	6839      	ldr	r1, [r7, #0]
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 f954 	bl	8007f7c <USBD_CtlError>
 8007cd4:	e075      	b.n	8007dc2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cdc:	2b02      	cmp	r3, #2
 8007cde:	d002      	beq.n	8007ce6 <USBD_SetConfig+0x36>
 8007ce0:	2b03      	cmp	r3, #3
 8007ce2:	d023      	beq.n	8007d2c <USBD_SetConfig+0x7c>
 8007ce4:	e062      	b.n	8007dac <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007ce6:	4b38      	ldr	r3, [pc, #224]	; (8007dc8 <USBD_SetConfig+0x118>)
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d01a      	beq.n	8007d24 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007cee:	4b36      	ldr	r3, [pc, #216]	; (8007dc8 <USBD_SetConfig+0x118>)
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2203      	movs	r2, #3
 8007cfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007d00:	4b31      	ldr	r3, [pc, #196]	; (8007dc8 <USBD_SetConfig+0x118>)
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	4619      	mov	r1, r3
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f7ff f9f3 	bl	80070f2 <USBD_SetClassConfig>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	2b02      	cmp	r3, #2
 8007d10:	d104      	bne.n	8007d1c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007d12:	6839      	ldr	r1, [r7, #0]
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 f931 	bl	8007f7c <USBD_CtlError>
            return;
 8007d1a:	e052      	b.n	8007dc2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 f9f5 	bl	800810c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007d22:	e04e      	b.n	8007dc2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 f9f1 	bl	800810c <USBD_CtlSendStatus>
        break;
 8007d2a:	e04a      	b.n	8007dc2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007d2c:	4b26      	ldr	r3, [pc, #152]	; (8007dc8 <USBD_SetConfig+0x118>)
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d112      	bne.n	8007d5a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2202      	movs	r2, #2
 8007d38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007d3c:	4b22      	ldr	r3, [pc, #136]	; (8007dc8 <USBD_SetConfig+0x118>)
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	461a      	mov	r2, r3
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007d46:	4b20      	ldr	r3, [pc, #128]	; (8007dc8 <USBD_SetConfig+0x118>)
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f7ff f9ef 	bl	8007130 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 f9da 	bl	800810c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007d58:	e033      	b.n	8007dc2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007d5a:	4b1b      	ldr	r3, [pc, #108]	; (8007dc8 <USBD_SetConfig+0x118>)
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	461a      	mov	r2, r3
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d01d      	beq.n	8007da4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	4619      	mov	r1, r3
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f7ff f9dd 	bl	8007130 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007d76:	4b14      	ldr	r3, [pc, #80]	; (8007dc8 <USBD_SetConfig+0x118>)
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007d80:	4b11      	ldr	r3, [pc, #68]	; (8007dc8 <USBD_SetConfig+0x118>)
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	4619      	mov	r1, r3
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f7ff f9b3 	bl	80070f2 <USBD_SetClassConfig>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	2b02      	cmp	r3, #2
 8007d90:	d104      	bne.n	8007d9c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007d92:	6839      	ldr	r1, [r7, #0]
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 f8f1 	bl	8007f7c <USBD_CtlError>
            return;
 8007d9a:	e012      	b.n	8007dc2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 f9b5 	bl	800810c <USBD_CtlSendStatus>
        break;
 8007da2:	e00e      	b.n	8007dc2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 f9b1 	bl	800810c <USBD_CtlSendStatus>
        break;
 8007daa:	e00a      	b.n	8007dc2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007dac:	6839      	ldr	r1, [r7, #0]
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 f8e4 	bl	8007f7c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007db4:	4b04      	ldr	r3, [pc, #16]	; (8007dc8 <USBD_SetConfig+0x118>)
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	4619      	mov	r1, r3
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f7ff f9b8 	bl	8007130 <USBD_ClrClassConfig>
        break;
 8007dc0:	bf00      	nop
    }
  }
}
 8007dc2:	3708      	adds	r7, #8
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}
 8007dc8:	200003b0 	.word	0x200003b0

08007dcc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b082      	sub	sp, #8
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	88db      	ldrh	r3, [r3, #6]
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d004      	beq.n	8007de8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007dde:	6839      	ldr	r1, [r7, #0]
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f000 f8cb 	bl	8007f7c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007de6:	e021      	b.n	8007e2c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	db17      	blt.n	8007e22 <USBD_GetConfig+0x56>
 8007df2:	2b02      	cmp	r3, #2
 8007df4:	dd02      	ble.n	8007dfc <USBD_GetConfig+0x30>
 8007df6:	2b03      	cmp	r3, #3
 8007df8:	d00b      	beq.n	8007e12 <USBD_GetConfig+0x46>
 8007dfa:	e012      	b.n	8007e22 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	3308      	adds	r3, #8
 8007e06:	2201      	movs	r2, #1
 8007e08:	4619      	mov	r1, r3
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 f920 	bl	8008050 <USBD_CtlSendData>
        break;
 8007e10:	e00c      	b.n	8007e2c <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	3304      	adds	r3, #4
 8007e16:	2201      	movs	r2, #1
 8007e18:	4619      	mov	r1, r3
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 f918 	bl	8008050 <USBD_CtlSendData>
        break;
 8007e20:	e004      	b.n	8007e2c <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8007e22:	6839      	ldr	r1, [r7, #0]
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 f8a9 	bl	8007f7c <USBD_CtlError>
        break;
 8007e2a:	bf00      	nop
}
 8007e2c:	bf00      	nop
 8007e2e:	3708      	adds	r7, #8
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e44:	3b01      	subs	r3, #1
 8007e46:	2b02      	cmp	r3, #2
 8007e48:	d81e      	bhi.n	8007e88 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	88db      	ldrh	r3, [r3, #6]
 8007e4e:	2b02      	cmp	r3, #2
 8007e50:	d004      	beq.n	8007e5c <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007e52:	6839      	ldr	r1, [r7, #0]
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f000 f891 	bl	8007f7c <USBD_CtlError>
        break;
 8007e5a:	e01a      	b.n	8007e92 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d005      	beq.n	8007e78 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	f043 0202 	orr.w	r2, r3, #2
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	330c      	adds	r3, #12
 8007e7c:	2202      	movs	r2, #2
 8007e7e:	4619      	mov	r1, r3
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 f8e5 	bl	8008050 <USBD_CtlSendData>
      break;
 8007e86:	e004      	b.n	8007e92 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007e88:	6839      	ldr	r1, [r7, #0]
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 f876 	bl	8007f7c <USBD_CtlError>
      break;
 8007e90:	bf00      	nop
  }
}
 8007e92:	bf00      	nop
 8007e94:	3708      	adds	r7, #8
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}

08007e9a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007e9a:	b580      	push	{r7, lr}
 8007e9c:	b082      	sub	sp, #8
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
 8007ea2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	885b      	ldrh	r3, [r3, #2]
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d106      	bne.n	8007eba <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 f929 	bl	800810c <USBD_CtlSendStatus>
  }
}
 8007eba:	bf00      	nop
 8007ebc:	3708      	adds	r7, #8
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}

08007ec2 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007ec2:	b580      	push	{r7, lr}
 8007ec4:	b082      	sub	sp, #8
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	6078      	str	r0, [r7, #4]
 8007eca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ed2:	3b01      	subs	r3, #1
 8007ed4:	2b02      	cmp	r3, #2
 8007ed6:	d80b      	bhi.n	8007ef0 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	885b      	ldrh	r3, [r3, #2]
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d10c      	bne.n	8007efa <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 f90f 	bl	800810c <USBD_CtlSendStatus>
      }
      break;
 8007eee:	e004      	b.n	8007efa <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007ef0:	6839      	ldr	r1, [r7, #0]
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 f842 	bl	8007f7c <USBD_CtlError>
      break;
 8007ef8:	e000      	b.n	8007efc <USBD_ClrFeature+0x3a>
      break;
 8007efa:	bf00      	nop
  }
}
 8007efc:	bf00      	nop
 8007efe:	3708      	adds	r7, #8
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b083      	sub	sp, #12
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	781a      	ldrb	r2, [r3, #0]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	785a      	ldrb	r2, [r3, #1]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	3302      	adds	r3, #2
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	b29a      	uxth	r2, r3
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	3303      	adds	r3, #3
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	021b      	lsls	r3, r3, #8
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	4413      	add	r3, r2
 8007f34:	b29a      	uxth	r2, r3
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	3304      	adds	r3, #4
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	b29a      	uxth	r2, r3
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	3305      	adds	r3, #5
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	021b      	lsls	r3, r3, #8
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	4413      	add	r3, r2
 8007f50:	b29a      	uxth	r2, r3
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	3306      	adds	r3, #6
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	b29a      	uxth	r2, r3
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	3307      	adds	r3, #7
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	021b      	lsls	r3, r3, #8
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	4413      	add	r3, r2
 8007f6c:	b29a      	uxth	r2, r3
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	80da      	strh	r2, [r3, #6]

}
 8007f72:	bf00      	nop
 8007f74:	370c      	adds	r7, #12
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bc80      	pop	{r7}
 8007f7a:	4770      	bx	lr

08007f7c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b082      	sub	sp, #8
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007f86:	2180      	movs	r1, #128	; 0x80
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 fc4d 	bl	8008828 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007f8e:	2100      	movs	r1, #0
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 fc49 	bl	8008828 <USBD_LL_StallEP>
}
 8007f96:	bf00      	nop
 8007f98:	3708      	adds	r7, #8
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}

08007f9e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007f9e:	b580      	push	{r7, lr}
 8007fa0:	b086      	sub	sp, #24
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	60f8      	str	r0, [r7, #12]
 8007fa6:	60b9      	str	r1, [r7, #8]
 8007fa8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007faa:	2300      	movs	r3, #0
 8007fac:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d032      	beq.n	800801a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007fb4:	68f8      	ldr	r0, [r7, #12]
 8007fb6:	f000 f834 	bl	8008022 <USBD_GetLen>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	005b      	lsls	r3, r3, #1
 8007fc2:	b29a      	uxth	r2, r3
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007fc8:	7dfb      	ldrb	r3, [r7, #23]
 8007fca:	1c5a      	adds	r2, r3, #1
 8007fcc:	75fa      	strb	r2, [r7, #23]
 8007fce:	461a      	mov	r2, r3
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	4413      	add	r3, r2
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	7812      	ldrb	r2, [r2, #0]
 8007fd8:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007fda:	7dfb      	ldrb	r3, [r7, #23]
 8007fdc:	1c5a      	adds	r2, r3, #1
 8007fde:	75fa      	strb	r2, [r7, #23]
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	4413      	add	r3, r2
 8007fe6:	2203      	movs	r2, #3
 8007fe8:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007fea:	e012      	b.n	8008012 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	1c5a      	adds	r2, r3, #1
 8007ff0:	60fa      	str	r2, [r7, #12]
 8007ff2:	7dfa      	ldrb	r2, [r7, #23]
 8007ff4:	1c51      	adds	r1, r2, #1
 8007ff6:	75f9      	strb	r1, [r7, #23]
 8007ff8:	4611      	mov	r1, r2
 8007ffa:	68ba      	ldr	r2, [r7, #8]
 8007ffc:	440a      	add	r2, r1
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008002:	7dfb      	ldrb	r3, [r7, #23]
 8008004:	1c5a      	adds	r2, r3, #1
 8008006:	75fa      	strb	r2, [r7, #23]
 8008008:	461a      	mov	r2, r3
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	4413      	add	r3, r2
 800800e:	2200      	movs	r2, #0
 8008010:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d1e8      	bne.n	8007fec <USBD_GetString+0x4e>
    }
  }
}
 800801a:	bf00      	nop
 800801c:	3718      	adds	r7, #24
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}

08008022 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008022:	b480      	push	{r7}
 8008024:	b085      	sub	sp, #20
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800802a:	2300      	movs	r3, #0
 800802c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800802e:	e005      	b.n	800803c <USBD_GetLen+0x1a>
  {
    len++;
 8008030:	7bfb      	ldrb	r3, [r7, #15]
 8008032:	3301      	adds	r3, #1
 8008034:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	3301      	adds	r3, #1
 800803a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d1f5      	bne.n	8008030 <USBD_GetLen+0xe>
  }

  return len;
 8008044:	7bfb      	ldrb	r3, [r7, #15]
}
 8008046:	4618      	mov	r0, r3
 8008048:	3714      	adds	r7, #20
 800804a:	46bd      	mov	sp, r7
 800804c:	bc80      	pop	{r7}
 800804e:	4770      	bx	lr

08008050 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b084      	sub	sp, #16
 8008054:	af00      	add	r7, sp, #0
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	4613      	mov	r3, r2
 800805c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2202      	movs	r2, #2
 8008062:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008066:	88fa      	ldrh	r2, [r7, #6]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800806c:	88fa      	ldrh	r2, [r7, #6]
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008072:	88fb      	ldrh	r3, [r7, #6]
 8008074:	68ba      	ldr	r2, [r7, #8]
 8008076:	2100      	movs	r1, #0
 8008078:	68f8      	ldr	r0, [r7, #12]
 800807a:	f000 fc57 	bl	800892c <USBD_LL_Transmit>

  return USBD_OK;
 800807e:	2300      	movs	r3, #0
}
 8008080:	4618      	mov	r0, r3
 8008082:	3710      	adds	r7, #16
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b084      	sub	sp, #16
 800808c:	af00      	add	r7, sp, #0
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	60b9      	str	r1, [r7, #8]
 8008092:	4613      	mov	r3, r2
 8008094:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008096:	88fb      	ldrh	r3, [r7, #6]
 8008098:	68ba      	ldr	r2, [r7, #8]
 800809a:	2100      	movs	r1, #0
 800809c:	68f8      	ldr	r0, [r7, #12]
 800809e:	f000 fc45 	bl	800892c <USBD_LL_Transmit>

  return USBD_OK;
 80080a2:	2300      	movs	r3, #0
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3710      	adds	r7, #16
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}

080080ac <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	4613      	mov	r3, r2
 80080b8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2203      	movs	r2, #3
 80080be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80080c2:	88fa      	ldrh	r2, [r7, #6]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80080ca:	88fa      	ldrh	r2, [r7, #6]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80080d2:	88fb      	ldrh	r3, [r7, #6]
 80080d4:	68ba      	ldr	r2, [r7, #8]
 80080d6:	2100      	movs	r1, #0
 80080d8:	68f8      	ldr	r0, [r7, #12]
 80080da:	f000 fc4a 	bl	8008972 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80080de:	2300      	movs	r3, #0
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3710      	adds	r7, #16
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	60f8      	str	r0, [r7, #12]
 80080f0:	60b9      	str	r1, [r7, #8]
 80080f2:	4613      	mov	r3, r2
 80080f4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80080f6:	88fb      	ldrh	r3, [r7, #6]
 80080f8:	68ba      	ldr	r2, [r7, #8]
 80080fa:	2100      	movs	r1, #0
 80080fc:	68f8      	ldr	r0, [r7, #12]
 80080fe:	f000 fc38 	bl	8008972 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008102:	2300      	movs	r3, #0
}
 8008104:	4618      	mov	r0, r3
 8008106:	3710      	adds	r7, #16
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b082      	sub	sp, #8
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2204      	movs	r2, #4
 8008118:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800811c:	2300      	movs	r3, #0
 800811e:	2200      	movs	r2, #0
 8008120:	2100      	movs	r1, #0
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 fc02 	bl	800892c <USBD_LL_Transmit>

  return USBD_OK;
 8008128:	2300      	movs	r3, #0
}
 800812a:	4618      	mov	r0, r3
 800812c:	3708      	adds	r7, #8
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}

08008132 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008132:	b580      	push	{r7, lr}
 8008134:	b082      	sub	sp, #8
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2205      	movs	r2, #5
 800813e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008142:	2300      	movs	r3, #0
 8008144:	2200      	movs	r2, #0
 8008146:	2100      	movs	r1, #0
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f000 fc12 	bl	8008972 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800814e:	2300      	movs	r3, #0
}
 8008150:	4618      	mov	r0, r3
 8008152:	3708      	adds	r7, #8
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800815c:	2200      	movs	r2, #0
 800815e:	4912      	ldr	r1, [pc, #72]	; (80081a8 <MX_USB_DEVICE_Init+0x50>)
 8008160:	4812      	ldr	r0, [pc, #72]	; (80081ac <MX_USB_DEVICE_Init+0x54>)
 8008162:	f7fe ff6c 	bl	800703e <USBD_Init>
 8008166:	4603      	mov	r3, r0
 8008168:	2b00      	cmp	r3, #0
 800816a:	d001      	beq.n	8008170 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800816c:	f7f9 ffeb 	bl	8002146 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008170:	490f      	ldr	r1, [pc, #60]	; (80081b0 <MX_USB_DEVICE_Init+0x58>)
 8008172:	480e      	ldr	r0, [pc, #56]	; (80081ac <MX_USB_DEVICE_Init+0x54>)
 8008174:	f7fe ff8e 	bl	8007094 <USBD_RegisterClass>
 8008178:	4603      	mov	r3, r0
 800817a:	2b00      	cmp	r3, #0
 800817c:	d001      	beq.n	8008182 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800817e:	f7f9 ffe2 	bl	8002146 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008182:	490c      	ldr	r1, [pc, #48]	; (80081b4 <MX_USB_DEVICE_Init+0x5c>)
 8008184:	4809      	ldr	r0, [pc, #36]	; (80081ac <MX_USB_DEVICE_Init+0x54>)
 8008186:	f7fe febf 	bl	8006f08 <USBD_CDC_RegisterInterface>
 800818a:	4603      	mov	r3, r0
 800818c:	2b00      	cmp	r3, #0
 800818e:	d001      	beq.n	8008194 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008190:	f7f9 ffd9 	bl	8002146 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008194:	4805      	ldr	r0, [pc, #20]	; (80081ac <MX_USB_DEVICE_Init+0x54>)
 8008196:	f7fe ff96 	bl	80070c6 <USBD_Start>
 800819a:	4603      	mov	r3, r0
 800819c:	2b00      	cmp	r3, #0
 800819e:	d001      	beq.n	80081a4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80081a0:	f7f9 ffd1 	bl	8002146 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80081a4:	bf00      	nop
 80081a6:	bd80      	pop	{r7, pc}
 80081a8:	2000012c 	.word	0x2000012c
 80081ac:	200006c4 	.word	0x200006c4
 80081b0:	20000018 	.word	0x20000018
 80081b4:	2000011c 	.word	0x2000011c

080081b8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80081bc:	2200      	movs	r2, #0
 80081be:	4905      	ldr	r1, [pc, #20]	; (80081d4 <CDC_Init_FS+0x1c>)
 80081c0:	4805      	ldr	r0, [pc, #20]	; (80081d8 <CDC_Init_FS+0x20>)
 80081c2:	f7fe feb7 	bl	8006f34 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80081c6:	4905      	ldr	r1, [pc, #20]	; (80081dc <CDC_Init_FS+0x24>)
 80081c8:	4803      	ldr	r0, [pc, #12]	; (80081d8 <CDC_Init_FS+0x20>)
 80081ca:	f7fe fecc 	bl	8006f66 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80081ce:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	bd80      	pop	{r7, pc}
 80081d4:	20000d70 	.word	0x20000d70
 80081d8:	200006c4 	.word	0x200006c4
 80081dc:	20000988 	.word	0x20000988

080081e0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80081e0:	b480      	push	{r7}
 80081e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80081e4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bc80      	pop	{r7}
 80081ec:	4770      	bx	lr
	...

080081f0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b083      	sub	sp, #12
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	4603      	mov	r3, r0
 80081f8:	6039      	str	r1, [r7, #0]
 80081fa:	71fb      	strb	r3, [r7, #7]
 80081fc:	4613      	mov	r3, r2
 80081fe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008200:	79fb      	ldrb	r3, [r7, #7]
 8008202:	2b23      	cmp	r3, #35	; 0x23
 8008204:	d84a      	bhi.n	800829c <CDC_Control_FS+0xac>
 8008206:	a201      	add	r2, pc, #4	; (adr r2, 800820c <CDC_Control_FS+0x1c>)
 8008208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800820c:	0800829d 	.word	0x0800829d
 8008210:	0800829d 	.word	0x0800829d
 8008214:	0800829d 	.word	0x0800829d
 8008218:	0800829d 	.word	0x0800829d
 800821c:	0800829d 	.word	0x0800829d
 8008220:	0800829d 	.word	0x0800829d
 8008224:	0800829d 	.word	0x0800829d
 8008228:	0800829d 	.word	0x0800829d
 800822c:	0800829d 	.word	0x0800829d
 8008230:	0800829d 	.word	0x0800829d
 8008234:	0800829d 	.word	0x0800829d
 8008238:	0800829d 	.word	0x0800829d
 800823c:	0800829d 	.word	0x0800829d
 8008240:	0800829d 	.word	0x0800829d
 8008244:	0800829d 	.word	0x0800829d
 8008248:	0800829d 	.word	0x0800829d
 800824c:	0800829d 	.word	0x0800829d
 8008250:	0800829d 	.word	0x0800829d
 8008254:	0800829d 	.word	0x0800829d
 8008258:	0800829d 	.word	0x0800829d
 800825c:	0800829d 	.word	0x0800829d
 8008260:	0800829d 	.word	0x0800829d
 8008264:	0800829d 	.word	0x0800829d
 8008268:	0800829d 	.word	0x0800829d
 800826c:	0800829d 	.word	0x0800829d
 8008270:	0800829d 	.word	0x0800829d
 8008274:	0800829d 	.word	0x0800829d
 8008278:	0800829d 	.word	0x0800829d
 800827c:	0800829d 	.word	0x0800829d
 8008280:	0800829d 	.word	0x0800829d
 8008284:	0800829d 	.word	0x0800829d
 8008288:	0800829d 	.word	0x0800829d
 800828c:	0800829d 	.word	0x0800829d
 8008290:	0800829d 	.word	0x0800829d
 8008294:	0800829d 	.word	0x0800829d
 8008298:	0800829d 	.word	0x0800829d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800829c:	bf00      	nop
  }

  return (USBD_OK);
 800829e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	370c      	adds	r7, #12
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bc80      	pop	{r7}
 80082a8:	4770      	bx	lr
 80082aa:	bf00      	nop

080082ac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b082      	sub	sp, #8
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80082b6:	6879      	ldr	r1, [r7, #4]
 80082b8:	4805      	ldr	r0, [pc, #20]	; (80082d0 <CDC_Receive_FS+0x24>)
 80082ba:	f7fe fe54 	bl	8006f66 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80082be:	4804      	ldr	r0, [pc, #16]	; (80082d0 <CDC_Receive_FS+0x24>)
 80082c0:	f7fe fe93 	bl	8006fea <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80082c4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3708      	adds	r7, #8
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
 80082ce:	bf00      	nop
 80082d0:	200006c4 	.word	0x200006c4

080082d4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b084      	sub	sp, #16
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	460b      	mov	r3, r1
 80082de:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80082e0:	2300      	movs	r3, #0
 80082e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80082e4:	4b0d      	ldr	r3, [pc, #52]	; (800831c <CDC_Transmit_FS+0x48>)
 80082e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082ea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d001      	beq.n	80082fa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80082f6:	2301      	movs	r3, #1
 80082f8:	e00b      	b.n	8008312 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80082fa:	887b      	ldrh	r3, [r7, #2]
 80082fc:	461a      	mov	r2, r3
 80082fe:	6879      	ldr	r1, [r7, #4]
 8008300:	4806      	ldr	r0, [pc, #24]	; (800831c <CDC_Transmit_FS+0x48>)
 8008302:	f7fe fe17 	bl	8006f34 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008306:	4805      	ldr	r0, [pc, #20]	; (800831c <CDC_Transmit_FS+0x48>)
 8008308:	f7fe fe40 	bl	8006f8c <USBD_CDC_TransmitPacket>
 800830c:	4603      	mov	r3, r0
 800830e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008310:	7bfb      	ldrb	r3, [r7, #15]
}
 8008312:	4618      	mov	r0, r3
 8008314:	3710      	adds	r7, #16
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
 800831a:	bf00      	nop
 800831c:	200006c4 	.word	0x200006c4

08008320 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008320:	b480      	push	{r7}
 8008322:	b083      	sub	sp, #12
 8008324:	af00      	add	r7, sp, #0
 8008326:	4603      	mov	r3, r0
 8008328:	6039      	str	r1, [r7, #0]
 800832a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	2212      	movs	r2, #18
 8008330:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008332:	4b03      	ldr	r3, [pc, #12]	; (8008340 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008334:	4618      	mov	r0, r3
 8008336:	370c      	adds	r7, #12
 8008338:	46bd      	mov	sp, r7
 800833a:	bc80      	pop	{r7}
 800833c:	4770      	bx	lr
 800833e:	bf00      	nop
 8008340:	20000148 	.word	0x20000148

08008344 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008344:	b480      	push	{r7}
 8008346:	b083      	sub	sp, #12
 8008348:	af00      	add	r7, sp, #0
 800834a:	4603      	mov	r3, r0
 800834c:	6039      	str	r1, [r7, #0]
 800834e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	2204      	movs	r2, #4
 8008354:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008356:	4b03      	ldr	r3, [pc, #12]	; (8008364 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008358:	4618      	mov	r0, r3
 800835a:	370c      	adds	r7, #12
 800835c:	46bd      	mov	sp, r7
 800835e:	bc80      	pop	{r7}
 8008360:	4770      	bx	lr
 8008362:	bf00      	nop
 8008364:	2000015c 	.word	0x2000015c

08008368 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
 800836e:	4603      	mov	r3, r0
 8008370:	6039      	str	r1, [r7, #0]
 8008372:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008374:	79fb      	ldrb	r3, [r7, #7]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d105      	bne.n	8008386 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800837a:	683a      	ldr	r2, [r7, #0]
 800837c:	4907      	ldr	r1, [pc, #28]	; (800839c <USBD_FS_ProductStrDescriptor+0x34>)
 800837e:	4808      	ldr	r0, [pc, #32]	; (80083a0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008380:	f7ff fe0d 	bl	8007f9e <USBD_GetString>
 8008384:	e004      	b.n	8008390 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008386:	683a      	ldr	r2, [r7, #0]
 8008388:	4904      	ldr	r1, [pc, #16]	; (800839c <USBD_FS_ProductStrDescriptor+0x34>)
 800838a:	4805      	ldr	r0, [pc, #20]	; (80083a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800838c:	f7ff fe07 	bl	8007f9e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008390:	4b02      	ldr	r3, [pc, #8]	; (800839c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008392:	4618      	mov	r0, r3
 8008394:	3708      	adds	r7, #8
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
 800839a:	bf00      	nop
 800839c:	20001158 	.word	0x20001158
 80083a0:	0800b86c 	.word	0x0800b86c

080083a4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	4603      	mov	r3, r0
 80083ac:	6039      	str	r1, [r7, #0]
 80083ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80083b0:	683a      	ldr	r2, [r7, #0]
 80083b2:	4904      	ldr	r1, [pc, #16]	; (80083c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80083b4:	4804      	ldr	r0, [pc, #16]	; (80083c8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80083b6:	f7ff fdf2 	bl	8007f9e <USBD_GetString>
  return USBD_StrDesc;
 80083ba:	4b02      	ldr	r3, [pc, #8]	; (80083c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3708      	adds	r7, #8
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}
 80083c4:	20001158 	.word	0x20001158
 80083c8:	0800b884 	.word	0x0800b884

080083cc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b082      	sub	sp, #8
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	4603      	mov	r3, r0
 80083d4:	6039      	str	r1, [r7, #0]
 80083d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	221a      	movs	r2, #26
 80083dc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80083de:	f000 f843 	bl	8008468 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80083e2:	4b02      	ldr	r3, [pc, #8]	; (80083ec <USBD_FS_SerialStrDescriptor+0x20>)
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3708      	adds	r7, #8
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}
 80083ec:	20000160 	.word	0x20000160

080083f0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b082      	sub	sp, #8
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	4603      	mov	r3, r0
 80083f8:	6039      	str	r1, [r7, #0]
 80083fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80083fc:	79fb      	ldrb	r3, [r7, #7]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d105      	bne.n	800840e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008402:	683a      	ldr	r2, [r7, #0]
 8008404:	4907      	ldr	r1, [pc, #28]	; (8008424 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008406:	4808      	ldr	r0, [pc, #32]	; (8008428 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008408:	f7ff fdc9 	bl	8007f9e <USBD_GetString>
 800840c:	e004      	b.n	8008418 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800840e:	683a      	ldr	r2, [r7, #0]
 8008410:	4904      	ldr	r1, [pc, #16]	; (8008424 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008412:	4805      	ldr	r0, [pc, #20]	; (8008428 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008414:	f7ff fdc3 	bl	8007f9e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008418:	4b02      	ldr	r3, [pc, #8]	; (8008424 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800841a:	4618      	mov	r0, r3
 800841c:	3708      	adds	r7, #8
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
 8008422:	bf00      	nop
 8008424:	20001158 	.word	0x20001158
 8008428:	0800b898 	.word	0x0800b898

0800842c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b082      	sub	sp, #8
 8008430:	af00      	add	r7, sp, #0
 8008432:	4603      	mov	r3, r0
 8008434:	6039      	str	r1, [r7, #0]
 8008436:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008438:	79fb      	ldrb	r3, [r7, #7]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d105      	bne.n	800844a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800843e:	683a      	ldr	r2, [r7, #0]
 8008440:	4907      	ldr	r1, [pc, #28]	; (8008460 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008442:	4808      	ldr	r0, [pc, #32]	; (8008464 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008444:	f7ff fdab 	bl	8007f9e <USBD_GetString>
 8008448:	e004      	b.n	8008454 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800844a:	683a      	ldr	r2, [r7, #0]
 800844c:	4904      	ldr	r1, [pc, #16]	; (8008460 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800844e:	4805      	ldr	r0, [pc, #20]	; (8008464 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008450:	f7ff fda5 	bl	8007f9e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008454:	4b02      	ldr	r3, [pc, #8]	; (8008460 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008456:	4618      	mov	r0, r3
 8008458:	3708      	adds	r7, #8
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
 800845e:	bf00      	nop
 8008460:	20001158 	.word	0x20001158
 8008464:	0800b8a4 	.word	0x0800b8a4

08008468 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b084      	sub	sp, #16
 800846c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800846e:	4b0f      	ldr	r3, [pc, #60]	; (80084ac <Get_SerialNum+0x44>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008474:	4b0e      	ldr	r3, [pc, #56]	; (80084b0 <Get_SerialNum+0x48>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800847a:	4b0e      	ldr	r3, [pc, #56]	; (80084b4 <Get_SerialNum+0x4c>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008480:	68fa      	ldr	r2, [r7, #12]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	4413      	add	r3, r2
 8008486:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d009      	beq.n	80084a2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800848e:	2208      	movs	r2, #8
 8008490:	4909      	ldr	r1, [pc, #36]	; (80084b8 <Get_SerialNum+0x50>)
 8008492:	68f8      	ldr	r0, [r7, #12]
 8008494:	f000 f814 	bl	80084c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008498:	2204      	movs	r2, #4
 800849a:	4908      	ldr	r1, [pc, #32]	; (80084bc <Get_SerialNum+0x54>)
 800849c:	68b8      	ldr	r0, [r7, #8]
 800849e:	f000 f80f 	bl	80084c0 <IntToUnicode>
  }
}
 80084a2:	bf00      	nop
 80084a4:	3710      	adds	r7, #16
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	1ffff7e8 	.word	0x1ffff7e8
 80084b0:	1ffff7ec 	.word	0x1ffff7ec
 80084b4:	1ffff7f0 	.word	0x1ffff7f0
 80084b8:	20000162 	.word	0x20000162
 80084bc:	20000172 	.word	0x20000172

080084c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b087      	sub	sp, #28
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	4613      	mov	r3, r2
 80084cc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80084ce:	2300      	movs	r3, #0
 80084d0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80084d2:	2300      	movs	r3, #0
 80084d4:	75fb      	strb	r3, [r7, #23]
 80084d6:	e027      	b.n	8008528 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	0f1b      	lsrs	r3, r3, #28
 80084dc:	2b09      	cmp	r3, #9
 80084de:	d80b      	bhi.n	80084f8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	0f1b      	lsrs	r3, r3, #28
 80084e4:	b2da      	uxtb	r2, r3
 80084e6:	7dfb      	ldrb	r3, [r7, #23]
 80084e8:	005b      	lsls	r3, r3, #1
 80084ea:	4619      	mov	r1, r3
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	440b      	add	r3, r1
 80084f0:	3230      	adds	r2, #48	; 0x30
 80084f2:	b2d2      	uxtb	r2, r2
 80084f4:	701a      	strb	r2, [r3, #0]
 80084f6:	e00a      	b.n	800850e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	0f1b      	lsrs	r3, r3, #28
 80084fc:	b2da      	uxtb	r2, r3
 80084fe:	7dfb      	ldrb	r3, [r7, #23]
 8008500:	005b      	lsls	r3, r3, #1
 8008502:	4619      	mov	r1, r3
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	440b      	add	r3, r1
 8008508:	3237      	adds	r2, #55	; 0x37
 800850a:	b2d2      	uxtb	r2, r2
 800850c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	011b      	lsls	r3, r3, #4
 8008512:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008514:	7dfb      	ldrb	r3, [r7, #23]
 8008516:	005b      	lsls	r3, r3, #1
 8008518:	3301      	adds	r3, #1
 800851a:	68ba      	ldr	r2, [r7, #8]
 800851c:	4413      	add	r3, r2
 800851e:	2200      	movs	r2, #0
 8008520:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008522:	7dfb      	ldrb	r3, [r7, #23]
 8008524:	3301      	adds	r3, #1
 8008526:	75fb      	strb	r3, [r7, #23]
 8008528:	7dfa      	ldrb	r2, [r7, #23]
 800852a:	79fb      	ldrb	r3, [r7, #7]
 800852c:	429a      	cmp	r2, r3
 800852e:	d3d3      	bcc.n	80084d8 <IntToUnicode+0x18>
  }
}
 8008530:	bf00      	nop
 8008532:	371c      	adds	r7, #28
 8008534:	46bd      	mov	sp, r7
 8008536:	bc80      	pop	{r7}
 8008538:	4770      	bx	lr
	...

0800853c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b084      	sub	sp, #16
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a0d      	ldr	r2, [pc, #52]	; (8008580 <HAL_PCD_MspInit+0x44>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d113      	bne.n	8008576 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800854e:	4b0d      	ldr	r3, [pc, #52]	; (8008584 <HAL_PCD_MspInit+0x48>)
 8008550:	69db      	ldr	r3, [r3, #28]
 8008552:	4a0c      	ldr	r2, [pc, #48]	; (8008584 <HAL_PCD_MspInit+0x48>)
 8008554:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008558:	61d3      	str	r3, [r2, #28]
 800855a:	4b0a      	ldr	r3, [pc, #40]	; (8008584 <HAL_PCD_MspInit+0x48>)
 800855c:	69db      	ldr	r3, [r3, #28]
 800855e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008562:	60fb      	str	r3, [r7, #12]
 8008564:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008566:	2200      	movs	r2, #0
 8008568:	2100      	movs	r1, #0
 800856a:	2014      	movs	r0, #20
 800856c:	f7fa f8f7 	bl	800275e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008570:	2014      	movs	r0, #20
 8008572:	f7fa f910 	bl	8002796 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008576:	bf00      	nop
 8008578:	3710      	adds	r7, #16
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
 800857e:	bf00      	nop
 8008580:	40005c00 	.word	0x40005c00
 8008584:	40021000 	.word	0x40021000

08008588 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b082      	sub	sp, #8
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800859c:	4619      	mov	r1, r3
 800859e:	4610      	mov	r0, r2
 80085a0:	f7fe fdd9 	bl	8007156 <USBD_LL_SetupStage>
}
 80085a4:	bf00      	nop
 80085a6:	3708      	adds	r7, #8
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b082      	sub	sp, #8
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	460b      	mov	r3, r1
 80085b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 80085be:	78fb      	ldrb	r3, [r7, #3]
 80085c0:	687a      	ldr	r2, [r7, #4]
 80085c2:	015b      	lsls	r3, r3, #5
 80085c4:	4413      	add	r3, r2
 80085c6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	78fb      	ldrb	r3, [r7, #3]
 80085ce:	4619      	mov	r1, r3
 80085d0:	f7fe fe0c 	bl	80071ec <USBD_LL_DataOutStage>
}
 80085d4:	bf00      	nop
 80085d6:	3708      	adds	r7, #8
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b082      	sub	sp, #8
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	460b      	mov	r3, r1
 80085e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 80085ee:	78fb      	ldrb	r3, [r7, #3]
 80085f0:	687a      	ldr	r2, [r7, #4]
 80085f2:	015b      	lsls	r3, r3, #5
 80085f4:	4413      	add	r3, r2
 80085f6:	333c      	adds	r3, #60	; 0x3c
 80085f8:	681a      	ldr	r2, [r3, #0]
 80085fa:	78fb      	ldrb	r3, [r7, #3]
 80085fc:	4619      	mov	r1, r3
 80085fe:	f7fe fe66 	bl	80072ce <USBD_LL_DataInStage>
}
 8008602:	bf00      	nop
 8008604:	3708      	adds	r7, #8
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}

0800860a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800860a:	b580      	push	{r7, lr}
 800860c:	b082      	sub	sp, #8
 800860e:	af00      	add	r7, sp, #0
 8008610:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008618:	4618      	mov	r0, r3
 800861a:	f7fe ff76 	bl	800750a <USBD_LL_SOF>
}
 800861e:	bf00      	nop
 8008620:	3708      	adds	r7, #8
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}

08008626 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8008626:	b580      	push	{r7, lr}
 8008628:	b084      	sub	sp, #16
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800862e:	2301      	movs	r3, #1
 8008630:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	2b02      	cmp	r3, #2
 8008638:	d001      	beq.n	800863e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800863a:	f7f9 fd84 	bl	8002146 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008644:	7bfa      	ldrb	r2, [r7, #15]
 8008646:	4611      	mov	r1, r2
 8008648:	4618      	mov	r0, r3
 800864a:	f7fe ff26 	bl	800749a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008654:	4618      	mov	r0, r3
 8008656:	f7fe fedf 	bl	8007418 <USBD_LL_Reset>
}
 800865a:	bf00      	nop
 800865c:	3710      	adds	r7, #16
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
	...

08008664 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b082      	sub	sp, #8
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008672:	4618      	mov	r0, r3
 8008674:	f7fe ff20 	bl	80074b8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	699b      	ldr	r3, [r3, #24]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d005      	beq.n	800868c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008680:	4b04      	ldr	r3, [pc, #16]	; (8008694 <HAL_PCD_SuspendCallback+0x30>)
 8008682:	691b      	ldr	r3, [r3, #16]
 8008684:	4a03      	ldr	r2, [pc, #12]	; (8008694 <HAL_PCD_SuspendCallback+0x30>)
 8008686:	f043 0306 	orr.w	r3, r3, #6
 800868a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800868c:	bf00      	nop
 800868e:	3708      	adds	r7, #8
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}
 8008694:	e000ed00 	.word	0xe000ed00

08008698 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80086a6:	4618      	mov	r0, r3
 80086a8:	f7fe ff1a 	bl	80074e0 <USBD_LL_Resume>
}
 80086ac:	bf00      	nop
 80086ae:	3708      	adds	r7, #8
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b082      	sub	sp, #8
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80086bc:	4a28      	ldr	r2, [pc, #160]	; (8008760 <USBD_LL_Init+0xac>)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	4a26      	ldr	r2, [pc, #152]	; (8008760 <USBD_LL_Init+0xac>)
 80086c8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80086cc:	4b24      	ldr	r3, [pc, #144]	; (8008760 <USBD_LL_Init+0xac>)
 80086ce:	4a25      	ldr	r2, [pc, #148]	; (8008764 <USBD_LL_Init+0xb0>)
 80086d0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80086d2:	4b23      	ldr	r3, [pc, #140]	; (8008760 <USBD_LL_Init+0xac>)
 80086d4:	2208      	movs	r2, #8
 80086d6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80086d8:	4b21      	ldr	r3, [pc, #132]	; (8008760 <USBD_LL_Init+0xac>)
 80086da:	2202      	movs	r2, #2
 80086dc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80086de:	4b20      	ldr	r3, [pc, #128]	; (8008760 <USBD_LL_Init+0xac>)
 80086e0:	2200      	movs	r2, #0
 80086e2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80086e4:	4b1e      	ldr	r3, [pc, #120]	; (8008760 <USBD_LL_Init+0xac>)
 80086e6:	2200      	movs	r2, #0
 80086e8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80086ea:	4b1d      	ldr	r3, [pc, #116]	; (8008760 <USBD_LL_Init+0xac>)
 80086ec:	2200      	movs	r2, #0
 80086ee:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80086f0:	481b      	ldr	r0, [pc, #108]	; (8008760 <USBD_LL_Init+0xac>)
 80086f2:	f7fb f953 	bl	800399c <HAL_PCD_Init>
 80086f6:	4603      	mov	r3, r0
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d001      	beq.n	8008700 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80086fc:	f7f9 fd23 	bl	8002146 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008706:	2318      	movs	r3, #24
 8008708:	2200      	movs	r2, #0
 800870a:	2100      	movs	r1, #0
 800870c:	f7fb ffec 	bl	80046e8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008716:	2358      	movs	r3, #88	; 0x58
 8008718:	2200      	movs	r2, #0
 800871a:	2180      	movs	r1, #128	; 0x80
 800871c:	f7fb ffe4 	bl	80046e8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008726:	23c0      	movs	r3, #192	; 0xc0
 8008728:	2200      	movs	r2, #0
 800872a:	2181      	movs	r1, #129	; 0x81
 800872c:	f7fb ffdc 	bl	80046e8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008736:	f44f 7388 	mov.w	r3, #272	; 0x110
 800873a:	2200      	movs	r2, #0
 800873c:	2101      	movs	r1, #1
 800873e:	f7fb ffd3 	bl	80046e8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008748:	f44f 7380 	mov.w	r3, #256	; 0x100
 800874c:	2200      	movs	r2, #0
 800874e:	2182      	movs	r1, #130	; 0x82
 8008750:	f7fb ffca 	bl	80046e8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008754:	2300      	movs	r3, #0
}
 8008756:	4618      	mov	r0, r3
 8008758:	3708      	adds	r7, #8
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
 800875e:	bf00      	nop
 8008760:	20001358 	.word	0x20001358
 8008764:	40005c00 	.word	0x40005c00

08008768 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008770:	2300      	movs	r3, #0
 8008772:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008774:	2300      	movs	r3, #0
 8008776:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800877e:	4618      	mov	r0, r3
 8008780:	f7fb f9ed 	bl	8003b5e <HAL_PCD_Start>
 8008784:	4603      	mov	r3, r0
 8008786:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008788:	7bfb      	ldrb	r3, [r7, #15]
 800878a:	4618      	mov	r0, r3
 800878c:	f000 f948 	bl	8008a20 <USBD_Get_USB_Status>
 8008790:	4603      	mov	r3, r0
 8008792:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008794:	7bbb      	ldrb	r3, [r7, #14]
}
 8008796:	4618      	mov	r0, r3
 8008798:	3710      	adds	r7, #16
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}

0800879e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800879e:	b580      	push	{r7, lr}
 80087a0:	b084      	sub	sp, #16
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
 80087a6:	4608      	mov	r0, r1
 80087a8:	4611      	mov	r1, r2
 80087aa:	461a      	mov	r2, r3
 80087ac:	4603      	mov	r3, r0
 80087ae:	70fb      	strb	r3, [r7, #3]
 80087b0:	460b      	mov	r3, r1
 80087b2:	70bb      	strb	r3, [r7, #2]
 80087b4:	4613      	mov	r3, r2
 80087b6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087b8:	2300      	movs	r3, #0
 80087ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087bc:	2300      	movs	r3, #0
 80087be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80087c6:	78bb      	ldrb	r3, [r7, #2]
 80087c8:	883a      	ldrh	r2, [r7, #0]
 80087ca:	78f9      	ldrb	r1, [r7, #3]
 80087cc:	f7fb fb20 	bl	8003e10 <HAL_PCD_EP_Open>
 80087d0:	4603      	mov	r3, r0
 80087d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087d4:	7bfb      	ldrb	r3, [r7, #15]
 80087d6:	4618      	mov	r0, r3
 80087d8:	f000 f922 	bl	8008a20 <USBD_Get_USB_Status>
 80087dc:	4603      	mov	r3, r0
 80087de:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80087e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3710      	adds	r7, #16
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}

080087ea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087ea:	b580      	push	{r7, lr}
 80087ec:	b084      	sub	sp, #16
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
 80087f2:	460b      	mov	r3, r1
 80087f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087f6:	2300      	movs	r3, #0
 80087f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087fa:	2300      	movs	r3, #0
 80087fc:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008804:	78fa      	ldrb	r2, [r7, #3]
 8008806:	4611      	mov	r1, r2
 8008808:	4618      	mov	r0, r3
 800880a:	f7fb fb61 	bl	8003ed0 <HAL_PCD_EP_Close>
 800880e:	4603      	mov	r3, r0
 8008810:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008812:	7bfb      	ldrb	r3, [r7, #15]
 8008814:	4618      	mov	r0, r3
 8008816:	f000 f903 	bl	8008a20 <USBD_Get_USB_Status>
 800881a:	4603      	mov	r3, r0
 800881c:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 800881e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008820:	4618      	mov	r0, r3
 8008822:	3710      	adds	r7, #16
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	460b      	mov	r3, r1
 8008832:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008834:	2300      	movs	r3, #0
 8008836:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008838:	2300      	movs	r3, #0
 800883a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008842:	78fa      	ldrb	r2, [r7, #3]
 8008844:	4611      	mov	r1, r2
 8008846:	4618      	mov	r0, r3
 8008848:	f7fb fc0b 	bl	8004062 <HAL_PCD_EP_SetStall>
 800884c:	4603      	mov	r3, r0
 800884e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008850:	7bfb      	ldrb	r3, [r7, #15]
 8008852:	4618      	mov	r0, r3
 8008854:	f000 f8e4 	bl	8008a20 <USBD_Get_USB_Status>
 8008858:	4603      	mov	r3, r0
 800885a:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800885c:	7bbb      	ldrb	r3, [r7, #14]
}
 800885e:	4618      	mov	r0, r3
 8008860:	3710      	adds	r7, #16
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}

08008866 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008866:	b580      	push	{r7, lr}
 8008868:	b084      	sub	sp, #16
 800886a:	af00      	add	r7, sp, #0
 800886c:	6078      	str	r0, [r7, #4]
 800886e:	460b      	mov	r3, r1
 8008870:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008872:	2300      	movs	r3, #0
 8008874:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008876:	2300      	movs	r3, #0
 8008878:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008880:	78fa      	ldrb	r2, [r7, #3]
 8008882:	4611      	mov	r1, r2
 8008884:	4618      	mov	r0, r3
 8008886:	f7fb fc46 	bl	8004116 <HAL_PCD_EP_ClrStall>
 800888a:	4603      	mov	r3, r0
 800888c:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800888e:	7bfb      	ldrb	r3, [r7, #15]
 8008890:	4618      	mov	r0, r3
 8008892:	f000 f8c5 	bl	8008a20 <USBD_Get_USB_Status>
 8008896:	4603      	mov	r3, r0
 8008898:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 800889a:	7bbb      	ldrb	r3, [r7, #14]
}
 800889c:	4618      	mov	r0, r3
 800889e:	3710      	adds	r7, #16
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b085      	sub	sp, #20
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	460b      	mov	r3, r1
 80088ae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088b6:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80088b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	da08      	bge.n	80088d2 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80088c0:	78fb      	ldrb	r3, [r7, #3]
 80088c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088c6:	68fa      	ldr	r2, [r7, #12]
 80088c8:	015b      	lsls	r3, r3, #5
 80088ca:	4413      	add	r3, r2
 80088cc:	332a      	adds	r3, #42	; 0x2a
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	e008      	b.n	80088e4 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80088d2:	78fb      	ldrb	r3, [r7, #3]
 80088d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088d8:	68fa      	ldr	r2, [r7, #12]
 80088da:	015b      	lsls	r3, r3, #5
 80088dc:	4413      	add	r3, r2
 80088de:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 80088e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3714      	adds	r7, #20
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bc80      	pop	{r7}
 80088ec:	4770      	bx	lr

080088ee <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80088ee:	b580      	push	{r7, lr}
 80088f0:	b084      	sub	sp, #16
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	6078      	str	r0, [r7, #4]
 80088f6:	460b      	mov	r3, r1
 80088f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088fa:	2300      	movs	r3, #0
 80088fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088fe:	2300      	movs	r3, #0
 8008900:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008908:	78fa      	ldrb	r2, [r7, #3]
 800890a:	4611      	mov	r1, r2
 800890c:	4618      	mov	r0, r3
 800890e:	f7fb fa5a 	bl	8003dc6 <HAL_PCD_SetAddress>
 8008912:	4603      	mov	r3, r0
 8008914:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008916:	7bfb      	ldrb	r3, [r7, #15]
 8008918:	4618      	mov	r0, r3
 800891a:	f000 f881 	bl	8008a20 <USBD_Get_USB_Status>
 800891e:	4603      	mov	r3, r0
 8008920:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8008922:	7bbb      	ldrb	r3, [r7, #14]
}
 8008924:	4618      	mov	r0, r3
 8008926:	3710      	adds	r7, #16
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b086      	sub	sp, #24
 8008930:	af00      	add	r7, sp, #0
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	607a      	str	r2, [r7, #4]
 8008936:	461a      	mov	r2, r3
 8008938:	460b      	mov	r3, r1
 800893a:	72fb      	strb	r3, [r7, #11]
 800893c:	4613      	mov	r3, r2
 800893e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008940:	2300      	movs	r3, #0
 8008942:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008944:	2300      	movs	r3, #0
 8008946:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800894e:	893b      	ldrh	r3, [r7, #8]
 8008950:	7af9      	ldrb	r1, [r7, #11]
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	f7fb fb4c 	bl	8003ff0 <HAL_PCD_EP_Transmit>
 8008958:	4603      	mov	r3, r0
 800895a:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800895c:	7dfb      	ldrb	r3, [r7, #23]
 800895e:	4618      	mov	r0, r3
 8008960:	f000 f85e 	bl	8008a20 <USBD_Get_USB_Status>
 8008964:	4603      	mov	r3, r0
 8008966:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8008968:	7dbb      	ldrb	r3, [r7, #22]
}
 800896a:	4618      	mov	r0, r3
 800896c:	3718      	adds	r7, #24
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}

08008972 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008972:	b580      	push	{r7, lr}
 8008974:	b086      	sub	sp, #24
 8008976:	af00      	add	r7, sp, #0
 8008978:	60f8      	str	r0, [r7, #12]
 800897a:	607a      	str	r2, [r7, #4]
 800897c:	461a      	mov	r2, r3
 800897e:	460b      	mov	r3, r1
 8008980:	72fb      	strb	r3, [r7, #11]
 8008982:	4613      	mov	r3, r2
 8008984:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008986:	2300      	movs	r3, #0
 8008988:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800898a:	2300      	movs	r3, #0
 800898c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008994:	893b      	ldrh	r3, [r7, #8]
 8008996:	7af9      	ldrb	r1, [r7, #11]
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	f7fb fadb 	bl	8003f54 <HAL_PCD_EP_Receive>
 800899e:	4603      	mov	r3, r0
 80089a0:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80089a2:	7dfb      	ldrb	r3, [r7, #23]
 80089a4:	4618      	mov	r0, r3
 80089a6:	f000 f83b 	bl	8008a20 <USBD_Get_USB_Status>
 80089aa:	4603      	mov	r3, r0
 80089ac:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 80089ae:	7dbb      	ldrb	r3, [r7, #22]
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3718      	adds	r7, #24
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	460b      	mov	r3, r1
 80089c2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80089ca:	78fa      	ldrb	r2, [r7, #3]
 80089cc:	4611      	mov	r1, r2
 80089ce:	4618      	mov	r0, r3
 80089d0:	f7fb fafa 	bl	8003fc8 <HAL_PCD_EP_GetRxCount>
 80089d4:	4603      	mov	r3, r0
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3708      	adds	r7, #8
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}
	...

080089e0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b083      	sub	sp, #12
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80089e8:	4b02      	ldr	r3, [pc, #8]	; (80089f4 <USBD_static_malloc+0x14>)
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	370c      	adds	r7, #12
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bc80      	pop	{r7}
 80089f2:	4770      	bx	lr
 80089f4:	200003b4 	.word	0x200003b4

080089f8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b083      	sub	sp, #12
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]

}
 8008a00:	bf00      	nop
 8008a02:	370c      	adds	r7, #12
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bc80      	pop	{r7}
 8008a08:	4770      	bx	lr

08008a0a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a0a:	b480      	push	{r7}
 8008a0c:	b083      	sub	sp, #12
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	6078      	str	r0, [r7, #4]
 8008a12:	460b      	mov	r3, r1
 8008a14:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008a16:	bf00      	nop
 8008a18:	370c      	adds	r7, #12
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bc80      	pop	{r7}
 8008a1e:	4770      	bx	lr

08008a20 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b085      	sub	sp, #20
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	4603      	mov	r3, r0
 8008a28:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008a2e:	79fb      	ldrb	r3, [r7, #7]
 8008a30:	2b03      	cmp	r3, #3
 8008a32:	d817      	bhi.n	8008a64 <USBD_Get_USB_Status+0x44>
 8008a34:	a201      	add	r2, pc, #4	; (adr r2, 8008a3c <USBD_Get_USB_Status+0x1c>)
 8008a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a3a:	bf00      	nop
 8008a3c:	08008a4d 	.word	0x08008a4d
 8008a40:	08008a53 	.word	0x08008a53
 8008a44:	08008a59 	.word	0x08008a59
 8008a48:	08008a5f 	.word	0x08008a5f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	73fb      	strb	r3, [r7, #15]
    break;
 8008a50:	e00b      	b.n	8008a6a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008a52:	2302      	movs	r3, #2
 8008a54:	73fb      	strb	r3, [r7, #15]
    break;
 8008a56:	e008      	b.n	8008a6a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008a58:	2301      	movs	r3, #1
 8008a5a:	73fb      	strb	r3, [r7, #15]
    break;
 8008a5c:	e005      	b.n	8008a6a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008a5e:	2302      	movs	r3, #2
 8008a60:	73fb      	strb	r3, [r7, #15]
    break;
 8008a62:	e002      	b.n	8008a6a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008a64:	2302      	movs	r3, #2
 8008a66:	73fb      	strb	r3, [r7, #15]
    break;
 8008a68:	bf00      	nop
  }
  return usb_status;
 8008a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3714      	adds	r7, #20
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bc80      	pop	{r7}
 8008a74:	4770      	bx	lr
 8008a76:	bf00      	nop

08008a78 <__errno>:
 8008a78:	4b01      	ldr	r3, [pc, #4]	; (8008a80 <__errno+0x8>)
 8008a7a:	6818      	ldr	r0, [r3, #0]
 8008a7c:	4770      	bx	lr
 8008a7e:	bf00      	nop
 8008a80:	2000017c 	.word	0x2000017c

08008a84 <__libc_init_array>:
 8008a84:	b570      	push	{r4, r5, r6, lr}
 8008a86:	2500      	movs	r5, #0
 8008a88:	4e0c      	ldr	r6, [pc, #48]	; (8008abc <__libc_init_array+0x38>)
 8008a8a:	4c0d      	ldr	r4, [pc, #52]	; (8008ac0 <__libc_init_array+0x3c>)
 8008a8c:	1ba4      	subs	r4, r4, r6
 8008a8e:	10a4      	asrs	r4, r4, #2
 8008a90:	42a5      	cmp	r5, r4
 8008a92:	d109      	bne.n	8008aa8 <__libc_init_array+0x24>
 8008a94:	f002 feb8 	bl	800b808 <_init>
 8008a98:	2500      	movs	r5, #0
 8008a9a:	4e0a      	ldr	r6, [pc, #40]	; (8008ac4 <__libc_init_array+0x40>)
 8008a9c:	4c0a      	ldr	r4, [pc, #40]	; (8008ac8 <__libc_init_array+0x44>)
 8008a9e:	1ba4      	subs	r4, r4, r6
 8008aa0:	10a4      	asrs	r4, r4, #2
 8008aa2:	42a5      	cmp	r5, r4
 8008aa4:	d105      	bne.n	8008ab2 <__libc_init_array+0x2e>
 8008aa6:	bd70      	pop	{r4, r5, r6, pc}
 8008aa8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008aac:	4798      	blx	r3
 8008aae:	3501      	adds	r5, #1
 8008ab0:	e7ee      	b.n	8008a90 <__libc_init_array+0xc>
 8008ab2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008ab6:	4798      	blx	r3
 8008ab8:	3501      	adds	r5, #1
 8008aba:	e7f2      	b.n	8008aa2 <__libc_init_array+0x1e>
 8008abc:	0800bbd8 	.word	0x0800bbd8
 8008ac0:	0800bbd8 	.word	0x0800bbd8
 8008ac4:	0800bbd8 	.word	0x0800bbd8
 8008ac8:	0800bbdc 	.word	0x0800bbdc

08008acc <memset>:
 8008acc:	4603      	mov	r3, r0
 8008ace:	4402      	add	r2, r0
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d100      	bne.n	8008ad6 <memset+0xa>
 8008ad4:	4770      	bx	lr
 8008ad6:	f803 1b01 	strb.w	r1, [r3], #1
 8008ada:	e7f9      	b.n	8008ad0 <memset+0x4>

08008adc <__cvt>:
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ae2:	461e      	mov	r6, r3
 8008ae4:	bfbb      	ittet	lt
 8008ae6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008aea:	461e      	movlt	r6, r3
 8008aec:	2300      	movge	r3, #0
 8008aee:	232d      	movlt	r3, #45	; 0x2d
 8008af0:	b088      	sub	sp, #32
 8008af2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008af4:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8008af8:	f027 0720 	bic.w	r7, r7, #32
 8008afc:	2f46      	cmp	r7, #70	; 0x46
 8008afe:	4614      	mov	r4, r2
 8008b00:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008b02:	700b      	strb	r3, [r1, #0]
 8008b04:	d004      	beq.n	8008b10 <__cvt+0x34>
 8008b06:	2f45      	cmp	r7, #69	; 0x45
 8008b08:	d100      	bne.n	8008b0c <__cvt+0x30>
 8008b0a:	3501      	adds	r5, #1
 8008b0c:	2302      	movs	r3, #2
 8008b0e:	e000      	b.n	8008b12 <__cvt+0x36>
 8008b10:	2303      	movs	r3, #3
 8008b12:	aa07      	add	r2, sp, #28
 8008b14:	9204      	str	r2, [sp, #16]
 8008b16:	aa06      	add	r2, sp, #24
 8008b18:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008b1c:	e9cd 3500 	strd	r3, r5, [sp]
 8008b20:	4622      	mov	r2, r4
 8008b22:	4633      	mov	r3, r6
 8008b24:	f000 fcd0 	bl	80094c8 <_dtoa_r>
 8008b28:	2f47      	cmp	r7, #71	; 0x47
 8008b2a:	4680      	mov	r8, r0
 8008b2c:	d102      	bne.n	8008b34 <__cvt+0x58>
 8008b2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008b30:	07db      	lsls	r3, r3, #31
 8008b32:	d526      	bpl.n	8008b82 <__cvt+0xa6>
 8008b34:	2f46      	cmp	r7, #70	; 0x46
 8008b36:	eb08 0905 	add.w	r9, r8, r5
 8008b3a:	d111      	bne.n	8008b60 <__cvt+0x84>
 8008b3c:	f898 3000 	ldrb.w	r3, [r8]
 8008b40:	2b30      	cmp	r3, #48	; 0x30
 8008b42:	d10a      	bne.n	8008b5a <__cvt+0x7e>
 8008b44:	2200      	movs	r2, #0
 8008b46:	2300      	movs	r3, #0
 8008b48:	4620      	mov	r0, r4
 8008b4a:	4631      	mov	r1, r6
 8008b4c:	f7f7 ff2c 	bl	80009a8 <__aeabi_dcmpeq>
 8008b50:	b918      	cbnz	r0, 8008b5a <__cvt+0x7e>
 8008b52:	f1c5 0501 	rsb	r5, r5, #1
 8008b56:	f8ca 5000 	str.w	r5, [sl]
 8008b5a:	f8da 3000 	ldr.w	r3, [sl]
 8008b5e:	4499      	add	r9, r3
 8008b60:	2200      	movs	r2, #0
 8008b62:	2300      	movs	r3, #0
 8008b64:	4620      	mov	r0, r4
 8008b66:	4631      	mov	r1, r6
 8008b68:	f7f7 ff1e 	bl	80009a8 <__aeabi_dcmpeq>
 8008b6c:	b938      	cbnz	r0, 8008b7e <__cvt+0xa2>
 8008b6e:	2230      	movs	r2, #48	; 0x30
 8008b70:	9b07      	ldr	r3, [sp, #28]
 8008b72:	454b      	cmp	r3, r9
 8008b74:	d205      	bcs.n	8008b82 <__cvt+0xa6>
 8008b76:	1c59      	adds	r1, r3, #1
 8008b78:	9107      	str	r1, [sp, #28]
 8008b7a:	701a      	strb	r2, [r3, #0]
 8008b7c:	e7f8      	b.n	8008b70 <__cvt+0x94>
 8008b7e:	f8cd 901c 	str.w	r9, [sp, #28]
 8008b82:	4640      	mov	r0, r8
 8008b84:	9b07      	ldr	r3, [sp, #28]
 8008b86:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008b88:	eba3 0308 	sub.w	r3, r3, r8
 8008b8c:	6013      	str	r3, [r2, #0]
 8008b8e:	b008      	add	sp, #32
 8008b90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008b94 <__exponent>:
 8008b94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b96:	2900      	cmp	r1, #0
 8008b98:	bfb4      	ite	lt
 8008b9a:	232d      	movlt	r3, #45	; 0x2d
 8008b9c:	232b      	movge	r3, #43	; 0x2b
 8008b9e:	4604      	mov	r4, r0
 8008ba0:	bfb8      	it	lt
 8008ba2:	4249      	neglt	r1, r1
 8008ba4:	2909      	cmp	r1, #9
 8008ba6:	f804 2b02 	strb.w	r2, [r4], #2
 8008baa:	7043      	strb	r3, [r0, #1]
 8008bac:	dd21      	ble.n	8008bf2 <__exponent+0x5e>
 8008bae:	f10d 0307 	add.w	r3, sp, #7
 8008bb2:	461f      	mov	r7, r3
 8008bb4:	260a      	movs	r6, #10
 8008bb6:	fb91 f5f6 	sdiv	r5, r1, r6
 8008bba:	fb06 1115 	mls	r1, r6, r5, r1
 8008bbe:	2d09      	cmp	r5, #9
 8008bc0:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8008bc4:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008bc8:	f103 32ff 	add.w	r2, r3, #4294967295
 8008bcc:	4629      	mov	r1, r5
 8008bce:	dc09      	bgt.n	8008be4 <__exponent+0x50>
 8008bd0:	3130      	adds	r1, #48	; 0x30
 8008bd2:	3b02      	subs	r3, #2
 8008bd4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008bd8:	42bb      	cmp	r3, r7
 8008bda:	4622      	mov	r2, r4
 8008bdc:	d304      	bcc.n	8008be8 <__exponent+0x54>
 8008bde:	1a10      	subs	r0, r2, r0
 8008be0:	b003      	add	sp, #12
 8008be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008be4:	4613      	mov	r3, r2
 8008be6:	e7e6      	b.n	8008bb6 <__exponent+0x22>
 8008be8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bec:	f804 2b01 	strb.w	r2, [r4], #1
 8008bf0:	e7f2      	b.n	8008bd8 <__exponent+0x44>
 8008bf2:	2330      	movs	r3, #48	; 0x30
 8008bf4:	4419      	add	r1, r3
 8008bf6:	7083      	strb	r3, [r0, #2]
 8008bf8:	1d02      	adds	r2, r0, #4
 8008bfa:	70c1      	strb	r1, [r0, #3]
 8008bfc:	e7ef      	b.n	8008bde <__exponent+0x4a>
	...

08008c00 <_printf_float>:
 8008c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c04:	b091      	sub	sp, #68	; 0x44
 8008c06:	460c      	mov	r4, r1
 8008c08:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8008c0a:	4693      	mov	fp, r2
 8008c0c:	461e      	mov	r6, r3
 8008c0e:	4605      	mov	r5, r0
 8008c10:	f001 fad8 	bl	800a1c4 <_localeconv_r>
 8008c14:	6803      	ldr	r3, [r0, #0]
 8008c16:	4618      	mov	r0, r3
 8008c18:	9309      	str	r3, [sp, #36]	; 0x24
 8008c1a:	f7f7 fa99 	bl	8000150 <strlen>
 8008c1e:	2300      	movs	r3, #0
 8008c20:	930e      	str	r3, [sp, #56]	; 0x38
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	900a      	str	r0, [sp, #40]	; 0x28
 8008c26:	3307      	adds	r3, #7
 8008c28:	f023 0307 	bic.w	r3, r3, #7
 8008c2c:	f103 0208 	add.w	r2, r3, #8
 8008c30:	f894 8018 	ldrb.w	r8, [r4, #24]
 8008c34:	f8d4 a000 	ldr.w	sl, [r4]
 8008c38:	603a      	str	r2, [r7, #0]
 8008c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008c42:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8008c46:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008c4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c50:	4ba6      	ldr	r3, [pc, #664]	; (8008eec <_printf_float+0x2ec>)
 8008c52:	4638      	mov	r0, r7
 8008c54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008c56:	f7f7 fed9 	bl	8000a0c <__aeabi_dcmpun>
 8008c5a:	bb68      	cbnz	r0, 8008cb8 <_printf_float+0xb8>
 8008c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c60:	4ba2      	ldr	r3, [pc, #648]	; (8008eec <_printf_float+0x2ec>)
 8008c62:	4638      	mov	r0, r7
 8008c64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008c66:	f7f7 feb3 	bl	80009d0 <__aeabi_dcmple>
 8008c6a:	bb28      	cbnz	r0, 8008cb8 <_printf_float+0xb8>
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	2300      	movs	r3, #0
 8008c70:	4638      	mov	r0, r7
 8008c72:	4649      	mov	r1, r9
 8008c74:	f7f7 fea2 	bl	80009bc <__aeabi_dcmplt>
 8008c78:	b110      	cbz	r0, 8008c80 <_printf_float+0x80>
 8008c7a:	232d      	movs	r3, #45	; 0x2d
 8008c7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c80:	4f9b      	ldr	r7, [pc, #620]	; (8008ef0 <_printf_float+0x2f0>)
 8008c82:	4b9c      	ldr	r3, [pc, #624]	; (8008ef4 <_printf_float+0x2f4>)
 8008c84:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008c88:	bf98      	it	ls
 8008c8a:	461f      	movls	r7, r3
 8008c8c:	2303      	movs	r3, #3
 8008c8e:	f04f 0900 	mov.w	r9, #0
 8008c92:	6123      	str	r3, [r4, #16]
 8008c94:	f02a 0304 	bic.w	r3, sl, #4
 8008c98:	6023      	str	r3, [r4, #0]
 8008c9a:	9600      	str	r6, [sp, #0]
 8008c9c:	465b      	mov	r3, fp
 8008c9e:	aa0f      	add	r2, sp, #60	; 0x3c
 8008ca0:	4621      	mov	r1, r4
 8008ca2:	4628      	mov	r0, r5
 8008ca4:	f000 f9e2 	bl	800906c <_printf_common>
 8008ca8:	3001      	adds	r0, #1
 8008caa:	f040 8090 	bne.w	8008dce <_printf_float+0x1ce>
 8008cae:	f04f 30ff 	mov.w	r0, #4294967295
 8008cb2:	b011      	add	sp, #68	; 0x44
 8008cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cb8:	463a      	mov	r2, r7
 8008cba:	464b      	mov	r3, r9
 8008cbc:	4638      	mov	r0, r7
 8008cbe:	4649      	mov	r1, r9
 8008cc0:	f7f7 fea4 	bl	8000a0c <__aeabi_dcmpun>
 8008cc4:	b110      	cbz	r0, 8008ccc <_printf_float+0xcc>
 8008cc6:	4f8c      	ldr	r7, [pc, #560]	; (8008ef8 <_printf_float+0x2f8>)
 8008cc8:	4b8c      	ldr	r3, [pc, #560]	; (8008efc <_printf_float+0x2fc>)
 8008cca:	e7db      	b.n	8008c84 <_printf_float+0x84>
 8008ccc:	6863      	ldr	r3, [r4, #4]
 8008cce:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8008cd2:	1c59      	adds	r1, r3, #1
 8008cd4:	a80d      	add	r0, sp, #52	; 0x34
 8008cd6:	a90e      	add	r1, sp, #56	; 0x38
 8008cd8:	d140      	bne.n	8008d5c <_printf_float+0x15c>
 8008cda:	2306      	movs	r3, #6
 8008cdc:	6063      	str	r3, [r4, #4]
 8008cde:	f04f 0c00 	mov.w	ip, #0
 8008ce2:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8008ce6:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8008cea:	6863      	ldr	r3, [r4, #4]
 8008cec:	6022      	str	r2, [r4, #0]
 8008cee:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8008cf2:	9300      	str	r3, [sp, #0]
 8008cf4:	463a      	mov	r2, r7
 8008cf6:	464b      	mov	r3, r9
 8008cf8:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8008cfc:	4628      	mov	r0, r5
 8008cfe:	f7ff feed 	bl	8008adc <__cvt>
 8008d02:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8008d06:	2b47      	cmp	r3, #71	; 0x47
 8008d08:	4607      	mov	r7, r0
 8008d0a:	d109      	bne.n	8008d20 <_printf_float+0x120>
 8008d0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d0e:	1cd8      	adds	r0, r3, #3
 8008d10:	db02      	blt.n	8008d18 <_printf_float+0x118>
 8008d12:	6862      	ldr	r2, [r4, #4]
 8008d14:	4293      	cmp	r3, r2
 8008d16:	dd47      	ble.n	8008da8 <_printf_float+0x1a8>
 8008d18:	f1a8 0802 	sub.w	r8, r8, #2
 8008d1c:	fa5f f888 	uxtb.w	r8, r8
 8008d20:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8008d24:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008d26:	d824      	bhi.n	8008d72 <_printf_float+0x172>
 8008d28:	3901      	subs	r1, #1
 8008d2a:	4642      	mov	r2, r8
 8008d2c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008d30:	910d      	str	r1, [sp, #52]	; 0x34
 8008d32:	f7ff ff2f 	bl	8008b94 <__exponent>
 8008d36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d38:	4681      	mov	r9, r0
 8008d3a:	1813      	adds	r3, r2, r0
 8008d3c:	2a01      	cmp	r2, #1
 8008d3e:	6123      	str	r3, [r4, #16]
 8008d40:	dc02      	bgt.n	8008d48 <_printf_float+0x148>
 8008d42:	6822      	ldr	r2, [r4, #0]
 8008d44:	07d1      	lsls	r1, r2, #31
 8008d46:	d501      	bpl.n	8008d4c <_printf_float+0x14c>
 8008d48:	3301      	adds	r3, #1
 8008d4a:	6123      	str	r3, [r4, #16]
 8008d4c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d0a2      	beq.n	8008c9a <_printf_float+0x9a>
 8008d54:	232d      	movs	r3, #45	; 0x2d
 8008d56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d5a:	e79e      	b.n	8008c9a <_printf_float+0x9a>
 8008d5c:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8008d60:	f000 816e 	beq.w	8009040 <_printf_float+0x440>
 8008d64:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008d68:	d1b9      	bne.n	8008cde <_printf_float+0xde>
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d1b7      	bne.n	8008cde <_printf_float+0xde>
 8008d6e:	2301      	movs	r3, #1
 8008d70:	e7b4      	b.n	8008cdc <_printf_float+0xdc>
 8008d72:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8008d76:	d119      	bne.n	8008dac <_printf_float+0x1ac>
 8008d78:	2900      	cmp	r1, #0
 8008d7a:	6863      	ldr	r3, [r4, #4]
 8008d7c:	dd0c      	ble.n	8008d98 <_printf_float+0x198>
 8008d7e:	6121      	str	r1, [r4, #16]
 8008d80:	b913      	cbnz	r3, 8008d88 <_printf_float+0x188>
 8008d82:	6822      	ldr	r2, [r4, #0]
 8008d84:	07d2      	lsls	r2, r2, #31
 8008d86:	d502      	bpl.n	8008d8e <_printf_float+0x18e>
 8008d88:	3301      	adds	r3, #1
 8008d8a:	440b      	add	r3, r1
 8008d8c:	6123      	str	r3, [r4, #16]
 8008d8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d90:	f04f 0900 	mov.w	r9, #0
 8008d94:	65a3      	str	r3, [r4, #88]	; 0x58
 8008d96:	e7d9      	b.n	8008d4c <_printf_float+0x14c>
 8008d98:	b913      	cbnz	r3, 8008da0 <_printf_float+0x1a0>
 8008d9a:	6822      	ldr	r2, [r4, #0]
 8008d9c:	07d0      	lsls	r0, r2, #31
 8008d9e:	d501      	bpl.n	8008da4 <_printf_float+0x1a4>
 8008da0:	3302      	adds	r3, #2
 8008da2:	e7f3      	b.n	8008d8c <_printf_float+0x18c>
 8008da4:	2301      	movs	r3, #1
 8008da6:	e7f1      	b.n	8008d8c <_printf_float+0x18c>
 8008da8:	f04f 0867 	mov.w	r8, #103	; 0x67
 8008dac:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8008db0:	4293      	cmp	r3, r2
 8008db2:	db05      	blt.n	8008dc0 <_printf_float+0x1c0>
 8008db4:	6822      	ldr	r2, [r4, #0]
 8008db6:	6123      	str	r3, [r4, #16]
 8008db8:	07d1      	lsls	r1, r2, #31
 8008dba:	d5e8      	bpl.n	8008d8e <_printf_float+0x18e>
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	e7e5      	b.n	8008d8c <_printf_float+0x18c>
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	bfcc      	ite	gt
 8008dc4:	2301      	movgt	r3, #1
 8008dc6:	f1c3 0302 	rsble	r3, r3, #2
 8008dca:	4413      	add	r3, r2
 8008dcc:	e7de      	b.n	8008d8c <_printf_float+0x18c>
 8008dce:	6823      	ldr	r3, [r4, #0]
 8008dd0:	055a      	lsls	r2, r3, #21
 8008dd2:	d407      	bmi.n	8008de4 <_printf_float+0x1e4>
 8008dd4:	6923      	ldr	r3, [r4, #16]
 8008dd6:	463a      	mov	r2, r7
 8008dd8:	4659      	mov	r1, fp
 8008dda:	4628      	mov	r0, r5
 8008ddc:	47b0      	blx	r6
 8008dde:	3001      	adds	r0, #1
 8008de0:	d129      	bne.n	8008e36 <_printf_float+0x236>
 8008de2:	e764      	b.n	8008cae <_printf_float+0xae>
 8008de4:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8008de8:	f240 80d7 	bls.w	8008f9a <_printf_float+0x39a>
 8008dec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008df0:	2200      	movs	r2, #0
 8008df2:	2300      	movs	r3, #0
 8008df4:	f7f7 fdd8 	bl	80009a8 <__aeabi_dcmpeq>
 8008df8:	b388      	cbz	r0, 8008e5e <_printf_float+0x25e>
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	4a40      	ldr	r2, [pc, #256]	; (8008f00 <_printf_float+0x300>)
 8008dfe:	4659      	mov	r1, fp
 8008e00:	4628      	mov	r0, r5
 8008e02:	47b0      	blx	r6
 8008e04:	3001      	adds	r0, #1
 8008e06:	f43f af52 	beq.w	8008cae <_printf_float+0xae>
 8008e0a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	db02      	blt.n	8008e18 <_printf_float+0x218>
 8008e12:	6823      	ldr	r3, [r4, #0]
 8008e14:	07d8      	lsls	r0, r3, #31
 8008e16:	d50e      	bpl.n	8008e36 <_printf_float+0x236>
 8008e18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e1c:	4659      	mov	r1, fp
 8008e1e:	4628      	mov	r0, r5
 8008e20:	47b0      	blx	r6
 8008e22:	3001      	adds	r0, #1
 8008e24:	f43f af43 	beq.w	8008cae <_printf_float+0xae>
 8008e28:	2700      	movs	r7, #0
 8008e2a:	f104 081a 	add.w	r8, r4, #26
 8008e2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e30:	3b01      	subs	r3, #1
 8008e32:	42bb      	cmp	r3, r7
 8008e34:	dc09      	bgt.n	8008e4a <_printf_float+0x24a>
 8008e36:	6823      	ldr	r3, [r4, #0]
 8008e38:	079f      	lsls	r7, r3, #30
 8008e3a:	f100 80fd 	bmi.w	8009038 <_printf_float+0x438>
 8008e3e:	68e0      	ldr	r0, [r4, #12]
 8008e40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e42:	4298      	cmp	r0, r3
 8008e44:	bfb8      	it	lt
 8008e46:	4618      	movlt	r0, r3
 8008e48:	e733      	b.n	8008cb2 <_printf_float+0xb2>
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	4642      	mov	r2, r8
 8008e4e:	4659      	mov	r1, fp
 8008e50:	4628      	mov	r0, r5
 8008e52:	47b0      	blx	r6
 8008e54:	3001      	adds	r0, #1
 8008e56:	f43f af2a 	beq.w	8008cae <_printf_float+0xae>
 8008e5a:	3701      	adds	r7, #1
 8008e5c:	e7e7      	b.n	8008e2e <_printf_float+0x22e>
 8008e5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	dc2b      	bgt.n	8008ebc <_printf_float+0x2bc>
 8008e64:	2301      	movs	r3, #1
 8008e66:	4a26      	ldr	r2, [pc, #152]	; (8008f00 <_printf_float+0x300>)
 8008e68:	4659      	mov	r1, fp
 8008e6a:	4628      	mov	r0, r5
 8008e6c:	47b0      	blx	r6
 8008e6e:	3001      	adds	r0, #1
 8008e70:	f43f af1d 	beq.w	8008cae <_printf_float+0xae>
 8008e74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e76:	b923      	cbnz	r3, 8008e82 <_printf_float+0x282>
 8008e78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e7a:	b913      	cbnz	r3, 8008e82 <_printf_float+0x282>
 8008e7c:	6823      	ldr	r3, [r4, #0]
 8008e7e:	07d9      	lsls	r1, r3, #31
 8008e80:	d5d9      	bpl.n	8008e36 <_printf_float+0x236>
 8008e82:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e86:	4659      	mov	r1, fp
 8008e88:	4628      	mov	r0, r5
 8008e8a:	47b0      	blx	r6
 8008e8c:	3001      	adds	r0, #1
 8008e8e:	f43f af0e 	beq.w	8008cae <_printf_float+0xae>
 8008e92:	f04f 0800 	mov.w	r8, #0
 8008e96:	f104 091a 	add.w	r9, r4, #26
 8008e9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e9c:	425b      	negs	r3, r3
 8008e9e:	4543      	cmp	r3, r8
 8008ea0:	dc01      	bgt.n	8008ea6 <_printf_float+0x2a6>
 8008ea2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ea4:	e797      	b.n	8008dd6 <_printf_float+0x1d6>
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	464a      	mov	r2, r9
 8008eaa:	4659      	mov	r1, fp
 8008eac:	4628      	mov	r0, r5
 8008eae:	47b0      	blx	r6
 8008eb0:	3001      	adds	r0, #1
 8008eb2:	f43f aefc 	beq.w	8008cae <_printf_float+0xae>
 8008eb6:	f108 0801 	add.w	r8, r8, #1
 8008eba:	e7ee      	b.n	8008e9a <_printf_float+0x29a>
 8008ebc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ebe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	bfa8      	it	ge
 8008ec4:	461a      	movge	r2, r3
 8008ec6:	2a00      	cmp	r2, #0
 8008ec8:	4690      	mov	r8, r2
 8008eca:	dd07      	ble.n	8008edc <_printf_float+0x2dc>
 8008ecc:	4613      	mov	r3, r2
 8008ece:	4659      	mov	r1, fp
 8008ed0:	463a      	mov	r2, r7
 8008ed2:	4628      	mov	r0, r5
 8008ed4:	47b0      	blx	r6
 8008ed6:	3001      	adds	r0, #1
 8008ed8:	f43f aee9 	beq.w	8008cae <_printf_float+0xae>
 8008edc:	f104 031a 	add.w	r3, r4, #26
 8008ee0:	f04f 0a00 	mov.w	sl, #0
 8008ee4:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8008ee8:	930b      	str	r3, [sp, #44]	; 0x2c
 8008eea:	e015      	b.n	8008f18 <_printf_float+0x318>
 8008eec:	7fefffff 	.word	0x7fefffff
 8008ef0:	0800b8d4 	.word	0x0800b8d4
 8008ef4:	0800b8d0 	.word	0x0800b8d0
 8008ef8:	0800b8dc 	.word	0x0800b8dc
 8008efc:	0800b8d8 	.word	0x0800b8d8
 8008f00:	0800b8e0 	.word	0x0800b8e0
 8008f04:	2301      	movs	r3, #1
 8008f06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008f08:	4659      	mov	r1, fp
 8008f0a:	4628      	mov	r0, r5
 8008f0c:	47b0      	blx	r6
 8008f0e:	3001      	adds	r0, #1
 8008f10:	f43f aecd 	beq.w	8008cae <_printf_float+0xae>
 8008f14:	f10a 0a01 	add.w	sl, sl, #1
 8008f18:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8008f1c:	eba9 0308 	sub.w	r3, r9, r8
 8008f20:	4553      	cmp	r3, sl
 8008f22:	dcef      	bgt.n	8008f04 <_printf_float+0x304>
 8008f24:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	444f      	add	r7, r9
 8008f2c:	db14      	blt.n	8008f58 <_printf_float+0x358>
 8008f2e:	6823      	ldr	r3, [r4, #0]
 8008f30:	07da      	lsls	r2, r3, #31
 8008f32:	d411      	bmi.n	8008f58 <_printf_float+0x358>
 8008f34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f36:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008f38:	eba3 0209 	sub.w	r2, r3, r9
 8008f3c:	eba3 0901 	sub.w	r9, r3, r1
 8008f40:	4591      	cmp	r9, r2
 8008f42:	bfa8      	it	ge
 8008f44:	4691      	movge	r9, r2
 8008f46:	f1b9 0f00 	cmp.w	r9, #0
 8008f4a:	dc0d      	bgt.n	8008f68 <_printf_float+0x368>
 8008f4c:	2700      	movs	r7, #0
 8008f4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f52:	f104 081a 	add.w	r8, r4, #26
 8008f56:	e018      	b.n	8008f8a <_printf_float+0x38a>
 8008f58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f5c:	4659      	mov	r1, fp
 8008f5e:	4628      	mov	r0, r5
 8008f60:	47b0      	blx	r6
 8008f62:	3001      	adds	r0, #1
 8008f64:	d1e6      	bne.n	8008f34 <_printf_float+0x334>
 8008f66:	e6a2      	b.n	8008cae <_printf_float+0xae>
 8008f68:	464b      	mov	r3, r9
 8008f6a:	463a      	mov	r2, r7
 8008f6c:	4659      	mov	r1, fp
 8008f6e:	4628      	mov	r0, r5
 8008f70:	47b0      	blx	r6
 8008f72:	3001      	adds	r0, #1
 8008f74:	d1ea      	bne.n	8008f4c <_printf_float+0x34c>
 8008f76:	e69a      	b.n	8008cae <_printf_float+0xae>
 8008f78:	2301      	movs	r3, #1
 8008f7a:	4642      	mov	r2, r8
 8008f7c:	4659      	mov	r1, fp
 8008f7e:	4628      	mov	r0, r5
 8008f80:	47b0      	blx	r6
 8008f82:	3001      	adds	r0, #1
 8008f84:	f43f ae93 	beq.w	8008cae <_printf_float+0xae>
 8008f88:	3701      	adds	r7, #1
 8008f8a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008f8e:	1a9b      	subs	r3, r3, r2
 8008f90:	eba3 0309 	sub.w	r3, r3, r9
 8008f94:	42bb      	cmp	r3, r7
 8008f96:	dcef      	bgt.n	8008f78 <_printf_float+0x378>
 8008f98:	e74d      	b.n	8008e36 <_printf_float+0x236>
 8008f9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f9c:	2a01      	cmp	r2, #1
 8008f9e:	dc01      	bgt.n	8008fa4 <_printf_float+0x3a4>
 8008fa0:	07db      	lsls	r3, r3, #31
 8008fa2:	d538      	bpl.n	8009016 <_printf_float+0x416>
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	463a      	mov	r2, r7
 8008fa8:	4659      	mov	r1, fp
 8008faa:	4628      	mov	r0, r5
 8008fac:	47b0      	blx	r6
 8008fae:	3001      	adds	r0, #1
 8008fb0:	f43f ae7d 	beq.w	8008cae <_printf_float+0xae>
 8008fb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008fb8:	4659      	mov	r1, fp
 8008fba:	4628      	mov	r0, r5
 8008fbc:	47b0      	blx	r6
 8008fbe:	3001      	adds	r0, #1
 8008fc0:	f107 0701 	add.w	r7, r7, #1
 8008fc4:	f43f ae73 	beq.w	8008cae <_printf_float+0xae>
 8008fc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008fcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008fce:	2200      	movs	r2, #0
 8008fd0:	f103 38ff 	add.w	r8, r3, #4294967295
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	f7f7 fce7 	bl	80009a8 <__aeabi_dcmpeq>
 8008fda:	b9c0      	cbnz	r0, 800900e <_printf_float+0x40e>
 8008fdc:	4643      	mov	r3, r8
 8008fde:	463a      	mov	r2, r7
 8008fe0:	4659      	mov	r1, fp
 8008fe2:	4628      	mov	r0, r5
 8008fe4:	47b0      	blx	r6
 8008fe6:	3001      	adds	r0, #1
 8008fe8:	d10d      	bne.n	8009006 <_printf_float+0x406>
 8008fea:	e660      	b.n	8008cae <_printf_float+0xae>
 8008fec:	2301      	movs	r3, #1
 8008fee:	4642      	mov	r2, r8
 8008ff0:	4659      	mov	r1, fp
 8008ff2:	4628      	mov	r0, r5
 8008ff4:	47b0      	blx	r6
 8008ff6:	3001      	adds	r0, #1
 8008ff8:	f43f ae59 	beq.w	8008cae <_printf_float+0xae>
 8008ffc:	3701      	adds	r7, #1
 8008ffe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009000:	3b01      	subs	r3, #1
 8009002:	42bb      	cmp	r3, r7
 8009004:	dcf2      	bgt.n	8008fec <_printf_float+0x3ec>
 8009006:	464b      	mov	r3, r9
 8009008:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800900c:	e6e4      	b.n	8008dd8 <_printf_float+0x1d8>
 800900e:	2700      	movs	r7, #0
 8009010:	f104 081a 	add.w	r8, r4, #26
 8009014:	e7f3      	b.n	8008ffe <_printf_float+0x3fe>
 8009016:	2301      	movs	r3, #1
 8009018:	e7e1      	b.n	8008fde <_printf_float+0x3de>
 800901a:	2301      	movs	r3, #1
 800901c:	4642      	mov	r2, r8
 800901e:	4659      	mov	r1, fp
 8009020:	4628      	mov	r0, r5
 8009022:	47b0      	blx	r6
 8009024:	3001      	adds	r0, #1
 8009026:	f43f ae42 	beq.w	8008cae <_printf_float+0xae>
 800902a:	3701      	adds	r7, #1
 800902c:	68e3      	ldr	r3, [r4, #12]
 800902e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009030:	1a9b      	subs	r3, r3, r2
 8009032:	42bb      	cmp	r3, r7
 8009034:	dcf1      	bgt.n	800901a <_printf_float+0x41a>
 8009036:	e702      	b.n	8008e3e <_printf_float+0x23e>
 8009038:	2700      	movs	r7, #0
 800903a:	f104 0819 	add.w	r8, r4, #25
 800903e:	e7f5      	b.n	800902c <_printf_float+0x42c>
 8009040:	2b00      	cmp	r3, #0
 8009042:	f43f ae94 	beq.w	8008d6e <_printf_float+0x16e>
 8009046:	f04f 0c00 	mov.w	ip, #0
 800904a:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800904e:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8009052:	6022      	str	r2, [r4, #0]
 8009054:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8009058:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800905c:	9300      	str	r3, [sp, #0]
 800905e:	463a      	mov	r2, r7
 8009060:	464b      	mov	r3, r9
 8009062:	4628      	mov	r0, r5
 8009064:	f7ff fd3a 	bl	8008adc <__cvt>
 8009068:	4607      	mov	r7, r0
 800906a:	e64f      	b.n	8008d0c <_printf_float+0x10c>

0800906c <_printf_common>:
 800906c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009070:	4691      	mov	r9, r2
 8009072:	461f      	mov	r7, r3
 8009074:	688a      	ldr	r2, [r1, #8]
 8009076:	690b      	ldr	r3, [r1, #16]
 8009078:	4606      	mov	r6, r0
 800907a:	4293      	cmp	r3, r2
 800907c:	bfb8      	it	lt
 800907e:	4613      	movlt	r3, r2
 8009080:	f8c9 3000 	str.w	r3, [r9]
 8009084:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009088:	460c      	mov	r4, r1
 800908a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800908e:	b112      	cbz	r2, 8009096 <_printf_common+0x2a>
 8009090:	3301      	adds	r3, #1
 8009092:	f8c9 3000 	str.w	r3, [r9]
 8009096:	6823      	ldr	r3, [r4, #0]
 8009098:	0699      	lsls	r1, r3, #26
 800909a:	bf42      	ittt	mi
 800909c:	f8d9 3000 	ldrmi.w	r3, [r9]
 80090a0:	3302      	addmi	r3, #2
 80090a2:	f8c9 3000 	strmi.w	r3, [r9]
 80090a6:	6825      	ldr	r5, [r4, #0]
 80090a8:	f015 0506 	ands.w	r5, r5, #6
 80090ac:	d107      	bne.n	80090be <_printf_common+0x52>
 80090ae:	f104 0a19 	add.w	sl, r4, #25
 80090b2:	68e3      	ldr	r3, [r4, #12]
 80090b4:	f8d9 2000 	ldr.w	r2, [r9]
 80090b8:	1a9b      	subs	r3, r3, r2
 80090ba:	42ab      	cmp	r3, r5
 80090bc:	dc29      	bgt.n	8009112 <_printf_common+0xa6>
 80090be:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80090c2:	6822      	ldr	r2, [r4, #0]
 80090c4:	3300      	adds	r3, #0
 80090c6:	bf18      	it	ne
 80090c8:	2301      	movne	r3, #1
 80090ca:	0692      	lsls	r2, r2, #26
 80090cc:	d42e      	bmi.n	800912c <_printf_common+0xc0>
 80090ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80090d2:	4639      	mov	r1, r7
 80090d4:	4630      	mov	r0, r6
 80090d6:	47c0      	blx	r8
 80090d8:	3001      	adds	r0, #1
 80090da:	d021      	beq.n	8009120 <_printf_common+0xb4>
 80090dc:	6823      	ldr	r3, [r4, #0]
 80090de:	68e5      	ldr	r5, [r4, #12]
 80090e0:	f003 0306 	and.w	r3, r3, #6
 80090e4:	2b04      	cmp	r3, #4
 80090e6:	bf18      	it	ne
 80090e8:	2500      	movne	r5, #0
 80090ea:	f8d9 2000 	ldr.w	r2, [r9]
 80090ee:	f04f 0900 	mov.w	r9, #0
 80090f2:	bf08      	it	eq
 80090f4:	1aad      	subeq	r5, r5, r2
 80090f6:	68a3      	ldr	r3, [r4, #8]
 80090f8:	6922      	ldr	r2, [r4, #16]
 80090fa:	bf08      	it	eq
 80090fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009100:	4293      	cmp	r3, r2
 8009102:	bfc4      	itt	gt
 8009104:	1a9b      	subgt	r3, r3, r2
 8009106:	18ed      	addgt	r5, r5, r3
 8009108:	341a      	adds	r4, #26
 800910a:	454d      	cmp	r5, r9
 800910c:	d11a      	bne.n	8009144 <_printf_common+0xd8>
 800910e:	2000      	movs	r0, #0
 8009110:	e008      	b.n	8009124 <_printf_common+0xb8>
 8009112:	2301      	movs	r3, #1
 8009114:	4652      	mov	r2, sl
 8009116:	4639      	mov	r1, r7
 8009118:	4630      	mov	r0, r6
 800911a:	47c0      	blx	r8
 800911c:	3001      	adds	r0, #1
 800911e:	d103      	bne.n	8009128 <_printf_common+0xbc>
 8009120:	f04f 30ff 	mov.w	r0, #4294967295
 8009124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009128:	3501      	adds	r5, #1
 800912a:	e7c2      	b.n	80090b2 <_printf_common+0x46>
 800912c:	2030      	movs	r0, #48	; 0x30
 800912e:	18e1      	adds	r1, r4, r3
 8009130:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009134:	1c5a      	adds	r2, r3, #1
 8009136:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800913a:	4422      	add	r2, r4
 800913c:	3302      	adds	r3, #2
 800913e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009142:	e7c4      	b.n	80090ce <_printf_common+0x62>
 8009144:	2301      	movs	r3, #1
 8009146:	4622      	mov	r2, r4
 8009148:	4639      	mov	r1, r7
 800914a:	4630      	mov	r0, r6
 800914c:	47c0      	blx	r8
 800914e:	3001      	adds	r0, #1
 8009150:	d0e6      	beq.n	8009120 <_printf_common+0xb4>
 8009152:	f109 0901 	add.w	r9, r9, #1
 8009156:	e7d8      	b.n	800910a <_printf_common+0x9e>

08009158 <_printf_i>:
 8009158:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800915c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009160:	460c      	mov	r4, r1
 8009162:	7e09      	ldrb	r1, [r1, #24]
 8009164:	b085      	sub	sp, #20
 8009166:	296e      	cmp	r1, #110	; 0x6e
 8009168:	4617      	mov	r7, r2
 800916a:	4606      	mov	r6, r0
 800916c:	4698      	mov	r8, r3
 800916e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009170:	f000 80b3 	beq.w	80092da <_printf_i+0x182>
 8009174:	d822      	bhi.n	80091bc <_printf_i+0x64>
 8009176:	2963      	cmp	r1, #99	; 0x63
 8009178:	d036      	beq.n	80091e8 <_printf_i+0x90>
 800917a:	d80a      	bhi.n	8009192 <_printf_i+0x3a>
 800917c:	2900      	cmp	r1, #0
 800917e:	f000 80b9 	beq.w	80092f4 <_printf_i+0x19c>
 8009182:	2958      	cmp	r1, #88	; 0x58
 8009184:	f000 8083 	beq.w	800928e <_printf_i+0x136>
 8009188:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800918c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009190:	e032      	b.n	80091f8 <_printf_i+0xa0>
 8009192:	2964      	cmp	r1, #100	; 0x64
 8009194:	d001      	beq.n	800919a <_printf_i+0x42>
 8009196:	2969      	cmp	r1, #105	; 0x69
 8009198:	d1f6      	bne.n	8009188 <_printf_i+0x30>
 800919a:	6820      	ldr	r0, [r4, #0]
 800919c:	6813      	ldr	r3, [r2, #0]
 800919e:	0605      	lsls	r5, r0, #24
 80091a0:	f103 0104 	add.w	r1, r3, #4
 80091a4:	d52a      	bpl.n	80091fc <_printf_i+0xa4>
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	6011      	str	r1, [r2, #0]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	da03      	bge.n	80091b6 <_printf_i+0x5e>
 80091ae:	222d      	movs	r2, #45	; 0x2d
 80091b0:	425b      	negs	r3, r3
 80091b2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80091b6:	486f      	ldr	r0, [pc, #444]	; (8009374 <_printf_i+0x21c>)
 80091b8:	220a      	movs	r2, #10
 80091ba:	e039      	b.n	8009230 <_printf_i+0xd8>
 80091bc:	2973      	cmp	r1, #115	; 0x73
 80091be:	f000 809d 	beq.w	80092fc <_printf_i+0x1a4>
 80091c2:	d808      	bhi.n	80091d6 <_printf_i+0x7e>
 80091c4:	296f      	cmp	r1, #111	; 0x6f
 80091c6:	d020      	beq.n	800920a <_printf_i+0xb2>
 80091c8:	2970      	cmp	r1, #112	; 0x70
 80091ca:	d1dd      	bne.n	8009188 <_printf_i+0x30>
 80091cc:	6823      	ldr	r3, [r4, #0]
 80091ce:	f043 0320 	orr.w	r3, r3, #32
 80091d2:	6023      	str	r3, [r4, #0]
 80091d4:	e003      	b.n	80091de <_printf_i+0x86>
 80091d6:	2975      	cmp	r1, #117	; 0x75
 80091d8:	d017      	beq.n	800920a <_printf_i+0xb2>
 80091da:	2978      	cmp	r1, #120	; 0x78
 80091dc:	d1d4      	bne.n	8009188 <_printf_i+0x30>
 80091de:	2378      	movs	r3, #120	; 0x78
 80091e0:	4865      	ldr	r0, [pc, #404]	; (8009378 <_printf_i+0x220>)
 80091e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80091e6:	e055      	b.n	8009294 <_printf_i+0x13c>
 80091e8:	6813      	ldr	r3, [r2, #0]
 80091ea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80091ee:	1d19      	adds	r1, r3, #4
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	6011      	str	r1, [r2, #0]
 80091f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80091f8:	2301      	movs	r3, #1
 80091fa:	e08c      	b.n	8009316 <_printf_i+0x1be>
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009202:	6011      	str	r1, [r2, #0]
 8009204:	bf18      	it	ne
 8009206:	b21b      	sxthne	r3, r3
 8009208:	e7cf      	b.n	80091aa <_printf_i+0x52>
 800920a:	6813      	ldr	r3, [r2, #0]
 800920c:	6825      	ldr	r5, [r4, #0]
 800920e:	1d18      	adds	r0, r3, #4
 8009210:	6010      	str	r0, [r2, #0]
 8009212:	0628      	lsls	r0, r5, #24
 8009214:	d501      	bpl.n	800921a <_printf_i+0xc2>
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	e002      	b.n	8009220 <_printf_i+0xc8>
 800921a:	0668      	lsls	r0, r5, #25
 800921c:	d5fb      	bpl.n	8009216 <_printf_i+0xbe>
 800921e:	881b      	ldrh	r3, [r3, #0]
 8009220:	296f      	cmp	r1, #111	; 0x6f
 8009222:	bf14      	ite	ne
 8009224:	220a      	movne	r2, #10
 8009226:	2208      	moveq	r2, #8
 8009228:	4852      	ldr	r0, [pc, #328]	; (8009374 <_printf_i+0x21c>)
 800922a:	2100      	movs	r1, #0
 800922c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009230:	6865      	ldr	r5, [r4, #4]
 8009232:	2d00      	cmp	r5, #0
 8009234:	60a5      	str	r5, [r4, #8]
 8009236:	f2c0 8095 	blt.w	8009364 <_printf_i+0x20c>
 800923a:	6821      	ldr	r1, [r4, #0]
 800923c:	f021 0104 	bic.w	r1, r1, #4
 8009240:	6021      	str	r1, [r4, #0]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d13d      	bne.n	80092c2 <_printf_i+0x16a>
 8009246:	2d00      	cmp	r5, #0
 8009248:	f040 808e 	bne.w	8009368 <_printf_i+0x210>
 800924c:	4665      	mov	r5, ip
 800924e:	2a08      	cmp	r2, #8
 8009250:	d10b      	bne.n	800926a <_printf_i+0x112>
 8009252:	6823      	ldr	r3, [r4, #0]
 8009254:	07db      	lsls	r3, r3, #31
 8009256:	d508      	bpl.n	800926a <_printf_i+0x112>
 8009258:	6923      	ldr	r3, [r4, #16]
 800925a:	6862      	ldr	r2, [r4, #4]
 800925c:	429a      	cmp	r2, r3
 800925e:	bfde      	ittt	le
 8009260:	2330      	movle	r3, #48	; 0x30
 8009262:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009266:	f105 35ff 	addle.w	r5, r5, #4294967295
 800926a:	ebac 0305 	sub.w	r3, ip, r5
 800926e:	6123      	str	r3, [r4, #16]
 8009270:	f8cd 8000 	str.w	r8, [sp]
 8009274:	463b      	mov	r3, r7
 8009276:	aa03      	add	r2, sp, #12
 8009278:	4621      	mov	r1, r4
 800927a:	4630      	mov	r0, r6
 800927c:	f7ff fef6 	bl	800906c <_printf_common>
 8009280:	3001      	adds	r0, #1
 8009282:	d14d      	bne.n	8009320 <_printf_i+0x1c8>
 8009284:	f04f 30ff 	mov.w	r0, #4294967295
 8009288:	b005      	add	sp, #20
 800928a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800928e:	4839      	ldr	r0, [pc, #228]	; (8009374 <_printf_i+0x21c>)
 8009290:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009294:	6813      	ldr	r3, [r2, #0]
 8009296:	6821      	ldr	r1, [r4, #0]
 8009298:	1d1d      	adds	r5, r3, #4
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	6015      	str	r5, [r2, #0]
 800929e:	060a      	lsls	r2, r1, #24
 80092a0:	d50b      	bpl.n	80092ba <_printf_i+0x162>
 80092a2:	07ca      	lsls	r2, r1, #31
 80092a4:	bf44      	itt	mi
 80092a6:	f041 0120 	orrmi.w	r1, r1, #32
 80092aa:	6021      	strmi	r1, [r4, #0]
 80092ac:	b91b      	cbnz	r3, 80092b6 <_printf_i+0x15e>
 80092ae:	6822      	ldr	r2, [r4, #0]
 80092b0:	f022 0220 	bic.w	r2, r2, #32
 80092b4:	6022      	str	r2, [r4, #0]
 80092b6:	2210      	movs	r2, #16
 80092b8:	e7b7      	b.n	800922a <_printf_i+0xd2>
 80092ba:	064d      	lsls	r5, r1, #25
 80092bc:	bf48      	it	mi
 80092be:	b29b      	uxthmi	r3, r3
 80092c0:	e7ef      	b.n	80092a2 <_printf_i+0x14a>
 80092c2:	4665      	mov	r5, ip
 80092c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80092c8:	fb02 3311 	mls	r3, r2, r1, r3
 80092cc:	5cc3      	ldrb	r3, [r0, r3]
 80092ce:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80092d2:	460b      	mov	r3, r1
 80092d4:	2900      	cmp	r1, #0
 80092d6:	d1f5      	bne.n	80092c4 <_printf_i+0x16c>
 80092d8:	e7b9      	b.n	800924e <_printf_i+0xf6>
 80092da:	6813      	ldr	r3, [r2, #0]
 80092dc:	6825      	ldr	r5, [r4, #0]
 80092de:	1d18      	adds	r0, r3, #4
 80092e0:	6961      	ldr	r1, [r4, #20]
 80092e2:	6010      	str	r0, [r2, #0]
 80092e4:	0628      	lsls	r0, r5, #24
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	d501      	bpl.n	80092ee <_printf_i+0x196>
 80092ea:	6019      	str	r1, [r3, #0]
 80092ec:	e002      	b.n	80092f4 <_printf_i+0x19c>
 80092ee:	066a      	lsls	r2, r5, #25
 80092f0:	d5fb      	bpl.n	80092ea <_printf_i+0x192>
 80092f2:	8019      	strh	r1, [r3, #0]
 80092f4:	2300      	movs	r3, #0
 80092f6:	4665      	mov	r5, ip
 80092f8:	6123      	str	r3, [r4, #16]
 80092fa:	e7b9      	b.n	8009270 <_printf_i+0x118>
 80092fc:	6813      	ldr	r3, [r2, #0]
 80092fe:	1d19      	adds	r1, r3, #4
 8009300:	6011      	str	r1, [r2, #0]
 8009302:	681d      	ldr	r5, [r3, #0]
 8009304:	6862      	ldr	r2, [r4, #4]
 8009306:	2100      	movs	r1, #0
 8009308:	4628      	mov	r0, r5
 800930a:	f000 ff71 	bl	800a1f0 <memchr>
 800930e:	b108      	cbz	r0, 8009314 <_printf_i+0x1bc>
 8009310:	1b40      	subs	r0, r0, r5
 8009312:	6060      	str	r0, [r4, #4]
 8009314:	6863      	ldr	r3, [r4, #4]
 8009316:	6123      	str	r3, [r4, #16]
 8009318:	2300      	movs	r3, #0
 800931a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800931e:	e7a7      	b.n	8009270 <_printf_i+0x118>
 8009320:	6923      	ldr	r3, [r4, #16]
 8009322:	462a      	mov	r2, r5
 8009324:	4639      	mov	r1, r7
 8009326:	4630      	mov	r0, r6
 8009328:	47c0      	blx	r8
 800932a:	3001      	adds	r0, #1
 800932c:	d0aa      	beq.n	8009284 <_printf_i+0x12c>
 800932e:	6823      	ldr	r3, [r4, #0]
 8009330:	079b      	lsls	r3, r3, #30
 8009332:	d413      	bmi.n	800935c <_printf_i+0x204>
 8009334:	68e0      	ldr	r0, [r4, #12]
 8009336:	9b03      	ldr	r3, [sp, #12]
 8009338:	4298      	cmp	r0, r3
 800933a:	bfb8      	it	lt
 800933c:	4618      	movlt	r0, r3
 800933e:	e7a3      	b.n	8009288 <_printf_i+0x130>
 8009340:	2301      	movs	r3, #1
 8009342:	464a      	mov	r2, r9
 8009344:	4639      	mov	r1, r7
 8009346:	4630      	mov	r0, r6
 8009348:	47c0      	blx	r8
 800934a:	3001      	adds	r0, #1
 800934c:	d09a      	beq.n	8009284 <_printf_i+0x12c>
 800934e:	3501      	adds	r5, #1
 8009350:	68e3      	ldr	r3, [r4, #12]
 8009352:	9a03      	ldr	r2, [sp, #12]
 8009354:	1a9b      	subs	r3, r3, r2
 8009356:	42ab      	cmp	r3, r5
 8009358:	dcf2      	bgt.n	8009340 <_printf_i+0x1e8>
 800935a:	e7eb      	b.n	8009334 <_printf_i+0x1dc>
 800935c:	2500      	movs	r5, #0
 800935e:	f104 0919 	add.w	r9, r4, #25
 8009362:	e7f5      	b.n	8009350 <_printf_i+0x1f8>
 8009364:	2b00      	cmp	r3, #0
 8009366:	d1ac      	bne.n	80092c2 <_printf_i+0x16a>
 8009368:	7803      	ldrb	r3, [r0, #0]
 800936a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800936e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009372:	e76c      	b.n	800924e <_printf_i+0xf6>
 8009374:	0800b8e2 	.word	0x0800b8e2
 8009378:	0800b8f3 	.word	0x0800b8f3

0800937c <iprintf>:
 800937c:	b40f      	push	{r0, r1, r2, r3}
 800937e:	4b0a      	ldr	r3, [pc, #40]	; (80093a8 <iprintf+0x2c>)
 8009380:	b513      	push	{r0, r1, r4, lr}
 8009382:	681c      	ldr	r4, [r3, #0]
 8009384:	b124      	cbz	r4, 8009390 <iprintf+0x14>
 8009386:	69a3      	ldr	r3, [r4, #24]
 8009388:	b913      	cbnz	r3, 8009390 <iprintf+0x14>
 800938a:	4620      	mov	r0, r4
 800938c:	f000 fe90 	bl	800a0b0 <__sinit>
 8009390:	ab05      	add	r3, sp, #20
 8009392:	9a04      	ldr	r2, [sp, #16]
 8009394:	68a1      	ldr	r1, [r4, #8]
 8009396:	4620      	mov	r0, r4
 8009398:	9301      	str	r3, [sp, #4]
 800939a:	f001 fafb 	bl	800a994 <_vfiprintf_r>
 800939e:	b002      	add	sp, #8
 80093a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093a4:	b004      	add	sp, #16
 80093a6:	4770      	bx	lr
 80093a8:	2000017c 	.word	0x2000017c

080093ac <quorem>:
 80093ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093b0:	6903      	ldr	r3, [r0, #16]
 80093b2:	690c      	ldr	r4, [r1, #16]
 80093b4:	4680      	mov	r8, r0
 80093b6:	42a3      	cmp	r3, r4
 80093b8:	f2c0 8084 	blt.w	80094c4 <quorem+0x118>
 80093bc:	3c01      	subs	r4, #1
 80093be:	f101 0714 	add.w	r7, r1, #20
 80093c2:	f100 0614 	add.w	r6, r0, #20
 80093c6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80093ca:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80093ce:	3501      	adds	r5, #1
 80093d0:	fbb0 f5f5 	udiv	r5, r0, r5
 80093d4:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80093d8:	eb06 030c 	add.w	r3, r6, ip
 80093dc:	eb07 090c 	add.w	r9, r7, ip
 80093e0:	9301      	str	r3, [sp, #4]
 80093e2:	b39d      	cbz	r5, 800944c <quorem+0xa0>
 80093e4:	f04f 0a00 	mov.w	sl, #0
 80093e8:	4638      	mov	r0, r7
 80093ea:	46b6      	mov	lr, r6
 80093ec:	46d3      	mov	fp, sl
 80093ee:	f850 2b04 	ldr.w	r2, [r0], #4
 80093f2:	b293      	uxth	r3, r2
 80093f4:	fb05 a303 	mla	r3, r5, r3, sl
 80093f8:	0c12      	lsrs	r2, r2, #16
 80093fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80093fe:	fb05 a202 	mla	r2, r5, r2, sl
 8009402:	b29b      	uxth	r3, r3
 8009404:	ebab 0303 	sub.w	r3, fp, r3
 8009408:	f8de b000 	ldr.w	fp, [lr]
 800940c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009410:	fa1f fb8b 	uxth.w	fp, fp
 8009414:	445b      	add	r3, fp
 8009416:	fa1f fb82 	uxth.w	fp, r2
 800941a:	f8de 2000 	ldr.w	r2, [lr]
 800941e:	4581      	cmp	r9, r0
 8009420:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009424:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009428:	b29b      	uxth	r3, r3
 800942a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800942e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009432:	f84e 3b04 	str.w	r3, [lr], #4
 8009436:	d2da      	bcs.n	80093ee <quorem+0x42>
 8009438:	f856 300c 	ldr.w	r3, [r6, ip]
 800943c:	b933      	cbnz	r3, 800944c <quorem+0xa0>
 800943e:	9b01      	ldr	r3, [sp, #4]
 8009440:	3b04      	subs	r3, #4
 8009442:	429e      	cmp	r6, r3
 8009444:	461a      	mov	r2, r3
 8009446:	d331      	bcc.n	80094ac <quorem+0x100>
 8009448:	f8c8 4010 	str.w	r4, [r8, #16]
 800944c:	4640      	mov	r0, r8
 800944e:	f001 f8fd 	bl	800a64c <__mcmp>
 8009452:	2800      	cmp	r0, #0
 8009454:	db26      	blt.n	80094a4 <quorem+0xf8>
 8009456:	4630      	mov	r0, r6
 8009458:	f04f 0c00 	mov.w	ip, #0
 800945c:	3501      	adds	r5, #1
 800945e:	f857 1b04 	ldr.w	r1, [r7], #4
 8009462:	f8d0 e000 	ldr.w	lr, [r0]
 8009466:	b28b      	uxth	r3, r1
 8009468:	ebac 0303 	sub.w	r3, ip, r3
 800946c:	fa1f f28e 	uxth.w	r2, lr
 8009470:	4413      	add	r3, r2
 8009472:	0c0a      	lsrs	r2, r1, #16
 8009474:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009478:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800947c:	b29b      	uxth	r3, r3
 800947e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009482:	45b9      	cmp	r9, r7
 8009484:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009488:	f840 3b04 	str.w	r3, [r0], #4
 800948c:	d2e7      	bcs.n	800945e <quorem+0xb2>
 800948e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009492:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009496:	b92a      	cbnz	r2, 80094a4 <quorem+0xf8>
 8009498:	3b04      	subs	r3, #4
 800949a:	429e      	cmp	r6, r3
 800949c:	461a      	mov	r2, r3
 800949e:	d30b      	bcc.n	80094b8 <quorem+0x10c>
 80094a0:	f8c8 4010 	str.w	r4, [r8, #16]
 80094a4:	4628      	mov	r0, r5
 80094a6:	b003      	add	sp, #12
 80094a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094ac:	6812      	ldr	r2, [r2, #0]
 80094ae:	3b04      	subs	r3, #4
 80094b0:	2a00      	cmp	r2, #0
 80094b2:	d1c9      	bne.n	8009448 <quorem+0x9c>
 80094b4:	3c01      	subs	r4, #1
 80094b6:	e7c4      	b.n	8009442 <quorem+0x96>
 80094b8:	6812      	ldr	r2, [r2, #0]
 80094ba:	3b04      	subs	r3, #4
 80094bc:	2a00      	cmp	r2, #0
 80094be:	d1ef      	bne.n	80094a0 <quorem+0xf4>
 80094c0:	3c01      	subs	r4, #1
 80094c2:	e7ea      	b.n	800949a <quorem+0xee>
 80094c4:	2000      	movs	r0, #0
 80094c6:	e7ee      	b.n	80094a6 <quorem+0xfa>

080094c8 <_dtoa_r>:
 80094c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094cc:	4616      	mov	r6, r2
 80094ce:	461f      	mov	r7, r3
 80094d0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80094d2:	b095      	sub	sp, #84	; 0x54
 80094d4:	4604      	mov	r4, r0
 80094d6:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80094da:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80094de:	b93d      	cbnz	r5, 80094f0 <_dtoa_r+0x28>
 80094e0:	2010      	movs	r0, #16
 80094e2:	f000 fe7d 	bl	800a1e0 <malloc>
 80094e6:	6260      	str	r0, [r4, #36]	; 0x24
 80094e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80094ec:	6005      	str	r5, [r0, #0]
 80094ee:	60c5      	str	r5, [r0, #12]
 80094f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094f2:	6819      	ldr	r1, [r3, #0]
 80094f4:	b151      	cbz	r1, 800950c <_dtoa_r+0x44>
 80094f6:	685a      	ldr	r2, [r3, #4]
 80094f8:	2301      	movs	r3, #1
 80094fa:	4093      	lsls	r3, r2
 80094fc:	604a      	str	r2, [r1, #4]
 80094fe:	608b      	str	r3, [r1, #8]
 8009500:	4620      	mov	r0, r4
 8009502:	f000 fec2 	bl	800a28a <_Bfree>
 8009506:	2200      	movs	r2, #0
 8009508:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800950a:	601a      	str	r2, [r3, #0]
 800950c:	1e3b      	subs	r3, r7, #0
 800950e:	bfaf      	iteee	ge
 8009510:	2300      	movge	r3, #0
 8009512:	2201      	movlt	r2, #1
 8009514:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009518:	9303      	strlt	r3, [sp, #12]
 800951a:	bfac      	ite	ge
 800951c:	f8c8 3000 	strge.w	r3, [r8]
 8009520:	f8c8 2000 	strlt.w	r2, [r8]
 8009524:	4bae      	ldr	r3, [pc, #696]	; (80097e0 <_dtoa_r+0x318>)
 8009526:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800952a:	ea33 0308 	bics.w	r3, r3, r8
 800952e:	d11b      	bne.n	8009568 <_dtoa_r+0xa0>
 8009530:	f242 730f 	movw	r3, #9999	; 0x270f
 8009534:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009536:	6013      	str	r3, [r2, #0]
 8009538:	9b02      	ldr	r3, [sp, #8]
 800953a:	b923      	cbnz	r3, 8009546 <_dtoa_r+0x7e>
 800953c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009540:	2800      	cmp	r0, #0
 8009542:	f000 8545 	beq.w	8009fd0 <_dtoa_r+0xb08>
 8009546:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009548:	b953      	cbnz	r3, 8009560 <_dtoa_r+0x98>
 800954a:	4ba6      	ldr	r3, [pc, #664]	; (80097e4 <_dtoa_r+0x31c>)
 800954c:	e021      	b.n	8009592 <_dtoa_r+0xca>
 800954e:	4ba6      	ldr	r3, [pc, #664]	; (80097e8 <_dtoa_r+0x320>)
 8009550:	9306      	str	r3, [sp, #24]
 8009552:	3308      	adds	r3, #8
 8009554:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009556:	6013      	str	r3, [r2, #0]
 8009558:	9806      	ldr	r0, [sp, #24]
 800955a:	b015      	add	sp, #84	; 0x54
 800955c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009560:	4ba0      	ldr	r3, [pc, #640]	; (80097e4 <_dtoa_r+0x31c>)
 8009562:	9306      	str	r3, [sp, #24]
 8009564:	3303      	adds	r3, #3
 8009566:	e7f5      	b.n	8009554 <_dtoa_r+0x8c>
 8009568:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800956c:	2200      	movs	r2, #0
 800956e:	2300      	movs	r3, #0
 8009570:	4630      	mov	r0, r6
 8009572:	4639      	mov	r1, r7
 8009574:	f7f7 fa18 	bl	80009a8 <__aeabi_dcmpeq>
 8009578:	4682      	mov	sl, r0
 800957a:	b160      	cbz	r0, 8009596 <_dtoa_r+0xce>
 800957c:	2301      	movs	r3, #1
 800957e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009580:	6013      	str	r3, [r2, #0]
 8009582:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009584:	2b00      	cmp	r3, #0
 8009586:	f000 8520 	beq.w	8009fca <_dtoa_r+0xb02>
 800958a:	4b98      	ldr	r3, [pc, #608]	; (80097ec <_dtoa_r+0x324>)
 800958c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800958e:	6013      	str	r3, [r2, #0]
 8009590:	3b01      	subs	r3, #1
 8009592:	9306      	str	r3, [sp, #24]
 8009594:	e7e0      	b.n	8009558 <_dtoa_r+0x90>
 8009596:	ab12      	add	r3, sp, #72	; 0x48
 8009598:	9301      	str	r3, [sp, #4]
 800959a:	ab13      	add	r3, sp, #76	; 0x4c
 800959c:	9300      	str	r3, [sp, #0]
 800959e:	4632      	mov	r2, r6
 80095a0:	463b      	mov	r3, r7
 80095a2:	4620      	mov	r0, r4
 80095a4:	f001 f8ca 	bl	800a73c <__d2b>
 80095a8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80095ac:	4683      	mov	fp, r0
 80095ae:	2d00      	cmp	r5, #0
 80095b0:	d07d      	beq.n	80096ae <_dtoa_r+0x1e6>
 80095b2:	46b0      	mov	r8, r6
 80095b4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80095b8:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80095bc:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80095c0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80095c4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80095c8:	2200      	movs	r2, #0
 80095ca:	4b89      	ldr	r3, [pc, #548]	; (80097f0 <_dtoa_r+0x328>)
 80095cc:	4640      	mov	r0, r8
 80095ce:	4649      	mov	r1, r9
 80095d0:	f7f6 fdca 	bl	8000168 <__aeabi_dsub>
 80095d4:	a37c      	add	r3, pc, #496	; (adr r3, 80097c8 <_dtoa_r+0x300>)
 80095d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095da:	f7f6 ff7d 	bl	80004d8 <__aeabi_dmul>
 80095de:	a37c      	add	r3, pc, #496	; (adr r3, 80097d0 <_dtoa_r+0x308>)
 80095e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e4:	f7f6 fdc2 	bl	800016c <__adddf3>
 80095e8:	4606      	mov	r6, r0
 80095ea:	4628      	mov	r0, r5
 80095ec:	460f      	mov	r7, r1
 80095ee:	f7f6 ff09 	bl	8000404 <__aeabi_i2d>
 80095f2:	a379      	add	r3, pc, #484	; (adr r3, 80097d8 <_dtoa_r+0x310>)
 80095f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f8:	f7f6 ff6e 	bl	80004d8 <__aeabi_dmul>
 80095fc:	4602      	mov	r2, r0
 80095fe:	460b      	mov	r3, r1
 8009600:	4630      	mov	r0, r6
 8009602:	4639      	mov	r1, r7
 8009604:	f7f6 fdb2 	bl	800016c <__adddf3>
 8009608:	4606      	mov	r6, r0
 800960a:	460f      	mov	r7, r1
 800960c:	f7f7 fa14 	bl	8000a38 <__aeabi_d2iz>
 8009610:	2200      	movs	r2, #0
 8009612:	4682      	mov	sl, r0
 8009614:	2300      	movs	r3, #0
 8009616:	4630      	mov	r0, r6
 8009618:	4639      	mov	r1, r7
 800961a:	f7f7 f9cf 	bl	80009bc <__aeabi_dcmplt>
 800961e:	b148      	cbz	r0, 8009634 <_dtoa_r+0x16c>
 8009620:	4650      	mov	r0, sl
 8009622:	f7f6 feef 	bl	8000404 <__aeabi_i2d>
 8009626:	4632      	mov	r2, r6
 8009628:	463b      	mov	r3, r7
 800962a:	f7f7 f9bd 	bl	80009a8 <__aeabi_dcmpeq>
 800962e:	b908      	cbnz	r0, 8009634 <_dtoa_r+0x16c>
 8009630:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009634:	f1ba 0f16 	cmp.w	sl, #22
 8009638:	d85a      	bhi.n	80096f0 <_dtoa_r+0x228>
 800963a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800963e:	496d      	ldr	r1, [pc, #436]	; (80097f4 <_dtoa_r+0x32c>)
 8009640:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009644:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009648:	f7f7 f9d6 	bl	80009f8 <__aeabi_dcmpgt>
 800964c:	2800      	cmp	r0, #0
 800964e:	d051      	beq.n	80096f4 <_dtoa_r+0x22c>
 8009650:	2300      	movs	r3, #0
 8009652:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009656:	930d      	str	r3, [sp, #52]	; 0x34
 8009658:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800965a:	1b5d      	subs	r5, r3, r5
 800965c:	1e6b      	subs	r3, r5, #1
 800965e:	9307      	str	r3, [sp, #28]
 8009660:	bf43      	ittte	mi
 8009662:	2300      	movmi	r3, #0
 8009664:	f1c5 0901 	rsbmi	r9, r5, #1
 8009668:	9307      	strmi	r3, [sp, #28]
 800966a:	f04f 0900 	movpl.w	r9, #0
 800966e:	f1ba 0f00 	cmp.w	sl, #0
 8009672:	db41      	blt.n	80096f8 <_dtoa_r+0x230>
 8009674:	9b07      	ldr	r3, [sp, #28]
 8009676:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800967a:	4453      	add	r3, sl
 800967c:	9307      	str	r3, [sp, #28]
 800967e:	2300      	movs	r3, #0
 8009680:	9308      	str	r3, [sp, #32]
 8009682:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009684:	2b09      	cmp	r3, #9
 8009686:	f200 808f 	bhi.w	80097a8 <_dtoa_r+0x2e0>
 800968a:	2b05      	cmp	r3, #5
 800968c:	bfc4      	itt	gt
 800968e:	3b04      	subgt	r3, #4
 8009690:	931e      	strgt	r3, [sp, #120]	; 0x78
 8009692:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009694:	bfc8      	it	gt
 8009696:	2500      	movgt	r5, #0
 8009698:	f1a3 0302 	sub.w	r3, r3, #2
 800969c:	bfd8      	it	le
 800969e:	2501      	movle	r5, #1
 80096a0:	2b03      	cmp	r3, #3
 80096a2:	f200 808d 	bhi.w	80097c0 <_dtoa_r+0x2f8>
 80096a6:	e8df f003 	tbb	[pc, r3]
 80096aa:	7d7b      	.short	0x7d7b
 80096ac:	6f2f      	.short	0x6f2f
 80096ae:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80096b2:	441d      	add	r5, r3
 80096b4:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80096b8:	2820      	cmp	r0, #32
 80096ba:	dd13      	ble.n	80096e4 <_dtoa_r+0x21c>
 80096bc:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80096c0:	9b02      	ldr	r3, [sp, #8]
 80096c2:	fa08 f800 	lsl.w	r8, r8, r0
 80096c6:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80096ca:	fa23 f000 	lsr.w	r0, r3, r0
 80096ce:	ea48 0000 	orr.w	r0, r8, r0
 80096d2:	f7f6 fe87 	bl	80003e4 <__aeabi_ui2d>
 80096d6:	2301      	movs	r3, #1
 80096d8:	4680      	mov	r8, r0
 80096da:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80096de:	3d01      	subs	r5, #1
 80096e0:	9310      	str	r3, [sp, #64]	; 0x40
 80096e2:	e771      	b.n	80095c8 <_dtoa_r+0x100>
 80096e4:	9b02      	ldr	r3, [sp, #8]
 80096e6:	f1c0 0020 	rsb	r0, r0, #32
 80096ea:	fa03 f000 	lsl.w	r0, r3, r0
 80096ee:	e7f0      	b.n	80096d2 <_dtoa_r+0x20a>
 80096f0:	2301      	movs	r3, #1
 80096f2:	e7b0      	b.n	8009656 <_dtoa_r+0x18e>
 80096f4:	900d      	str	r0, [sp, #52]	; 0x34
 80096f6:	e7af      	b.n	8009658 <_dtoa_r+0x190>
 80096f8:	f1ca 0300 	rsb	r3, sl, #0
 80096fc:	9308      	str	r3, [sp, #32]
 80096fe:	2300      	movs	r3, #0
 8009700:	eba9 090a 	sub.w	r9, r9, sl
 8009704:	930c      	str	r3, [sp, #48]	; 0x30
 8009706:	e7bc      	b.n	8009682 <_dtoa_r+0x1ba>
 8009708:	2301      	movs	r3, #1
 800970a:	9309      	str	r3, [sp, #36]	; 0x24
 800970c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800970e:	2b00      	cmp	r3, #0
 8009710:	dd74      	ble.n	80097fc <_dtoa_r+0x334>
 8009712:	4698      	mov	r8, r3
 8009714:	9304      	str	r3, [sp, #16]
 8009716:	2200      	movs	r2, #0
 8009718:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800971a:	6072      	str	r2, [r6, #4]
 800971c:	2204      	movs	r2, #4
 800971e:	f102 0014 	add.w	r0, r2, #20
 8009722:	4298      	cmp	r0, r3
 8009724:	6871      	ldr	r1, [r6, #4]
 8009726:	d96e      	bls.n	8009806 <_dtoa_r+0x33e>
 8009728:	4620      	mov	r0, r4
 800972a:	f000 fd7a 	bl	800a222 <_Balloc>
 800972e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009730:	6030      	str	r0, [r6, #0]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f1b8 0f0e 	cmp.w	r8, #14
 8009738:	9306      	str	r3, [sp, #24]
 800973a:	f200 80ed 	bhi.w	8009918 <_dtoa_r+0x450>
 800973e:	2d00      	cmp	r5, #0
 8009740:	f000 80ea 	beq.w	8009918 <_dtoa_r+0x450>
 8009744:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009748:	f1ba 0f00 	cmp.w	sl, #0
 800974c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009750:	dd77      	ble.n	8009842 <_dtoa_r+0x37a>
 8009752:	4a28      	ldr	r2, [pc, #160]	; (80097f4 <_dtoa_r+0x32c>)
 8009754:	f00a 030f 	and.w	r3, sl, #15
 8009758:	ea4f 162a 	mov.w	r6, sl, asr #4
 800975c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009760:	06f0      	lsls	r0, r6, #27
 8009762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009766:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800976a:	d568      	bpl.n	800983e <_dtoa_r+0x376>
 800976c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009770:	4b21      	ldr	r3, [pc, #132]	; (80097f8 <_dtoa_r+0x330>)
 8009772:	2503      	movs	r5, #3
 8009774:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009778:	f7f6 ffd8 	bl	800072c <__aeabi_ddiv>
 800977c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009780:	f006 060f 	and.w	r6, r6, #15
 8009784:	4f1c      	ldr	r7, [pc, #112]	; (80097f8 <_dtoa_r+0x330>)
 8009786:	e04f      	b.n	8009828 <_dtoa_r+0x360>
 8009788:	2301      	movs	r3, #1
 800978a:	9309      	str	r3, [sp, #36]	; 0x24
 800978c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800978e:	4453      	add	r3, sl
 8009790:	f103 0801 	add.w	r8, r3, #1
 8009794:	9304      	str	r3, [sp, #16]
 8009796:	4643      	mov	r3, r8
 8009798:	2b01      	cmp	r3, #1
 800979a:	bfb8      	it	lt
 800979c:	2301      	movlt	r3, #1
 800979e:	e7ba      	b.n	8009716 <_dtoa_r+0x24e>
 80097a0:	2300      	movs	r3, #0
 80097a2:	e7b2      	b.n	800970a <_dtoa_r+0x242>
 80097a4:	2300      	movs	r3, #0
 80097a6:	e7f0      	b.n	800978a <_dtoa_r+0x2c2>
 80097a8:	2501      	movs	r5, #1
 80097aa:	2300      	movs	r3, #0
 80097ac:	9509      	str	r5, [sp, #36]	; 0x24
 80097ae:	931e      	str	r3, [sp, #120]	; 0x78
 80097b0:	f04f 33ff 	mov.w	r3, #4294967295
 80097b4:	2200      	movs	r2, #0
 80097b6:	9304      	str	r3, [sp, #16]
 80097b8:	4698      	mov	r8, r3
 80097ba:	2312      	movs	r3, #18
 80097bc:	921f      	str	r2, [sp, #124]	; 0x7c
 80097be:	e7aa      	b.n	8009716 <_dtoa_r+0x24e>
 80097c0:	2301      	movs	r3, #1
 80097c2:	9309      	str	r3, [sp, #36]	; 0x24
 80097c4:	e7f4      	b.n	80097b0 <_dtoa_r+0x2e8>
 80097c6:	bf00      	nop
 80097c8:	636f4361 	.word	0x636f4361
 80097cc:	3fd287a7 	.word	0x3fd287a7
 80097d0:	8b60c8b3 	.word	0x8b60c8b3
 80097d4:	3fc68a28 	.word	0x3fc68a28
 80097d8:	509f79fb 	.word	0x509f79fb
 80097dc:	3fd34413 	.word	0x3fd34413
 80097e0:	7ff00000 	.word	0x7ff00000
 80097e4:	0800b90d 	.word	0x0800b90d
 80097e8:	0800b904 	.word	0x0800b904
 80097ec:	0800b8e1 	.word	0x0800b8e1
 80097f0:	3ff80000 	.word	0x3ff80000
 80097f4:	0800b9a0 	.word	0x0800b9a0
 80097f8:	0800b978 	.word	0x0800b978
 80097fc:	2301      	movs	r3, #1
 80097fe:	9304      	str	r3, [sp, #16]
 8009800:	4698      	mov	r8, r3
 8009802:	461a      	mov	r2, r3
 8009804:	e7da      	b.n	80097bc <_dtoa_r+0x2f4>
 8009806:	3101      	adds	r1, #1
 8009808:	6071      	str	r1, [r6, #4]
 800980a:	0052      	lsls	r2, r2, #1
 800980c:	e787      	b.n	800971e <_dtoa_r+0x256>
 800980e:	07f1      	lsls	r1, r6, #31
 8009810:	d508      	bpl.n	8009824 <_dtoa_r+0x35c>
 8009812:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009816:	e9d7 2300 	ldrd	r2, r3, [r7]
 800981a:	f7f6 fe5d 	bl	80004d8 <__aeabi_dmul>
 800981e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009822:	3501      	adds	r5, #1
 8009824:	1076      	asrs	r6, r6, #1
 8009826:	3708      	adds	r7, #8
 8009828:	2e00      	cmp	r6, #0
 800982a:	d1f0      	bne.n	800980e <_dtoa_r+0x346>
 800982c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009830:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009834:	f7f6 ff7a 	bl	800072c <__aeabi_ddiv>
 8009838:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800983c:	e01b      	b.n	8009876 <_dtoa_r+0x3ae>
 800983e:	2502      	movs	r5, #2
 8009840:	e7a0      	b.n	8009784 <_dtoa_r+0x2bc>
 8009842:	f000 80a4 	beq.w	800998e <_dtoa_r+0x4c6>
 8009846:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800984a:	f1ca 0600 	rsb	r6, sl, #0
 800984e:	4ba0      	ldr	r3, [pc, #640]	; (8009ad0 <_dtoa_r+0x608>)
 8009850:	f006 020f 	and.w	r2, r6, #15
 8009854:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985c:	f7f6 fe3c 	bl	80004d8 <__aeabi_dmul>
 8009860:	2502      	movs	r5, #2
 8009862:	2300      	movs	r3, #0
 8009864:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009868:	4f9a      	ldr	r7, [pc, #616]	; (8009ad4 <_dtoa_r+0x60c>)
 800986a:	1136      	asrs	r6, r6, #4
 800986c:	2e00      	cmp	r6, #0
 800986e:	f040 8083 	bne.w	8009978 <_dtoa_r+0x4b0>
 8009872:	2b00      	cmp	r3, #0
 8009874:	d1e0      	bne.n	8009838 <_dtoa_r+0x370>
 8009876:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009878:	2b00      	cmp	r3, #0
 800987a:	f000 808a 	beq.w	8009992 <_dtoa_r+0x4ca>
 800987e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009882:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009886:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800988a:	2200      	movs	r2, #0
 800988c:	4b92      	ldr	r3, [pc, #584]	; (8009ad8 <_dtoa_r+0x610>)
 800988e:	f7f7 f895 	bl	80009bc <__aeabi_dcmplt>
 8009892:	2800      	cmp	r0, #0
 8009894:	d07d      	beq.n	8009992 <_dtoa_r+0x4ca>
 8009896:	f1b8 0f00 	cmp.w	r8, #0
 800989a:	d07a      	beq.n	8009992 <_dtoa_r+0x4ca>
 800989c:	9b04      	ldr	r3, [sp, #16]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	dd36      	ble.n	8009910 <_dtoa_r+0x448>
 80098a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80098a6:	2200      	movs	r2, #0
 80098a8:	4b8c      	ldr	r3, [pc, #560]	; (8009adc <_dtoa_r+0x614>)
 80098aa:	f7f6 fe15 	bl	80004d8 <__aeabi_dmul>
 80098ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098b2:	9e04      	ldr	r6, [sp, #16]
 80098b4:	f10a 37ff 	add.w	r7, sl, #4294967295
 80098b8:	3501      	adds	r5, #1
 80098ba:	4628      	mov	r0, r5
 80098bc:	f7f6 fda2 	bl	8000404 <__aeabi_i2d>
 80098c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80098c4:	f7f6 fe08 	bl	80004d8 <__aeabi_dmul>
 80098c8:	2200      	movs	r2, #0
 80098ca:	4b85      	ldr	r3, [pc, #532]	; (8009ae0 <_dtoa_r+0x618>)
 80098cc:	f7f6 fc4e 	bl	800016c <__adddf3>
 80098d0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80098d4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80098d8:	950b      	str	r5, [sp, #44]	; 0x2c
 80098da:	2e00      	cmp	r6, #0
 80098dc:	d15c      	bne.n	8009998 <_dtoa_r+0x4d0>
 80098de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098e2:	2200      	movs	r2, #0
 80098e4:	4b7f      	ldr	r3, [pc, #508]	; (8009ae4 <_dtoa_r+0x61c>)
 80098e6:	f7f6 fc3f 	bl	8000168 <__aeabi_dsub>
 80098ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80098ec:	462b      	mov	r3, r5
 80098ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098f2:	f7f7 f881 	bl	80009f8 <__aeabi_dcmpgt>
 80098f6:	2800      	cmp	r0, #0
 80098f8:	f040 8281 	bne.w	8009dfe <_dtoa_r+0x936>
 80098fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009900:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009902:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009906:	f7f7 f859 	bl	80009bc <__aeabi_dcmplt>
 800990a:	2800      	cmp	r0, #0
 800990c:	f040 8275 	bne.w	8009dfa <_dtoa_r+0x932>
 8009910:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009914:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009918:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800991a:	2b00      	cmp	r3, #0
 800991c:	f2c0 814b 	blt.w	8009bb6 <_dtoa_r+0x6ee>
 8009920:	f1ba 0f0e 	cmp.w	sl, #14
 8009924:	f300 8147 	bgt.w	8009bb6 <_dtoa_r+0x6ee>
 8009928:	4b69      	ldr	r3, [pc, #420]	; (8009ad0 <_dtoa_r+0x608>)
 800992a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800992e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009932:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009936:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009938:	2b00      	cmp	r3, #0
 800993a:	f280 80d7 	bge.w	8009aec <_dtoa_r+0x624>
 800993e:	f1b8 0f00 	cmp.w	r8, #0
 8009942:	f300 80d3 	bgt.w	8009aec <_dtoa_r+0x624>
 8009946:	f040 8257 	bne.w	8009df8 <_dtoa_r+0x930>
 800994a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800994e:	2200      	movs	r2, #0
 8009950:	4b64      	ldr	r3, [pc, #400]	; (8009ae4 <_dtoa_r+0x61c>)
 8009952:	f7f6 fdc1 	bl	80004d8 <__aeabi_dmul>
 8009956:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800995a:	f7f7 f843 	bl	80009e4 <__aeabi_dcmpge>
 800995e:	4646      	mov	r6, r8
 8009960:	4647      	mov	r7, r8
 8009962:	2800      	cmp	r0, #0
 8009964:	f040 822d 	bne.w	8009dc2 <_dtoa_r+0x8fa>
 8009968:	9b06      	ldr	r3, [sp, #24]
 800996a:	9a06      	ldr	r2, [sp, #24]
 800996c:	1c5d      	adds	r5, r3, #1
 800996e:	2331      	movs	r3, #49	; 0x31
 8009970:	f10a 0a01 	add.w	sl, sl, #1
 8009974:	7013      	strb	r3, [r2, #0]
 8009976:	e228      	b.n	8009dca <_dtoa_r+0x902>
 8009978:	07f2      	lsls	r2, r6, #31
 800997a:	d505      	bpl.n	8009988 <_dtoa_r+0x4c0>
 800997c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009980:	f7f6 fdaa 	bl	80004d8 <__aeabi_dmul>
 8009984:	2301      	movs	r3, #1
 8009986:	3501      	adds	r5, #1
 8009988:	1076      	asrs	r6, r6, #1
 800998a:	3708      	adds	r7, #8
 800998c:	e76e      	b.n	800986c <_dtoa_r+0x3a4>
 800998e:	2502      	movs	r5, #2
 8009990:	e771      	b.n	8009876 <_dtoa_r+0x3ae>
 8009992:	4657      	mov	r7, sl
 8009994:	4646      	mov	r6, r8
 8009996:	e790      	b.n	80098ba <_dtoa_r+0x3f2>
 8009998:	4b4d      	ldr	r3, [pc, #308]	; (8009ad0 <_dtoa_r+0x608>)
 800999a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800999e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80099a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d048      	beq.n	8009a3a <_dtoa_r+0x572>
 80099a8:	4602      	mov	r2, r0
 80099aa:	460b      	mov	r3, r1
 80099ac:	2000      	movs	r0, #0
 80099ae:	494e      	ldr	r1, [pc, #312]	; (8009ae8 <_dtoa_r+0x620>)
 80099b0:	f7f6 febc 	bl	800072c <__aeabi_ddiv>
 80099b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80099b8:	f7f6 fbd6 	bl	8000168 <__aeabi_dsub>
 80099bc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80099c0:	9d06      	ldr	r5, [sp, #24]
 80099c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099c6:	f7f7 f837 	bl	8000a38 <__aeabi_d2iz>
 80099ca:	9011      	str	r0, [sp, #68]	; 0x44
 80099cc:	f7f6 fd1a 	bl	8000404 <__aeabi_i2d>
 80099d0:	4602      	mov	r2, r0
 80099d2:	460b      	mov	r3, r1
 80099d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099d8:	f7f6 fbc6 	bl	8000168 <__aeabi_dsub>
 80099dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80099de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099e2:	3330      	adds	r3, #48	; 0x30
 80099e4:	f805 3b01 	strb.w	r3, [r5], #1
 80099e8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80099ec:	f7f6 ffe6 	bl	80009bc <__aeabi_dcmplt>
 80099f0:	2800      	cmp	r0, #0
 80099f2:	d163      	bne.n	8009abc <_dtoa_r+0x5f4>
 80099f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80099f8:	2000      	movs	r0, #0
 80099fa:	4937      	ldr	r1, [pc, #220]	; (8009ad8 <_dtoa_r+0x610>)
 80099fc:	f7f6 fbb4 	bl	8000168 <__aeabi_dsub>
 8009a00:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009a04:	f7f6 ffda 	bl	80009bc <__aeabi_dcmplt>
 8009a08:	2800      	cmp	r0, #0
 8009a0a:	f040 80b5 	bne.w	8009b78 <_dtoa_r+0x6b0>
 8009a0e:	9b06      	ldr	r3, [sp, #24]
 8009a10:	1aeb      	subs	r3, r5, r3
 8009a12:	429e      	cmp	r6, r3
 8009a14:	f77f af7c 	ble.w	8009910 <_dtoa_r+0x448>
 8009a18:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	4b2f      	ldr	r3, [pc, #188]	; (8009adc <_dtoa_r+0x614>)
 8009a20:	f7f6 fd5a 	bl	80004d8 <__aeabi_dmul>
 8009a24:	2200      	movs	r2, #0
 8009a26:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009a2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a2e:	4b2b      	ldr	r3, [pc, #172]	; (8009adc <_dtoa_r+0x614>)
 8009a30:	f7f6 fd52 	bl	80004d8 <__aeabi_dmul>
 8009a34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a38:	e7c3      	b.n	80099c2 <_dtoa_r+0x4fa>
 8009a3a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009a3e:	f7f6 fd4b 	bl	80004d8 <__aeabi_dmul>
 8009a42:	9b06      	ldr	r3, [sp, #24]
 8009a44:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009a48:	199d      	adds	r5, r3, r6
 8009a4a:	461e      	mov	r6, r3
 8009a4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a50:	f7f6 fff2 	bl	8000a38 <__aeabi_d2iz>
 8009a54:	9011      	str	r0, [sp, #68]	; 0x44
 8009a56:	f7f6 fcd5 	bl	8000404 <__aeabi_i2d>
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	460b      	mov	r3, r1
 8009a5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a62:	f7f6 fb81 	bl	8000168 <__aeabi_dsub>
 8009a66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009a68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a6c:	3330      	adds	r3, #48	; 0x30
 8009a6e:	f806 3b01 	strb.w	r3, [r6], #1
 8009a72:	42ae      	cmp	r6, r5
 8009a74:	f04f 0200 	mov.w	r2, #0
 8009a78:	d124      	bne.n	8009ac4 <_dtoa_r+0x5fc>
 8009a7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009a7e:	4b1a      	ldr	r3, [pc, #104]	; (8009ae8 <_dtoa_r+0x620>)
 8009a80:	f7f6 fb74 	bl	800016c <__adddf3>
 8009a84:	4602      	mov	r2, r0
 8009a86:	460b      	mov	r3, r1
 8009a88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a8c:	f7f6 ffb4 	bl	80009f8 <__aeabi_dcmpgt>
 8009a90:	2800      	cmp	r0, #0
 8009a92:	d171      	bne.n	8009b78 <_dtoa_r+0x6b0>
 8009a94:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009a98:	2000      	movs	r0, #0
 8009a9a:	4913      	ldr	r1, [pc, #76]	; (8009ae8 <_dtoa_r+0x620>)
 8009a9c:	f7f6 fb64 	bl	8000168 <__aeabi_dsub>
 8009aa0:	4602      	mov	r2, r0
 8009aa2:	460b      	mov	r3, r1
 8009aa4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009aa8:	f7f6 ff88 	bl	80009bc <__aeabi_dcmplt>
 8009aac:	2800      	cmp	r0, #0
 8009aae:	f43f af2f 	beq.w	8009910 <_dtoa_r+0x448>
 8009ab2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009ab6:	1e6a      	subs	r2, r5, #1
 8009ab8:	2b30      	cmp	r3, #48	; 0x30
 8009aba:	d001      	beq.n	8009ac0 <_dtoa_r+0x5f8>
 8009abc:	46ba      	mov	sl, r7
 8009abe:	e04a      	b.n	8009b56 <_dtoa_r+0x68e>
 8009ac0:	4615      	mov	r5, r2
 8009ac2:	e7f6      	b.n	8009ab2 <_dtoa_r+0x5ea>
 8009ac4:	4b05      	ldr	r3, [pc, #20]	; (8009adc <_dtoa_r+0x614>)
 8009ac6:	f7f6 fd07 	bl	80004d8 <__aeabi_dmul>
 8009aca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ace:	e7bd      	b.n	8009a4c <_dtoa_r+0x584>
 8009ad0:	0800b9a0 	.word	0x0800b9a0
 8009ad4:	0800b978 	.word	0x0800b978
 8009ad8:	3ff00000 	.word	0x3ff00000
 8009adc:	40240000 	.word	0x40240000
 8009ae0:	401c0000 	.word	0x401c0000
 8009ae4:	40140000 	.word	0x40140000
 8009ae8:	3fe00000 	.word	0x3fe00000
 8009aec:	9d06      	ldr	r5, [sp, #24]
 8009aee:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009af2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009af6:	4630      	mov	r0, r6
 8009af8:	4639      	mov	r1, r7
 8009afa:	f7f6 fe17 	bl	800072c <__aeabi_ddiv>
 8009afe:	f7f6 ff9b 	bl	8000a38 <__aeabi_d2iz>
 8009b02:	4681      	mov	r9, r0
 8009b04:	f7f6 fc7e 	bl	8000404 <__aeabi_i2d>
 8009b08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b0c:	f7f6 fce4 	bl	80004d8 <__aeabi_dmul>
 8009b10:	4602      	mov	r2, r0
 8009b12:	460b      	mov	r3, r1
 8009b14:	4630      	mov	r0, r6
 8009b16:	4639      	mov	r1, r7
 8009b18:	f7f6 fb26 	bl	8000168 <__aeabi_dsub>
 8009b1c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8009b20:	f805 6b01 	strb.w	r6, [r5], #1
 8009b24:	9e06      	ldr	r6, [sp, #24]
 8009b26:	4602      	mov	r2, r0
 8009b28:	1bae      	subs	r6, r5, r6
 8009b2a:	45b0      	cmp	r8, r6
 8009b2c:	460b      	mov	r3, r1
 8009b2e:	d135      	bne.n	8009b9c <_dtoa_r+0x6d4>
 8009b30:	f7f6 fb1c 	bl	800016c <__adddf3>
 8009b34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b38:	4606      	mov	r6, r0
 8009b3a:	460f      	mov	r7, r1
 8009b3c:	f7f6 ff5c 	bl	80009f8 <__aeabi_dcmpgt>
 8009b40:	b9c8      	cbnz	r0, 8009b76 <_dtoa_r+0x6ae>
 8009b42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b46:	4630      	mov	r0, r6
 8009b48:	4639      	mov	r1, r7
 8009b4a:	f7f6 ff2d 	bl	80009a8 <__aeabi_dcmpeq>
 8009b4e:	b110      	cbz	r0, 8009b56 <_dtoa_r+0x68e>
 8009b50:	f019 0f01 	tst.w	r9, #1
 8009b54:	d10f      	bne.n	8009b76 <_dtoa_r+0x6ae>
 8009b56:	4659      	mov	r1, fp
 8009b58:	4620      	mov	r0, r4
 8009b5a:	f000 fb96 	bl	800a28a <_Bfree>
 8009b5e:	2300      	movs	r3, #0
 8009b60:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009b62:	702b      	strb	r3, [r5, #0]
 8009b64:	f10a 0301 	add.w	r3, sl, #1
 8009b68:	6013      	str	r3, [r2, #0]
 8009b6a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	f43f acf3 	beq.w	8009558 <_dtoa_r+0x90>
 8009b72:	601d      	str	r5, [r3, #0]
 8009b74:	e4f0      	b.n	8009558 <_dtoa_r+0x90>
 8009b76:	4657      	mov	r7, sl
 8009b78:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009b7c:	1e6b      	subs	r3, r5, #1
 8009b7e:	2a39      	cmp	r2, #57	; 0x39
 8009b80:	d106      	bne.n	8009b90 <_dtoa_r+0x6c8>
 8009b82:	9a06      	ldr	r2, [sp, #24]
 8009b84:	429a      	cmp	r2, r3
 8009b86:	d107      	bne.n	8009b98 <_dtoa_r+0x6d0>
 8009b88:	2330      	movs	r3, #48	; 0x30
 8009b8a:	7013      	strb	r3, [r2, #0]
 8009b8c:	4613      	mov	r3, r2
 8009b8e:	3701      	adds	r7, #1
 8009b90:	781a      	ldrb	r2, [r3, #0]
 8009b92:	3201      	adds	r2, #1
 8009b94:	701a      	strb	r2, [r3, #0]
 8009b96:	e791      	b.n	8009abc <_dtoa_r+0x5f4>
 8009b98:	461d      	mov	r5, r3
 8009b9a:	e7ed      	b.n	8009b78 <_dtoa_r+0x6b0>
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	4b99      	ldr	r3, [pc, #612]	; (8009e04 <_dtoa_r+0x93c>)
 8009ba0:	f7f6 fc9a 	bl	80004d8 <__aeabi_dmul>
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	4606      	mov	r6, r0
 8009baa:	460f      	mov	r7, r1
 8009bac:	f7f6 fefc 	bl	80009a8 <__aeabi_dcmpeq>
 8009bb0:	2800      	cmp	r0, #0
 8009bb2:	d09e      	beq.n	8009af2 <_dtoa_r+0x62a>
 8009bb4:	e7cf      	b.n	8009b56 <_dtoa_r+0x68e>
 8009bb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bb8:	2a00      	cmp	r2, #0
 8009bba:	f000 8088 	beq.w	8009cce <_dtoa_r+0x806>
 8009bbe:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009bc0:	2a01      	cmp	r2, #1
 8009bc2:	dc6d      	bgt.n	8009ca0 <_dtoa_r+0x7d8>
 8009bc4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009bc6:	2a00      	cmp	r2, #0
 8009bc8:	d066      	beq.n	8009c98 <_dtoa_r+0x7d0>
 8009bca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009bce:	464d      	mov	r5, r9
 8009bd0:	9e08      	ldr	r6, [sp, #32]
 8009bd2:	9a07      	ldr	r2, [sp, #28]
 8009bd4:	2101      	movs	r1, #1
 8009bd6:	441a      	add	r2, r3
 8009bd8:	4620      	mov	r0, r4
 8009bda:	4499      	add	r9, r3
 8009bdc:	9207      	str	r2, [sp, #28]
 8009bde:	f000 fbf4 	bl	800a3ca <__i2b>
 8009be2:	4607      	mov	r7, r0
 8009be4:	2d00      	cmp	r5, #0
 8009be6:	dd0b      	ble.n	8009c00 <_dtoa_r+0x738>
 8009be8:	9b07      	ldr	r3, [sp, #28]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	dd08      	ble.n	8009c00 <_dtoa_r+0x738>
 8009bee:	42ab      	cmp	r3, r5
 8009bf0:	bfa8      	it	ge
 8009bf2:	462b      	movge	r3, r5
 8009bf4:	9a07      	ldr	r2, [sp, #28]
 8009bf6:	eba9 0903 	sub.w	r9, r9, r3
 8009bfa:	1aed      	subs	r5, r5, r3
 8009bfc:	1ad3      	subs	r3, r2, r3
 8009bfe:	9307      	str	r3, [sp, #28]
 8009c00:	9b08      	ldr	r3, [sp, #32]
 8009c02:	b1eb      	cbz	r3, 8009c40 <_dtoa_r+0x778>
 8009c04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d065      	beq.n	8009cd6 <_dtoa_r+0x80e>
 8009c0a:	b18e      	cbz	r6, 8009c30 <_dtoa_r+0x768>
 8009c0c:	4639      	mov	r1, r7
 8009c0e:	4632      	mov	r2, r6
 8009c10:	4620      	mov	r0, r4
 8009c12:	f000 fc79 	bl	800a508 <__pow5mult>
 8009c16:	465a      	mov	r2, fp
 8009c18:	4601      	mov	r1, r0
 8009c1a:	4607      	mov	r7, r0
 8009c1c:	4620      	mov	r0, r4
 8009c1e:	f000 fbdd 	bl	800a3dc <__multiply>
 8009c22:	4659      	mov	r1, fp
 8009c24:	900a      	str	r0, [sp, #40]	; 0x28
 8009c26:	4620      	mov	r0, r4
 8009c28:	f000 fb2f 	bl	800a28a <_Bfree>
 8009c2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c2e:	469b      	mov	fp, r3
 8009c30:	9b08      	ldr	r3, [sp, #32]
 8009c32:	1b9a      	subs	r2, r3, r6
 8009c34:	d004      	beq.n	8009c40 <_dtoa_r+0x778>
 8009c36:	4659      	mov	r1, fp
 8009c38:	4620      	mov	r0, r4
 8009c3a:	f000 fc65 	bl	800a508 <__pow5mult>
 8009c3e:	4683      	mov	fp, r0
 8009c40:	2101      	movs	r1, #1
 8009c42:	4620      	mov	r0, r4
 8009c44:	f000 fbc1 	bl	800a3ca <__i2b>
 8009c48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c4a:	4606      	mov	r6, r0
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	f000 81c6 	beq.w	8009fde <_dtoa_r+0xb16>
 8009c52:	461a      	mov	r2, r3
 8009c54:	4601      	mov	r1, r0
 8009c56:	4620      	mov	r0, r4
 8009c58:	f000 fc56 	bl	800a508 <__pow5mult>
 8009c5c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009c5e:	4606      	mov	r6, r0
 8009c60:	2b01      	cmp	r3, #1
 8009c62:	dc3e      	bgt.n	8009ce2 <_dtoa_r+0x81a>
 8009c64:	9b02      	ldr	r3, [sp, #8]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d137      	bne.n	8009cda <_dtoa_r+0x812>
 8009c6a:	9b03      	ldr	r3, [sp, #12]
 8009c6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d134      	bne.n	8009cde <_dtoa_r+0x816>
 8009c74:	9b03      	ldr	r3, [sp, #12]
 8009c76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009c7a:	0d1b      	lsrs	r3, r3, #20
 8009c7c:	051b      	lsls	r3, r3, #20
 8009c7e:	b12b      	cbz	r3, 8009c8c <_dtoa_r+0x7c4>
 8009c80:	9b07      	ldr	r3, [sp, #28]
 8009c82:	f109 0901 	add.w	r9, r9, #1
 8009c86:	3301      	adds	r3, #1
 8009c88:	9307      	str	r3, [sp, #28]
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	9308      	str	r3, [sp, #32]
 8009c8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d128      	bne.n	8009ce6 <_dtoa_r+0x81e>
 8009c94:	2001      	movs	r0, #1
 8009c96:	e02e      	b.n	8009cf6 <_dtoa_r+0x82e>
 8009c98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009c9a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009c9e:	e796      	b.n	8009bce <_dtoa_r+0x706>
 8009ca0:	9b08      	ldr	r3, [sp, #32]
 8009ca2:	f108 36ff 	add.w	r6, r8, #4294967295
 8009ca6:	42b3      	cmp	r3, r6
 8009ca8:	bfb7      	itett	lt
 8009caa:	9b08      	ldrlt	r3, [sp, #32]
 8009cac:	1b9e      	subge	r6, r3, r6
 8009cae:	1af2      	sublt	r2, r6, r3
 8009cb0:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8009cb2:	bfbf      	itttt	lt
 8009cb4:	9608      	strlt	r6, [sp, #32]
 8009cb6:	189b      	addlt	r3, r3, r2
 8009cb8:	930c      	strlt	r3, [sp, #48]	; 0x30
 8009cba:	2600      	movlt	r6, #0
 8009cbc:	f1b8 0f00 	cmp.w	r8, #0
 8009cc0:	bfb9      	ittee	lt
 8009cc2:	eba9 0508 	sublt.w	r5, r9, r8
 8009cc6:	2300      	movlt	r3, #0
 8009cc8:	464d      	movge	r5, r9
 8009cca:	4643      	movge	r3, r8
 8009ccc:	e781      	b.n	8009bd2 <_dtoa_r+0x70a>
 8009cce:	9e08      	ldr	r6, [sp, #32]
 8009cd0:	464d      	mov	r5, r9
 8009cd2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009cd4:	e786      	b.n	8009be4 <_dtoa_r+0x71c>
 8009cd6:	9a08      	ldr	r2, [sp, #32]
 8009cd8:	e7ad      	b.n	8009c36 <_dtoa_r+0x76e>
 8009cda:	2300      	movs	r3, #0
 8009cdc:	e7d6      	b.n	8009c8c <_dtoa_r+0x7c4>
 8009cde:	9b02      	ldr	r3, [sp, #8]
 8009ce0:	e7d4      	b.n	8009c8c <_dtoa_r+0x7c4>
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	9308      	str	r3, [sp, #32]
 8009ce6:	6933      	ldr	r3, [r6, #16]
 8009ce8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009cec:	6918      	ldr	r0, [r3, #16]
 8009cee:	f000 fb1e 	bl	800a32e <__hi0bits>
 8009cf2:	f1c0 0020 	rsb	r0, r0, #32
 8009cf6:	9b07      	ldr	r3, [sp, #28]
 8009cf8:	4418      	add	r0, r3
 8009cfa:	f010 001f 	ands.w	r0, r0, #31
 8009cfe:	d047      	beq.n	8009d90 <_dtoa_r+0x8c8>
 8009d00:	f1c0 0320 	rsb	r3, r0, #32
 8009d04:	2b04      	cmp	r3, #4
 8009d06:	dd3b      	ble.n	8009d80 <_dtoa_r+0x8b8>
 8009d08:	9b07      	ldr	r3, [sp, #28]
 8009d0a:	f1c0 001c 	rsb	r0, r0, #28
 8009d0e:	4481      	add	r9, r0
 8009d10:	4405      	add	r5, r0
 8009d12:	4403      	add	r3, r0
 8009d14:	9307      	str	r3, [sp, #28]
 8009d16:	f1b9 0f00 	cmp.w	r9, #0
 8009d1a:	dd05      	ble.n	8009d28 <_dtoa_r+0x860>
 8009d1c:	4659      	mov	r1, fp
 8009d1e:	464a      	mov	r2, r9
 8009d20:	4620      	mov	r0, r4
 8009d22:	f000 fc3f 	bl	800a5a4 <__lshift>
 8009d26:	4683      	mov	fp, r0
 8009d28:	9b07      	ldr	r3, [sp, #28]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	dd05      	ble.n	8009d3a <_dtoa_r+0x872>
 8009d2e:	4631      	mov	r1, r6
 8009d30:	461a      	mov	r2, r3
 8009d32:	4620      	mov	r0, r4
 8009d34:	f000 fc36 	bl	800a5a4 <__lshift>
 8009d38:	4606      	mov	r6, r0
 8009d3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d3c:	b353      	cbz	r3, 8009d94 <_dtoa_r+0x8cc>
 8009d3e:	4631      	mov	r1, r6
 8009d40:	4658      	mov	r0, fp
 8009d42:	f000 fc83 	bl	800a64c <__mcmp>
 8009d46:	2800      	cmp	r0, #0
 8009d48:	da24      	bge.n	8009d94 <_dtoa_r+0x8cc>
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	4659      	mov	r1, fp
 8009d4e:	220a      	movs	r2, #10
 8009d50:	4620      	mov	r0, r4
 8009d52:	f000 fab1 	bl	800a2b8 <__multadd>
 8009d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d58:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009d5c:	4683      	mov	fp, r0
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	f000 8144 	beq.w	8009fec <_dtoa_r+0xb24>
 8009d64:	2300      	movs	r3, #0
 8009d66:	4639      	mov	r1, r7
 8009d68:	220a      	movs	r2, #10
 8009d6a:	4620      	mov	r0, r4
 8009d6c:	f000 faa4 	bl	800a2b8 <__multadd>
 8009d70:	9b04      	ldr	r3, [sp, #16]
 8009d72:	4607      	mov	r7, r0
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	dc4d      	bgt.n	8009e14 <_dtoa_r+0x94c>
 8009d78:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009d7a:	2b02      	cmp	r3, #2
 8009d7c:	dd4a      	ble.n	8009e14 <_dtoa_r+0x94c>
 8009d7e:	e011      	b.n	8009da4 <_dtoa_r+0x8dc>
 8009d80:	d0c9      	beq.n	8009d16 <_dtoa_r+0x84e>
 8009d82:	9a07      	ldr	r2, [sp, #28]
 8009d84:	331c      	adds	r3, #28
 8009d86:	441a      	add	r2, r3
 8009d88:	4499      	add	r9, r3
 8009d8a:	441d      	add	r5, r3
 8009d8c:	4613      	mov	r3, r2
 8009d8e:	e7c1      	b.n	8009d14 <_dtoa_r+0x84c>
 8009d90:	4603      	mov	r3, r0
 8009d92:	e7f6      	b.n	8009d82 <_dtoa_r+0x8ba>
 8009d94:	f1b8 0f00 	cmp.w	r8, #0
 8009d98:	dc36      	bgt.n	8009e08 <_dtoa_r+0x940>
 8009d9a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009d9c:	2b02      	cmp	r3, #2
 8009d9e:	dd33      	ble.n	8009e08 <_dtoa_r+0x940>
 8009da0:	f8cd 8010 	str.w	r8, [sp, #16]
 8009da4:	9b04      	ldr	r3, [sp, #16]
 8009da6:	b963      	cbnz	r3, 8009dc2 <_dtoa_r+0x8fa>
 8009da8:	4631      	mov	r1, r6
 8009daa:	2205      	movs	r2, #5
 8009dac:	4620      	mov	r0, r4
 8009dae:	f000 fa83 	bl	800a2b8 <__multadd>
 8009db2:	4601      	mov	r1, r0
 8009db4:	4606      	mov	r6, r0
 8009db6:	4658      	mov	r0, fp
 8009db8:	f000 fc48 	bl	800a64c <__mcmp>
 8009dbc:	2800      	cmp	r0, #0
 8009dbe:	f73f add3 	bgt.w	8009968 <_dtoa_r+0x4a0>
 8009dc2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009dc4:	9d06      	ldr	r5, [sp, #24]
 8009dc6:	ea6f 0a03 	mvn.w	sl, r3
 8009dca:	f04f 0900 	mov.w	r9, #0
 8009dce:	4631      	mov	r1, r6
 8009dd0:	4620      	mov	r0, r4
 8009dd2:	f000 fa5a 	bl	800a28a <_Bfree>
 8009dd6:	2f00      	cmp	r7, #0
 8009dd8:	f43f aebd 	beq.w	8009b56 <_dtoa_r+0x68e>
 8009ddc:	f1b9 0f00 	cmp.w	r9, #0
 8009de0:	d005      	beq.n	8009dee <_dtoa_r+0x926>
 8009de2:	45b9      	cmp	r9, r7
 8009de4:	d003      	beq.n	8009dee <_dtoa_r+0x926>
 8009de6:	4649      	mov	r1, r9
 8009de8:	4620      	mov	r0, r4
 8009dea:	f000 fa4e 	bl	800a28a <_Bfree>
 8009dee:	4639      	mov	r1, r7
 8009df0:	4620      	mov	r0, r4
 8009df2:	f000 fa4a 	bl	800a28a <_Bfree>
 8009df6:	e6ae      	b.n	8009b56 <_dtoa_r+0x68e>
 8009df8:	2600      	movs	r6, #0
 8009dfa:	4637      	mov	r7, r6
 8009dfc:	e7e1      	b.n	8009dc2 <_dtoa_r+0x8fa>
 8009dfe:	46ba      	mov	sl, r7
 8009e00:	4637      	mov	r7, r6
 8009e02:	e5b1      	b.n	8009968 <_dtoa_r+0x4a0>
 8009e04:	40240000 	.word	0x40240000
 8009e08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e0a:	f8cd 8010 	str.w	r8, [sp, #16]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	f000 80f3 	beq.w	8009ffa <_dtoa_r+0xb32>
 8009e14:	2d00      	cmp	r5, #0
 8009e16:	dd05      	ble.n	8009e24 <_dtoa_r+0x95c>
 8009e18:	4639      	mov	r1, r7
 8009e1a:	462a      	mov	r2, r5
 8009e1c:	4620      	mov	r0, r4
 8009e1e:	f000 fbc1 	bl	800a5a4 <__lshift>
 8009e22:	4607      	mov	r7, r0
 8009e24:	9b08      	ldr	r3, [sp, #32]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d04c      	beq.n	8009ec4 <_dtoa_r+0x9fc>
 8009e2a:	6879      	ldr	r1, [r7, #4]
 8009e2c:	4620      	mov	r0, r4
 8009e2e:	f000 f9f8 	bl	800a222 <_Balloc>
 8009e32:	4605      	mov	r5, r0
 8009e34:	693a      	ldr	r2, [r7, #16]
 8009e36:	f107 010c 	add.w	r1, r7, #12
 8009e3a:	3202      	adds	r2, #2
 8009e3c:	0092      	lsls	r2, r2, #2
 8009e3e:	300c      	adds	r0, #12
 8009e40:	f000 f9e4 	bl	800a20c <memcpy>
 8009e44:	2201      	movs	r2, #1
 8009e46:	4629      	mov	r1, r5
 8009e48:	4620      	mov	r0, r4
 8009e4a:	f000 fbab 	bl	800a5a4 <__lshift>
 8009e4e:	46b9      	mov	r9, r7
 8009e50:	4607      	mov	r7, r0
 8009e52:	9b06      	ldr	r3, [sp, #24]
 8009e54:	9307      	str	r3, [sp, #28]
 8009e56:	9b02      	ldr	r3, [sp, #8]
 8009e58:	f003 0301 	and.w	r3, r3, #1
 8009e5c:	9308      	str	r3, [sp, #32]
 8009e5e:	4631      	mov	r1, r6
 8009e60:	4658      	mov	r0, fp
 8009e62:	f7ff faa3 	bl	80093ac <quorem>
 8009e66:	4649      	mov	r1, r9
 8009e68:	4605      	mov	r5, r0
 8009e6a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009e6e:	4658      	mov	r0, fp
 8009e70:	f000 fbec 	bl	800a64c <__mcmp>
 8009e74:	463a      	mov	r2, r7
 8009e76:	9002      	str	r0, [sp, #8]
 8009e78:	4631      	mov	r1, r6
 8009e7a:	4620      	mov	r0, r4
 8009e7c:	f000 fc00 	bl	800a680 <__mdiff>
 8009e80:	68c3      	ldr	r3, [r0, #12]
 8009e82:	4602      	mov	r2, r0
 8009e84:	bb03      	cbnz	r3, 8009ec8 <_dtoa_r+0xa00>
 8009e86:	4601      	mov	r1, r0
 8009e88:	9009      	str	r0, [sp, #36]	; 0x24
 8009e8a:	4658      	mov	r0, fp
 8009e8c:	f000 fbde 	bl	800a64c <__mcmp>
 8009e90:	4603      	mov	r3, r0
 8009e92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e94:	4611      	mov	r1, r2
 8009e96:	4620      	mov	r0, r4
 8009e98:	9309      	str	r3, [sp, #36]	; 0x24
 8009e9a:	f000 f9f6 	bl	800a28a <_Bfree>
 8009e9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ea0:	b9a3      	cbnz	r3, 8009ecc <_dtoa_r+0xa04>
 8009ea2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009ea4:	b992      	cbnz	r2, 8009ecc <_dtoa_r+0xa04>
 8009ea6:	9a08      	ldr	r2, [sp, #32]
 8009ea8:	b982      	cbnz	r2, 8009ecc <_dtoa_r+0xa04>
 8009eaa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009eae:	d029      	beq.n	8009f04 <_dtoa_r+0xa3c>
 8009eb0:	9b02      	ldr	r3, [sp, #8]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	dd01      	ble.n	8009eba <_dtoa_r+0x9f2>
 8009eb6:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009eba:	9b07      	ldr	r3, [sp, #28]
 8009ebc:	1c5d      	adds	r5, r3, #1
 8009ebe:	f883 8000 	strb.w	r8, [r3]
 8009ec2:	e784      	b.n	8009dce <_dtoa_r+0x906>
 8009ec4:	4638      	mov	r0, r7
 8009ec6:	e7c2      	b.n	8009e4e <_dtoa_r+0x986>
 8009ec8:	2301      	movs	r3, #1
 8009eca:	e7e3      	b.n	8009e94 <_dtoa_r+0x9cc>
 8009ecc:	9a02      	ldr	r2, [sp, #8]
 8009ece:	2a00      	cmp	r2, #0
 8009ed0:	db04      	blt.n	8009edc <_dtoa_r+0xa14>
 8009ed2:	d123      	bne.n	8009f1c <_dtoa_r+0xa54>
 8009ed4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009ed6:	bb0a      	cbnz	r2, 8009f1c <_dtoa_r+0xa54>
 8009ed8:	9a08      	ldr	r2, [sp, #32]
 8009eda:	b9fa      	cbnz	r2, 8009f1c <_dtoa_r+0xa54>
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	ddec      	ble.n	8009eba <_dtoa_r+0x9f2>
 8009ee0:	4659      	mov	r1, fp
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	4620      	mov	r0, r4
 8009ee6:	f000 fb5d 	bl	800a5a4 <__lshift>
 8009eea:	4631      	mov	r1, r6
 8009eec:	4683      	mov	fp, r0
 8009eee:	f000 fbad 	bl	800a64c <__mcmp>
 8009ef2:	2800      	cmp	r0, #0
 8009ef4:	dc03      	bgt.n	8009efe <_dtoa_r+0xa36>
 8009ef6:	d1e0      	bne.n	8009eba <_dtoa_r+0x9f2>
 8009ef8:	f018 0f01 	tst.w	r8, #1
 8009efc:	d0dd      	beq.n	8009eba <_dtoa_r+0x9f2>
 8009efe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009f02:	d1d8      	bne.n	8009eb6 <_dtoa_r+0x9ee>
 8009f04:	9b07      	ldr	r3, [sp, #28]
 8009f06:	9a07      	ldr	r2, [sp, #28]
 8009f08:	1c5d      	adds	r5, r3, #1
 8009f0a:	2339      	movs	r3, #57	; 0x39
 8009f0c:	7013      	strb	r3, [r2, #0]
 8009f0e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009f12:	1e6a      	subs	r2, r5, #1
 8009f14:	2b39      	cmp	r3, #57	; 0x39
 8009f16:	d04d      	beq.n	8009fb4 <_dtoa_r+0xaec>
 8009f18:	3301      	adds	r3, #1
 8009f1a:	e052      	b.n	8009fc2 <_dtoa_r+0xafa>
 8009f1c:	9a07      	ldr	r2, [sp, #28]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	f102 0501 	add.w	r5, r2, #1
 8009f24:	dd06      	ble.n	8009f34 <_dtoa_r+0xa6c>
 8009f26:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009f2a:	d0eb      	beq.n	8009f04 <_dtoa_r+0xa3c>
 8009f2c:	f108 0801 	add.w	r8, r8, #1
 8009f30:	9b07      	ldr	r3, [sp, #28]
 8009f32:	e7c4      	b.n	8009ebe <_dtoa_r+0x9f6>
 8009f34:	9b06      	ldr	r3, [sp, #24]
 8009f36:	9a04      	ldr	r2, [sp, #16]
 8009f38:	1aeb      	subs	r3, r5, r3
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009f40:	d021      	beq.n	8009f86 <_dtoa_r+0xabe>
 8009f42:	4659      	mov	r1, fp
 8009f44:	2300      	movs	r3, #0
 8009f46:	220a      	movs	r2, #10
 8009f48:	4620      	mov	r0, r4
 8009f4a:	f000 f9b5 	bl	800a2b8 <__multadd>
 8009f4e:	45b9      	cmp	r9, r7
 8009f50:	4683      	mov	fp, r0
 8009f52:	f04f 0300 	mov.w	r3, #0
 8009f56:	f04f 020a 	mov.w	r2, #10
 8009f5a:	4649      	mov	r1, r9
 8009f5c:	4620      	mov	r0, r4
 8009f5e:	d105      	bne.n	8009f6c <_dtoa_r+0xaa4>
 8009f60:	f000 f9aa 	bl	800a2b8 <__multadd>
 8009f64:	4681      	mov	r9, r0
 8009f66:	4607      	mov	r7, r0
 8009f68:	9507      	str	r5, [sp, #28]
 8009f6a:	e778      	b.n	8009e5e <_dtoa_r+0x996>
 8009f6c:	f000 f9a4 	bl	800a2b8 <__multadd>
 8009f70:	4639      	mov	r1, r7
 8009f72:	4681      	mov	r9, r0
 8009f74:	2300      	movs	r3, #0
 8009f76:	220a      	movs	r2, #10
 8009f78:	4620      	mov	r0, r4
 8009f7a:	f000 f99d 	bl	800a2b8 <__multadd>
 8009f7e:	4607      	mov	r7, r0
 8009f80:	e7f2      	b.n	8009f68 <_dtoa_r+0xaa0>
 8009f82:	f04f 0900 	mov.w	r9, #0
 8009f86:	4659      	mov	r1, fp
 8009f88:	2201      	movs	r2, #1
 8009f8a:	4620      	mov	r0, r4
 8009f8c:	f000 fb0a 	bl	800a5a4 <__lshift>
 8009f90:	4631      	mov	r1, r6
 8009f92:	4683      	mov	fp, r0
 8009f94:	f000 fb5a 	bl	800a64c <__mcmp>
 8009f98:	2800      	cmp	r0, #0
 8009f9a:	dcb8      	bgt.n	8009f0e <_dtoa_r+0xa46>
 8009f9c:	d102      	bne.n	8009fa4 <_dtoa_r+0xadc>
 8009f9e:	f018 0f01 	tst.w	r8, #1
 8009fa2:	d1b4      	bne.n	8009f0e <_dtoa_r+0xa46>
 8009fa4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009fa8:	1e6a      	subs	r2, r5, #1
 8009faa:	2b30      	cmp	r3, #48	; 0x30
 8009fac:	f47f af0f 	bne.w	8009dce <_dtoa_r+0x906>
 8009fb0:	4615      	mov	r5, r2
 8009fb2:	e7f7      	b.n	8009fa4 <_dtoa_r+0xadc>
 8009fb4:	9b06      	ldr	r3, [sp, #24]
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d105      	bne.n	8009fc6 <_dtoa_r+0xafe>
 8009fba:	2331      	movs	r3, #49	; 0x31
 8009fbc:	9a06      	ldr	r2, [sp, #24]
 8009fbe:	f10a 0a01 	add.w	sl, sl, #1
 8009fc2:	7013      	strb	r3, [r2, #0]
 8009fc4:	e703      	b.n	8009dce <_dtoa_r+0x906>
 8009fc6:	4615      	mov	r5, r2
 8009fc8:	e7a1      	b.n	8009f0e <_dtoa_r+0xa46>
 8009fca:	4b17      	ldr	r3, [pc, #92]	; (800a028 <_dtoa_r+0xb60>)
 8009fcc:	f7ff bae1 	b.w	8009592 <_dtoa_r+0xca>
 8009fd0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	f47f aabb 	bne.w	800954e <_dtoa_r+0x86>
 8009fd8:	4b14      	ldr	r3, [pc, #80]	; (800a02c <_dtoa_r+0xb64>)
 8009fda:	f7ff bada 	b.w	8009592 <_dtoa_r+0xca>
 8009fde:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009fe0:	2b01      	cmp	r3, #1
 8009fe2:	f77f ae3f 	ble.w	8009c64 <_dtoa_r+0x79c>
 8009fe6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009fe8:	9308      	str	r3, [sp, #32]
 8009fea:	e653      	b.n	8009c94 <_dtoa_r+0x7cc>
 8009fec:	9b04      	ldr	r3, [sp, #16]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	dc03      	bgt.n	8009ffa <_dtoa_r+0xb32>
 8009ff2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009ff4:	2b02      	cmp	r3, #2
 8009ff6:	f73f aed5 	bgt.w	8009da4 <_dtoa_r+0x8dc>
 8009ffa:	9d06      	ldr	r5, [sp, #24]
 8009ffc:	4631      	mov	r1, r6
 8009ffe:	4658      	mov	r0, fp
 800a000:	f7ff f9d4 	bl	80093ac <quorem>
 800a004:	9b06      	ldr	r3, [sp, #24]
 800a006:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a00a:	f805 8b01 	strb.w	r8, [r5], #1
 800a00e:	9a04      	ldr	r2, [sp, #16]
 800a010:	1aeb      	subs	r3, r5, r3
 800a012:	429a      	cmp	r2, r3
 800a014:	ddb5      	ble.n	8009f82 <_dtoa_r+0xaba>
 800a016:	4659      	mov	r1, fp
 800a018:	2300      	movs	r3, #0
 800a01a:	220a      	movs	r2, #10
 800a01c:	4620      	mov	r0, r4
 800a01e:	f000 f94b 	bl	800a2b8 <__multadd>
 800a022:	4683      	mov	fp, r0
 800a024:	e7ea      	b.n	8009ffc <_dtoa_r+0xb34>
 800a026:	bf00      	nop
 800a028:	0800b8e0 	.word	0x0800b8e0
 800a02c:	0800b904 	.word	0x0800b904

0800a030 <std>:
 800a030:	2300      	movs	r3, #0
 800a032:	b510      	push	{r4, lr}
 800a034:	4604      	mov	r4, r0
 800a036:	e9c0 3300 	strd	r3, r3, [r0]
 800a03a:	6083      	str	r3, [r0, #8]
 800a03c:	8181      	strh	r1, [r0, #12]
 800a03e:	6643      	str	r3, [r0, #100]	; 0x64
 800a040:	81c2      	strh	r2, [r0, #14]
 800a042:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a046:	6183      	str	r3, [r0, #24]
 800a048:	4619      	mov	r1, r3
 800a04a:	2208      	movs	r2, #8
 800a04c:	305c      	adds	r0, #92	; 0x5c
 800a04e:	f7fe fd3d 	bl	8008acc <memset>
 800a052:	4b05      	ldr	r3, [pc, #20]	; (800a068 <std+0x38>)
 800a054:	6224      	str	r4, [r4, #32]
 800a056:	6263      	str	r3, [r4, #36]	; 0x24
 800a058:	4b04      	ldr	r3, [pc, #16]	; (800a06c <std+0x3c>)
 800a05a:	62a3      	str	r3, [r4, #40]	; 0x28
 800a05c:	4b04      	ldr	r3, [pc, #16]	; (800a070 <std+0x40>)
 800a05e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a060:	4b04      	ldr	r3, [pc, #16]	; (800a074 <std+0x44>)
 800a062:	6323      	str	r3, [r4, #48]	; 0x30
 800a064:	bd10      	pop	{r4, pc}
 800a066:	bf00      	nop
 800a068:	0800abe1 	.word	0x0800abe1
 800a06c:	0800ac03 	.word	0x0800ac03
 800a070:	0800ac3b 	.word	0x0800ac3b
 800a074:	0800ac5f 	.word	0x0800ac5f

0800a078 <_cleanup_r>:
 800a078:	4901      	ldr	r1, [pc, #4]	; (800a080 <_cleanup_r+0x8>)
 800a07a:	f000 b885 	b.w	800a188 <_fwalk_reent>
 800a07e:	bf00      	nop
 800a080:	0800af39 	.word	0x0800af39

0800a084 <__sfmoreglue>:
 800a084:	b570      	push	{r4, r5, r6, lr}
 800a086:	2568      	movs	r5, #104	; 0x68
 800a088:	1e4a      	subs	r2, r1, #1
 800a08a:	4355      	muls	r5, r2
 800a08c:	460e      	mov	r6, r1
 800a08e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a092:	f000 fbfd 	bl	800a890 <_malloc_r>
 800a096:	4604      	mov	r4, r0
 800a098:	b140      	cbz	r0, 800a0ac <__sfmoreglue+0x28>
 800a09a:	2100      	movs	r1, #0
 800a09c:	e9c0 1600 	strd	r1, r6, [r0]
 800a0a0:	300c      	adds	r0, #12
 800a0a2:	60a0      	str	r0, [r4, #8]
 800a0a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a0a8:	f7fe fd10 	bl	8008acc <memset>
 800a0ac:	4620      	mov	r0, r4
 800a0ae:	bd70      	pop	{r4, r5, r6, pc}

0800a0b0 <__sinit>:
 800a0b0:	6983      	ldr	r3, [r0, #24]
 800a0b2:	b510      	push	{r4, lr}
 800a0b4:	4604      	mov	r4, r0
 800a0b6:	bb33      	cbnz	r3, 800a106 <__sinit+0x56>
 800a0b8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800a0bc:	6503      	str	r3, [r0, #80]	; 0x50
 800a0be:	4b12      	ldr	r3, [pc, #72]	; (800a108 <__sinit+0x58>)
 800a0c0:	4a12      	ldr	r2, [pc, #72]	; (800a10c <__sinit+0x5c>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	6282      	str	r2, [r0, #40]	; 0x28
 800a0c6:	4298      	cmp	r0, r3
 800a0c8:	bf04      	itt	eq
 800a0ca:	2301      	moveq	r3, #1
 800a0cc:	6183      	streq	r3, [r0, #24]
 800a0ce:	f000 f81f 	bl	800a110 <__sfp>
 800a0d2:	6060      	str	r0, [r4, #4]
 800a0d4:	4620      	mov	r0, r4
 800a0d6:	f000 f81b 	bl	800a110 <__sfp>
 800a0da:	60a0      	str	r0, [r4, #8]
 800a0dc:	4620      	mov	r0, r4
 800a0de:	f000 f817 	bl	800a110 <__sfp>
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	60e0      	str	r0, [r4, #12]
 800a0e6:	2104      	movs	r1, #4
 800a0e8:	6860      	ldr	r0, [r4, #4]
 800a0ea:	f7ff ffa1 	bl	800a030 <std>
 800a0ee:	2201      	movs	r2, #1
 800a0f0:	2109      	movs	r1, #9
 800a0f2:	68a0      	ldr	r0, [r4, #8]
 800a0f4:	f7ff ff9c 	bl	800a030 <std>
 800a0f8:	2202      	movs	r2, #2
 800a0fa:	2112      	movs	r1, #18
 800a0fc:	68e0      	ldr	r0, [r4, #12]
 800a0fe:	f7ff ff97 	bl	800a030 <std>
 800a102:	2301      	movs	r3, #1
 800a104:	61a3      	str	r3, [r4, #24]
 800a106:	bd10      	pop	{r4, pc}
 800a108:	0800b8cc 	.word	0x0800b8cc
 800a10c:	0800a079 	.word	0x0800a079

0800a110 <__sfp>:
 800a110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a112:	4b1b      	ldr	r3, [pc, #108]	; (800a180 <__sfp+0x70>)
 800a114:	4607      	mov	r7, r0
 800a116:	681e      	ldr	r6, [r3, #0]
 800a118:	69b3      	ldr	r3, [r6, #24]
 800a11a:	b913      	cbnz	r3, 800a122 <__sfp+0x12>
 800a11c:	4630      	mov	r0, r6
 800a11e:	f7ff ffc7 	bl	800a0b0 <__sinit>
 800a122:	3648      	adds	r6, #72	; 0x48
 800a124:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a128:	3b01      	subs	r3, #1
 800a12a:	d503      	bpl.n	800a134 <__sfp+0x24>
 800a12c:	6833      	ldr	r3, [r6, #0]
 800a12e:	b133      	cbz	r3, 800a13e <__sfp+0x2e>
 800a130:	6836      	ldr	r6, [r6, #0]
 800a132:	e7f7      	b.n	800a124 <__sfp+0x14>
 800a134:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a138:	b16d      	cbz	r5, 800a156 <__sfp+0x46>
 800a13a:	3468      	adds	r4, #104	; 0x68
 800a13c:	e7f4      	b.n	800a128 <__sfp+0x18>
 800a13e:	2104      	movs	r1, #4
 800a140:	4638      	mov	r0, r7
 800a142:	f7ff ff9f 	bl	800a084 <__sfmoreglue>
 800a146:	6030      	str	r0, [r6, #0]
 800a148:	2800      	cmp	r0, #0
 800a14a:	d1f1      	bne.n	800a130 <__sfp+0x20>
 800a14c:	230c      	movs	r3, #12
 800a14e:	4604      	mov	r4, r0
 800a150:	603b      	str	r3, [r7, #0]
 800a152:	4620      	mov	r0, r4
 800a154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a156:	4b0b      	ldr	r3, [pc, #44]	; (800a184 <__sfp+0x74>)
 800a158:	6665      	str	r5, [r4, #100]	; 0x64
 800a15a:	e9c4 5500 	strd	r5, r5, [r4]
 800a15e:	60a5      	str	r5, [r4, #8]
 800a160:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a164:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800a168:	2208      	movs	r2, #8
 800a16a:	4629      	mov	r1, r5
 800a16c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a170:	f7fe fcac 	bl	8008acc <memset>
 800a174:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a178:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a17c:	e7e9      	b.n	800a152 <__sfp+0x42>
 800a17e:	bf00      	nop
 800a180:	0800b8cc 	.word	0x0800b8cc
 800a184:	ffff0001 	.word	0xffff0001

0800a188 <_fwalk_reent>:
 800a188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a18c:	4680      	mov	r8, r0
 800a18e:	4689      	mov	r9, r1
 800a190:	2600      	movs	r6, #0
 800a192:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a196:	b914      	cbnz	r4, 800a19e <_fwalk_reent+0x16>
 800a198:	4630      	mov	r0, r6
 800a19a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a19e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800a1a2:	3f01      	subs	r7, #1
 800a1a4:	d501      	bpl.n	800a1aa <_fwalk_reent+0x22>
 800a1a6:	6824      	ldr	r4, [r4, #0]
 800a1a8:	e7f5      	b.n	800a196 <_fwalk_reent+0xe>
 800a1aa:	89ab      	ldrh	r3, [r5, #12]
 800a1ac:	2b01      	cmp	r3, #1
 800a1ae:	d907      	bls.n	800a1c0 <_fwalk_reent+0x38>
 800a1b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a1b4:	3301      	adds	r3, #1
 800a1b6:	d003      	beq.n	800a1c0 <_fwalk_reent+0x38>
 800a1b8:	4629      	mov	r1, r5
 800a1ba:	4640      	mov	r0, r8
 800a1bc:	47c8      	blx	r9
 800a1be:	4306      	orrs	r6, r0
 800a1c0:	3568      	adds	r5, #104	; 0x68
 800a1c2:	e7ee      	b.n	800a1a2 <_fwalk_reent+0x1a>

0800a1c4 <_localeconv_r>:
 800a1c4:	4b04      	ldr	r3, [pc, #16]	; (800a1d8 <_localeconv_r+0x14>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	6a18      	ldr	r0, [r3, #32]
 800a1ca:	4b04      	ldr	r3, [pc, #16]	; (800a1dc <_localeconv_r+0x18>)
 800a1cc:	2800      	cmp	r0, #0
 800a1ce:	bf08      	it	eq
 800a1d0:	4618      	moveq	r0, r3
 800a1d2:	30f0      	adds	r0, #240	; 0xf0
 800a1d4:	4770      	bx	lr
 800a1d6:	bf00      	nop
 800a1d8:	2000017c 	.word	0x2000017c
 800a1dc:	200001e0 	.word	0x200001e0

0800a1e0 <malloc>:
 800a1e0:	4b02      	ldr	r3, [pc, #8]	; (800a1ec <malloc+0xc>)
 800a1e2:	4601      	mov	r1, r0
 800a1e4:	6818      	ldr	r0, [r3, #0]
 800a1e6:	f000 bb53 	b.w	800a890 <_malloc_r>
 800a1ea:	bf00      	nop
 800a1ec:	2000017c 	.word	0x2000017c

0800a1f0 <memchr>:
 800a1f0:	b510      	push	{r4, lr}
 800a1f2:	b2c9      	uxtb	r1, r1
 800a1f4:	4402      	add	r2, r0
 800a1f6:	4290      	cmp	r0, r2
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	d101      	bne.n	800a200 <memchr+0x10>
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	e003      	b.n	800a208 <memchr+0x18>
 800a200:	781c      	ldrb	r4, [r3, #0]
 800a202:	3001      	adds	r0, #1
 800a204:	428c      	cmp	r4, r1
 800a206:	d1f6      	bne.n	800a1f6 <memchr+0x6>
 800a208:	4618      	mov	r0, r3
 800a20a:	bd10      	pop	{r4, pc}

0800a20c <memcpy>:
 800a20c:	b510      	push	{r4, lr}
 800a20e:	1e43      	subs	r3, r0, #1
 800a210:	440a      	add	r2, r1
 800a212:	4291      	cmp	r1, r2
 800a214:	d100      	bne.n	800a218 <memcpy+0xc>
 800a216:	bd10      	pop	{r4, pc}
 800a218:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a21c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a220:	e7f7      	b.n	800a212 <memcpy+0x6>

0800a222 <_Balloc>:
 800a222:	b570      	push	{r4, r5, r6, lr}
 800a224:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a226:	4604      	mov	r4, r0
 800a228:	460e      	mov	r6, r1
 800a22a:	b93d      	cbnz	r5, 800a23c <_Balloc+0x1a>
 800a22c:	2010      	movs	r0, #16
 800a22e:	f7ff ffd7 	bl	800a1e0 <malloc>
 800a232:	6260      	str	r0, [r4, #36]	; 0x24
 800a234:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a238:	6005      	str	r5, [r0, #0]
 800a23a:	60c5      	str	r5, [r0, #12]
 800a23c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a23e:	68eb      	ldr	r3, [r5, #12]
 800a240:	b183      	cbz	r3, 800a264 <_Balloc+0x42>
 800a242:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a244:	68db      	ldr	r3, [r3, #12]
 800a246:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a24a:	b9b8      	cbnz	r0, 800a27c <_Balloc+0x5a>
 800a24c:	2101      	movs	r1, #1
 800a24e:	fa01 f506 	lsl.w	r5, r1, r6
 800a252:	1d6a      	adds	r2, r5, #5
 800a254:	0092      	lsls	r2, r2, #2
 800a256:	4620      	mov	r0, r4
 800a258:	f000 fabf 	bl	800a7da <_calloc_r>
 800a25c:	b160      	cbz	r0, 800a278 <_Balloc+0x56>
 800a25e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a262:	e00e      	b.n	800a282 <_Balloc+0x60>
 800a264:	2221      	movs	r2, #33	; 0x21
 800a266:	2104      	movs	r1, #4
 800a268:	4620      	mov	r0, r4
 800a26a:	f000 fab6 	bl	800a7da <_calloc_r>
 800a26e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a270:	60e8      	str	r0, [r5, #12]
 800a272:	68db      	ldr	r3, [r3, #12]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d1e4      	bne.n	800a242 <_Balloc+0x20>
 800a278:	2000      	movs	r0, #0
 800a27a:	bd70      	pop	{r4, r5, r6, pc}
 800a27c:	6802      	ldr	r2, [r0, #0]
 800a27e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a282:	2300      	movs	r3, #0
 800a284:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a288:	e7f7      	b.n	800a27a <_Balloc+0x58>

0800a28a <_Bfree>:
 800a28a:	b570      	push	{r4, r5, r6, lr}
 800a28c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a28e:	4606      	mov	r6, r0
 800a290:	460d      	mov	r5, r1
 800a292:	b93c      	cbnz	r4, 800a2a4 <_Bfree+0x1a>
 800a294:	2010      	movs	r0, #16
 800a296:	f7ff ffa3 	bl	800a1e0 <malloc>
 800a29a:	6270      	str	r0, [r6, #36]	; 0x24
 800a29c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a2a0:	6004      	str	r4, [r0, #0]
 800a2a2:	60c4      	str	r4, [r0, #12]
 800a2a4:	b13d      	cbz	r5, 800a2b6 <_Bfree+0x2c>
 800a2a6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a2a8:	686a      	ldr	r2, [r5, #4]
 800a2aa:	68db      	ldr	r3, [r3, #12]
 800a2ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a2b0:	6029      	str	r1, [r5, #0]
 800a2b2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a2b6:	bd70      	pop	{r4, r5, r6, pc}

0800a2b8 <__multadd>:
 800a2b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2bc:	461f      	mov	r7, r3
 800a2be:	4606      	mov	r6, r0
 800a2c0:	460c      	mov	r4, r1
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	690d      	ldr	r5, [r1, #16]
 800a2c6:	f101 0c14 	add.w	ip, r1, #20
 800a2ca:	f8dc 0000 	ldr.w	r0, [ip]
 800a2ce:	3301      	adds	r3, #1
 800a2d0:	b281      	uxth	r1, r0
 800a2d2:	fb02 7101 	mla	r1, r2, r1, r7
 800a2d6:	0c00      	lsrs	r0, r0, #16
 800a2d8:	0c0f      	lsrs	r7, r1, #16
 800a2da:	fb02 7000 	mla	r0, r2, r0, r7
 800a2de:	b289      	uxth	r1, r1
 800a2e0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a2e4:	429d      	cmp	r5, r3
 800a2e6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a2ea:	f84c 1b04 	str.w	r1, [ip], #4
 800a2ee:	dcec      	bgt.n	800a2ca <__multadd+0x12>
 800a2f0:	b1d7      	cbz	r7, 800a328 <__multadd+0x70>
 800a2f2:	68a3      	ldr	r3, [r4, #8]
 800a2f4:	42ab      	cmp	r3, r5
 800a2f6:	dc12      	bgt.n	800a31e <__multadd+0x66>
 800a2f8:	6861      	ldr	r1, [r4, #4]
 800a2fa:	4630      	mov	r0, r6
 800a2fc:	3101      	adds	r1, #1
 800a2fe:	f7ff ff90 	bl	800a222 <_Balloc>
 800a302:	4680      	mov	r8, r0
 800a304:	6922      	ldr	r2, [r4, #16]
 800a306:	f104 010c 	add.w	r1, r4, #12
 800a30a:	3202      	adds	r2, #2
 800a30c:	0092      	lsls	r2, r2, #2
 800a30e:	300c      	adds	r0, #12
 800a310:	f7ff ff7c 	bl	800a20c <memcpy>
 800a314:	4621      	mov	r1, r4
 800a316:	4630      	mov	r0, r6
 800a318:	f7ff ffb7 	bl	800a28a <_Bfree>
 800a31c:	4644      	mov	r4, r8
 800a31e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a322:	3501      	adds	r5, #1
 800a324:	615f      	str	r7, [r3, #20]
 800a326:	6125      	str	r5, [r4, #16]
 800a328:	4620      	mov	r0, r4
 800a32a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a32e <__hi0bits>:
 800a32e:	0c02      	lsrs	r2, r0, #16
 800a330:	0412      	lsls	r2, r2, #16
 800a332:	4603      	mov	r3, r0
 800a334:	b9b2      	cbnz	r2, 800a364 <__hi0bits+0x36>
 800a336:	0403      	lsls	r3, r0, #16
 800a338:	2010      	movs	r0, #16
 800a33a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a33e:	bf04      	itt	eq
 800a340:	021b      	lsleq	r3, r3, #8
 800a342:	3008      	addeq	r0, #8
 800a344:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a348:	bf04      	itt	eq
 800a34a:	011b      	lsleq	r3, r3, #4
 800a34c:	3004      	addeq	r0, #4
 800a34e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a352:	bf04      	itt	eq
 800a354:	009b      	lsleq	r3, r3, #2
 800a356:	3002      	addeq	r0, #2
 800a358:	2b00      	cmp	r3, #0
 800a35a:	db06      	blt.n	800a36a <__hi0bits+0x3c>
 800a35c:	005b      	lsls	r3, r3, #1
 800a35e:	d503      	bpl.n	800a368 <__hi0bits+0x3a>
 800a360:	3001      	adds	r0, #1
 800a362:	4770      	bx	lr
 800a364:	2000      	movs	r0, #0
 800a366:	e7e8      	b.n	800a33a <__hi0bits+0xc>
 800a368:	2020      	movs	r0, #32
 800a36a:	4770      	bx	lr

0800a36c <__lo0bits>:
 800a36c:	6803      	ldr	r3, [r0, #0]
 800a36e:	4601      	mov	r1, r0
 800a370:	f013 0207 	ands.w	r2, r3, #7
 800a374:	d00b      	beq.n	800a38e <__lo0bits+0x22>
 800a376:	07da      	lsls	r2, r3, #31
 800a378:	d423      	bmi.n	800a3c2 <__lo0bits+0x56>
 800a37a:	0798      	lsls	r0, r3, #30
 800a37c:	bf49      	itett	mi
 800a37e:	085b      	lsrmi	r3, r3, #1
 800a380:	089b      	lsrpl	r3, r3, #2
 800a382:	2001      	movmi	r0, #1
 800a384:	600b      	strmi	r3, [r1, #0]
 800a386:	bf5c      	itt	pl
 800a388:	600b      	strpl	r3, [r1, #0]
 800a38a:	2002      	movpl	r0, #2
 800a38c:	4770      	bx	lr
 800a38e:	b298      	uxth	r0, r3
 800a390:	b9a8      	cbnz	r0, 800a3be <__lo0bits+0x52>
 800a392:	2010      	movs	r0, #16
 800a394:	0c1b      	lsrs	r3, r3, #16
 800a396:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a39a:	bf04      	itt	eq
 800a39c:	0a1b      	lsreq	r3, r3, #8
 800a39e:	3008      	addeq	r0, #8
 800a3a0:	071a      	lsls	r2, r3, #28
 800a3a2:	bf04      	itt	eq
 800a3a4:	091b      	lsreq	r3, r3, #4
 800a3a6:	3004      	addeq	r0, #4
 800a3a8:	079a      	lsls	r2, r3, #30
 800a3aa:	bf04      	itt	eq
 800a3ac:	089b      	lsreq	r3, r3, #2
 800a3ae:	3002      	addeq	r0, #2
 800a3b0:	07da      	lsls	r2, r3, #31
 800a3b2:	d402      	bmi.n	800a3ba <__lo0bits+0x4e>
 800a3b4:	085b      	lsrs	r3, r3, #1
 800a3b6:	d006      	beq.n	800a3c6 <__lo0bits+0x5a>
 800a3b8:	3001      	adds	r0, #1
 800a3ba:	600b      	str	r3, [r1, #0]
 800a3bc:	4770      	bx	lr
 800a3be:	4610      	mov	r0, r2
 800a3c0:	e7e9      	b.n	800a396 <__lo0bits+0x2a>
 800a3c2:	2000      	movs	r0, #0
 800a3c4:	4770      	bx	lr
 800a3c6:	2020      	movs	r0, #32
 800a3c8:	4770      	bx	lr

0800a3ca <__i2b>:
 800a3ca:	b510      	push	{r4, lr}
 800a3cc:	460c      	mov	r4, r1
 800a3ce:	2101      	movs	r1, #1
 800a3d0:	f7ff ff27 	bl	800a222 <_Balloc>
 800a3d4:	2201      	movs	r2, #1
 800a3d6:	6144      	str	r4, [r0, #20]
 800a3d8:	6102      	str	r2, [r0, #16]
 800a3da:	bd10      	pop	{r4, pc}

0800a3dc <__multiply>:
 800a3dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3e0:	4614      	mov	r4, r2
 800a3e2:	690a      	ldr	r2, [r1, #16]
 800a3e4:	6923      	ldr	r3, [r4, #16]
 800a3e6:	4688      	mov	r8, r1
 800a3e8:	429a      	cmp	r2, r3
 800a3ea:	bfbe      	ittt	lt
 800a3ec:	460b      	movlt	r3, r1
 800a3ee:	46a0      	movlt	r8, r4
 800a3f0:	461c      	movlt	r4, r3
 800a3f2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a3f6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a3fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a3fe:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a402:	eb07 0609 	add.w	r6, r7, r9
 800a406:	42b3      	cmp	r3, r6
 800a408:	bfb8      	it	lt
 800a40a:	3101      	addlt	r1, #1
 800a40c:	f7ff ff09 	bl	800a222 <_Balloc>
 800a410:	f100 0514 	add.w	r5, r0, #20
 800a414:	462b      	mov	r3, r5
 800a416:	2200      	movs	r2, #0
 800a418:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a41c:	4573      	cmp	r3, lr
 800a41e:	d316      	bcc.n	800a44e <__multiply+0x72>
 800a420:	f104 0214 	add.w	r2, r4, #20
 800a424:	f108 0114 	add.w	r1, r8, #20
 800a428:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a42c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a430:	9300      	str	r3, [sp, #0]
 800a432:	9b00      	ldr	r3, [sp, #0]
 800a434:	9201      	str	r2, [sp, #4]
 800a436:	4293      	cmp	r3, r2
 800a438:	d80c      	bhi.n	800a454 <__multiply+0x78>
 800a43a:	2e00      	cmp	r6, #0
 800a43c:	dd03      	ble.n	800a446 <__multiply+0x6a>
 800a43e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a442:	2b00      	cmp	r3, #0
 800a444:	d05d      	beq.n	800a502 <__multiply+0x126>
 800a446:	6106      	str	r6, [r0, #16]
 800a448:	b003      	add	sp, #12
 800a44a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a44e:	f843 2b04 	str.w	r2, [r3], #4
 800a452:	e7e3      	b.n	800a41c <__multiply+0x40>
 800a454:	f8b2 b000 	ldrh.w	fp, [r2]
 800a458:	f1bb 0f00 	cmp.w	fp, #0
 800a45c:	d023      	beq.n	800a4a6 <__multiply+0xca>
 800a45e:	4689      	mov	r9, r1
 800a460:	46ac      	mov	ip, r5
 800a462:	f04f 0800 	mov.w	r8, #0
 800a466:	f859 4b04 	ldr.w	r4, [r9], #4
 800a46a:	f8dc a000 	ldr.w	sl, [ip]
 800a46e:	b2a3      	uxth	r3, r4
 800a470:	fa1f fa8a 	uxth.w	sl, sl
 800a474:	fb0b a303 	mla	r3, fp, r3, sl
 800a478:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a47c:	f8dc 4000 	ldr.w	r4, [ip]
 800a480:	4443      	add	r3, r8
 800a482:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a486:	fb0b 840a 	mla	r4, fp, sl, r8
 800a48a:	46e2      	mov	sl, ip
 800a48c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a490:	b29b      	uxth	r3, r3
 800a492:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a496:	454f      	cmp	r7, r9
 800a498:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a49c:	f84a 3b04 	str.w	r3, [sl], #4
 800a4a0:	d82b      	bhi.n	800a4fa <__multiply+0x11e>
 800a4a2:	f8cc 8004 	str.w	r8, [ip, #4]
 800a4a6:	9b01      	ldr	r3, [sp, #4]
 800a4a8:	3204      	adds	r2, #4
 800a4aa:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a4ae:	f1ba 0f00 	cmp.w	sl, #0
 800a4b2:	d020      	beq.n	800a4f6 <__multiply+0x11a>
 800a4b4:	4689      	mov	r9, r1
 800a4b6:	46a8      	mov	r8, r5
 800a4b8:	f04f 0b00 	mov.w	fp, #0
 800a4bc:	682b      	ldr	r3, [r5, #0]
 800a4be:	f8b9 c000 	ldrh.w	ip, [r9]
 800a4c2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a4c6:	b29b      	uxth	r3, r3
 800a4c8:	fb0a 440c 	mla	r4, sl, ip, r4
 800a4cc:	46c4      	mov	ip, r8
 800a4ce:	445c      	add	r4, fp
 800a4d0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a4d4:	f84c 3b04 	str.w	r3, [ip], #4
 800a4d8:	f859 3b04 	ldr.w	r3, [r9], #4
 800a4dc:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a4e0:	0c1b      	lsrs	r3, r3, #16
 800a4e2:	fb0a b303 	mla	r3, sl, r3, fp
 800a4e6:	454f      	cmp	r7, r9
 800a4e8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a4ec:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a4f0:	d805      	bhi.n	800a4fe <__multiply+0x122>
 800a4f2:	f8c8 3004 	str.w	r3, [r8, #4]
 800a4f6:	3504      	adds	r5, #4
 800a4f8:	e79b      	b.n	800a432 <__multiply+0x56>
 800a4fa:	46d4      	mov	ip, sl
 800a4fc:	e7b3      	b.n	800a466 <__multiply+0x8a>
 800a4fe:	46e0      	mov	r8, ip
 800a500:	e7dd      	b.n	800a4be <__multiply+0xe2>
 800a502:	3e01      	subs	r6, #1
 800a504:	e799      	b.n	800a43a <__multiply+0x5e>
	...

0800a508 <__pow5mult>:
 800a508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a50c:	4615      	mov	r5, r2
 800a50e:	f012 0203 	ands.w	r2, r2, #3
 800a512:	4606      	mov	r6, r0
 800a514:	460f      	mov	r7, r1
 800a516:	d007      	beq.n	800a528 <__pow5mult+0x20>
 800a518:	4c21      	ldr	r4, [pc, #132]	; (800a5a0 <__pow5mult+0x98>)
 800a51a:	3a01      	subs	r2, #1
 800a51c:	2300      	movs	r3, #0
 800a51e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a522:	f7ff fec9 	bl	800a2b8 <__multadd>
 800a526:	4607      	mov	r7, r0
 800a528:	10ad      	asrs	r5, r5, #2
 800a52a:	d035      	beq.n	800a598 <__pow5mult+0x90>
 800a52c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a52e:	b93c      	cbnz	r4, 800a540 <__pow5mult+0x38>
 800a530:	2010      	movs	r0, #16
 800a532:	f7ff fe55 	bl	800a1e0 <malloc>
 800a536:	6270      	str	r0, [r6, #36]	; 0x24
 800a538:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a53c:	6004      	str	r4, [r0, #0]
 800a53e:	60c4      	str	r4, [r0, #12]
 800a540:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a544:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a548:	b94c      	cbnz	r4, 800a55e <__pow5mult+0x56>
 800a54a:	f240 2171 	movw	r1, #625	; 0x271
 800a54e:	4630      	mov	r0, r6
 800a550:	f7ff ff3b 	bl	800a3ca <__i2b>
 800a554:	2300      	movs	r3, #0
 800a556:	4604      	mov	r4, r0
 800a558:	f8c8 0008 	str.w	r0, [r8, #8]
 800a55c:	6003      	str	r3, [r0, #0]
 800a55e:	f04f 0800 	mov.w	r8, #0
 800a562:	07eb      	lsls	r3, r5, #31
 800a564:	d50a      	bpl.n	800a57c <__pow5mult+0x74>
 800a566:	4639      	mov	r1, r7
 800a568:	4622      	mov	r2, r4
 800a56a:	4630      	mov	r0, r6
 800a56c:	f7ff ff36 	bl	800a3dc <__multiply>
 800a570:	4681      	mov	r9, r0
 800a572:	4639      	mov	r1, r7
 800a574:	4630      	mov	r0, r6
 800a576:	f7ff fe88 	bl	800a28a <_Bfree>
 800a57a:	464f      	mov	r7, r9
 800a57c:	106d      	asrs	r5, r5, #1
 800a57e:	d00b      	beq.n	800a598 <__pow5mult+0x90>
 800a580:	6820      	ldr	r0, [r4, #0]
 800a582:	b938      	cbnz	r0, 800a594 <__pow5mult+0x8c>
 800a584:	4622      	mov	r2, r4
 800a586:	4621      	mov	r1, r4
 800a588:	4630      	mov	r0, r6
 800a58a:	f7ff ff27 	bl	800a3dc <__multiply>
 800a58e:	6020      	str	r0, [r4, #0]
 800a590:	f8c0 8000 	str.w	r8, [r0]
 800a594:	4604      	mov	r4, r0
 800a596:	e7e4      	b.n	800a562 <__pow5mult+0x5a>
 800a598:	4638      	mov	r0, r7
 800a59a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a59e:	bf00      	nop
 800a5a0:	0800ba68 	.word	0x0800ba68

0800a5a4 <__lshift>:
 800a5a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5a8:	460c      	mov	r4, r1
 800a5aa:	4607      	mov	r7, r0
 800a5ac:	4616      	mov	r6, r2
 800a5ae:	6923      	ldr	r3, [r4, #16]
 800a5b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a5b4:	eb0a 0903 	add.w	r9, sl, r3
 800a5b8:	6849      	ldr	r1, [r1, #4]
 800a5ba:	68a3      	ldr	r3, [r4, #8]
 800a5bc:	f109 0501 	add.w	r5, r9, #1
 800a5c0:	42ab      	cmp	r3, r5
 800a5c2:	db32      	blt.n	800a62a <__lshift+0x86>
 800a5c4:	4638      	mov	r0, r7
 800a5c6:	f7ff fe2c 	bl	800a222 <_Balloc>
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	4680      	mov	r8, r0
 800a5ce:	461a      	mov	r2, r3
 800a5d0:	f100 0114 	add.w	r1, r0, #20
 800a5d4:	4553      	cmp	r3, sl
 800a5d6:	db2b      	blt.n	800a630 <__lshift+0x8c>
 800a5d8:	6920      	ldr	r0, [r4, #16]
 800a5da:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a5de:	f104 0314 	add.w	r3, r4, #20
 800a5e2:	f016 021f 	ands.w	r2, r6, #31
 800a5e6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a5ea:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a5ee:	d025      	beq.n	800a63c <__lshift+0x98>
 800a5f0:	2000      	movs	r0, #0
 800a5f2:	f1c2 0e20 	rsb	lr, r2, #32
 800a5f6:	468a      	mov	sl, r1
 800a5f8:	681e      	ldr	r6, [r3, #0]
 800a5fa:	4096      	lsls	r6, r2
 800a5fc:	4330      	orrs	r0, r6
 800a5fe:	f84a 0b04 	str.w	r0, [sl], #4
 800a602:	f853 0b04 	ldr.w	r0, [r3], #4
 800a606:	459c      	cmp	ip, r3
 800a608:	fa20 f00e 	lsr.w	r0, r0, lr
 800a60c:	d814      	bhi.n	800a638 <__lshift+0x94>
 800a60e:	6048      	str	r0, [r1, #4]
 800a610:	b108      	cbz	r0, 800a616 <__lshift+0x72>
 800a612:	f109 0502 	add.w	r5, r9, #2
 800a616:	3d01      	subs	r5, #1
 800a618:	4638      	mov	r0, r7
 800a61a:	f8c8 5010 	str.w	r5, [r8, #16]
 800a61e:	4621      	mov	r1, r4
 800a620:	f7ff fe33 	bl	800a28a <_Bfree>
 800a624:	4640      	mov	r0, r8
 800a626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a62a:	3101      	adds	r1, #1
 800a62c:	005b      	lsls	r3, r3, #1
 800a62e:	e7c7      	b.n	800a5c0 <__lshift+0x1c>
 800a630:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a634:	3301      	adds	r3, #1
 800a636:	e7cd      	b.n	800a5d4 <__lshift+0x30>
 800a638:	4651      	mov	r1, sl
 800a63a:	e7dc      	b.n	800a5f6 <__lshift+0x52>
 800a63c:	3904      	subs	r1, #4
 800a63e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a642:	459c      	cmp	ip, r3
 800a644:	f841 2f04 	str.w	r2, [r1, #4]!
 800a648:	d8f9      	bhi.n	800a63e <__lshift+0x9a>
 800a64a:	e7e4      	b.n	800a616 <__lshift+0x72>

0800a64c <__mcmp>:
 800a64c:	6903      	ldr	r3, [r0, #16]
 800a64e:	690a      	ldr	r2, [r1, #16]
 800a650:	b530      	push	{r4, r5, lr}
 800a652:	1a9b      	subs	r3, r3, r2
 800a654:	d10c      	bne.n	800a670 <__mcmp+0x24>
 800a656:	0092      	lsls	r2, r2, #2
 800a658:	3014      	adds	r0, #20
 800a65a:	3114      	adds	r1, #20
 800a65c:	1884      	adds	r4, r0, r2
 800a65e:	4411      	add	r1, r2
 800a660:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a664:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a668:	4295      	cmp	r5, r2
 800a66a:	d003      	beq.n	800a674 <__mcmp+0x28>
 800a66c:	d305      	bcc.n	800a67a <__mcmp+0x2e>
 800a66e:	2301      	movs	r3, #1
 800a670:	4618      	mov	r0, r3
 800a672:	bd30      	pop	{r4, r5, pc}
 800a674:	42a0      	cmp	r0, r4
 800a676:	d3f3      	bcc.n	800a660 <__mcmp+0x14>
 800a678:	e7fa      	b.n	800a670 <__mcmp+0x24>
 800a67a:	f04f 33ff 	mov.w	r3, #4294967295
 800a67e:	e7f7      	b.n	800a670 <__mcmp+0x24>

0800a680 <__mdiff>:
 800a680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a684:	460d      	mov	r5, r1
 800a686:	4607      	mov	r7, r0
 800a688:	4611      	mov	r1, r2
 800a68a:	4628      	mov	r0, r5
 800a68c:	4614      	mov	r4, r2
 800a68e:	f7ff ffdd 	bl	800a64c <__mcmp>
 800a692:	1e06      	subs	r6, r0, #0
 800a694:	d108      	bne.n	800a6a8 <__mdiff+0x28>
 800a696:	4631      	mov	r1, r6
 800a698:	4638      	mov	r0, r7
 800a69a:	f7ff fdc2 	bl	800a222 <_Balloc>
 800a69e:	2301      	movs	r3, #1
 800a6a0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a6a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6a8:	bfa4      	itt	ge
 800a6aa:	4623      	movge	r3, r4
 800a6ac:	462c      	movge	r4, r5
 800a6ae:	4638      	mov	r0, r7
 800a6b0:	6861      	ldr	r1, [r4, #4]
 800a6b2:	bfa6      	itte	ge
 800a6b4:	461d      	movge	r5, r3
 800a6b6:	2600      	movge	r6, #0
 800a6b8:	2601      	movlt	r6, #1
 800a6ba:	f7ff fdb2 	bl	800a222 <_Balloc>
 800a6be:	f04f 0e00 	mov.w	lr, #0
 800a6c2:	60c6      	str	r6, [r0, #12]
 800a6c4:	692b      	ldr	r3, [r5, #16]
 800a6c6:	6926      	ldr	r6, [r4, #16]
 800a6c8:	f104 0214 	add.w	r2, r4, #20
 800a6cc:	f105 0914 	add.w	r9, r5, #20
 800a6d0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a6d4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a6d8:	f100 0114 	add.w	r1, r0, #20
 800a6dc:	f852 ab04 	ldr.w	sl, [r2], #4
 800a6e0:	f859 5b04 	ldr.w	r5, [r9], #4
 800a6e4:	fa1f f38a 	uxth.w	r3, sl
 800a6e8:	4473      	add	r3, lr
 800a6ea:	b2ac      	uxth	r4, r5
 800a6ec:	1b1b      	subs	r3, r3, r4
 800a6ee:	0c2c      	lsrs	r4, r5, #16
 800a6f0:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800a6f4:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800a6f8:	b29b      	uxth	r3, r3
 800a6fa:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800a6fe:	45c8      	cmp	r8, r9
 800a700:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800a704:	4694      	mov	ip, r2
 800a706:	f841 4b04 	str.w	r4, [r1], #4
 800a70a:	d8e7      	bhi.n	800a6dc <__mdiff+0x5c>
 800a70c:	45bc      	cmp	ip, r7
 800a70e:	d304      	bcc.n	800a71a <__mdiff+0x9a>
 800a710:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800a714:	b183      	cbz	r3, 800a738 <__mdiff+0xb8>
 800a716:	6106      	str	r6, [r0, #16]
 800a718:	e7c4      	b.n	800a6a4 <__mdiff+0x24>
 800a71a:	f85c 4b04 	ldr.w	r4, [ip], #4
 800a71e:	b2a2      	uxth	r2, r4
 800a720:	4472      	add	r2, lr
 800a722:	1413      	asrs	r3, r2, #16
 800a724:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a728:	b292      	uxth	r2, r2
 800a72a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a72e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a732:	f841 2b04 	str.w	r2, [r1], #4
 800a736:	e7e9      	b.n	800a70c <__mdiff+0x8c>
 800a738:	3e01      	subs	r6, #1
 800a73a:	e7e9      	b.n	800a710 <__mdiff+0x90>

0800a73c <__d2b>:
 800a73c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a740:	461c      	mov	r4, r3
 800a742:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800a746:	2101      	movs	r1, #1
 800a748:	4690      	mov	r8, r2
 800a74a:	f7ff fd6a 	bl	800a222 <_Balloc>
 800a74e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800a752:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800a756:	4607      	mov	r7, r0
 800a758:	bb34      	cbnz	r4, 800a7a8 <__d2b+0x6c>
 800a75a:	9201      	str	r2, [sp, #4]
 800a75c:	f1b8 0200 	subs.w	r2, r8, #0
 800a760:	d027      	beq.n	800a7b2 <__d2b+0x76>
 800a762:	a802      	add	r0, sp, #8
 800a764:	f840 2d08 	str.w	r2, [r0, #-8]!
 800a768:	f7ff fe00 	bl	800a36c <__lo0bits>
 800a76c:	9900      	ldr	r1, [sp, #0]
 800a76e:	b1f0      	cbz	r0, 800a7ae <__d2b+0x72>
 800a770:	9a01      	ldr	r2, [sp, #4]
 800a772:	f1c0 0320 	rsb	r3, r0, #32
 800a776:	fa02 f303 	lsl.w	r3, r2, r3
 800a77a:	430b      	orrs	r3, r1
 800a77c:	40c2      	lsrs	r2, r0
 800a77e:	617b      	str	r3, [r7, #20]
 800a780:	9201      	str	r2, [sp, #4]
 800a782:	9b01      	ldr	r3, [sp, #4]
 800a784:	2b00      	cmp	r3, #0
 800a786:	bf14      	ite	ne
 800a788:	2102      	movne	r1, #2
 800a78a:	2101      	moveq	r1, #1
 800a78c:	61bb      	str	r3, [r7, #24]
 800a78e:	6139      	str	r1, [r7, #16]
 800a790:	b1c4      	cbz	r4, 800a7c4 <__d2b+0x88>
 800a792:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a796:	4404      	add	r4, r0
 800a798:	6034      	str	r4, [r6, #0]
 800a79a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a79e:	6028      	str	r0, [r5, #0]
 800a7a0:	4638      	mov	r0, r7
 800a7a2:	b002      	add	sp, #8
 800a7a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7a8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a7ac:	e7d5      	b.n	800a75a <__d2b+0x1e>
 800a7ae:	6179      	str	r1, [r7, #20]
 800a7b0:	e7e7      	b.n	800a782 <__d2b+0x46>
 800a7b2:	a801      	add	r0, sp, #4
 800a7b4:	f7ff fdda 	bl	800a36c <__lo0bits>
 800a7b8:	2101      	movs	r1, #1
 800a7ba:	9b01      	ldr	r3, [sp, #4]
 800a7bc:	6139      	str	r1, [r7, #16]
 800a7be:	617b      	str	r3, [r7, #20]
 800a7c0:	3020      	adds	r0, #32
 800a7c2:	e7e5      	b.n	800a790 <__d2b+0x54>
 800a7c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a7c8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a7cc:	6030      	str	r0, [r6, #0]
 800a7ce:	6918      	ldr	r0, [r3, #16]
 800a7d0:	f7ff fdad 	bl	800a32e <__hi0bits>
 800a7d4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a7d8:	e7e1      	b.n	800a79e <__d2b+0x62>

0800a7da <_calloc_r>:
 800a7da:	b538      	push	{r3, r4, r5, lr}
 800a7dc:	fb02 f401 	mul.w	r4, r2, r1
 800a7e0:	4621      	mov	r1, r4
 800a7e2:	f000 f855 	bl	800a890 <_malloc_r>
 800a7e6:	4605      	mov	r5, r0
 800a7e8:	b118      	cbz	r0, 800a7f2 <_calloc_r+0x18>
 800a7ea:	4622      	mov	r2, r4
 800a7ec:	2100      	movs	r1, #0
 800a7ee:	f7fe f96d 	bl	8008acc <memset>
 800a7f2:	4628      	mov	r0, r5
 800a7f4:	bd38      	pop	{r3, r4, r5, pc}
	...

0800a7f8 <_free_r>:
 800a7f8:	b538      	push	{r3, r4, r5, lr}
 800a7fa:	4605      	mov	r5, r0
 800a7fc:	2900      	cmp	r1, #0
 800a7fe:	d043      	beq.n	800a888 <_free_r+0x90>
 800a800:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a804:	1f0c      	subs	r4, r1, #4
 800a806:	2b00      	cmp	r3, #0
 800a808:	bfb8      	it	lt
 800a80a:	18e4      	addlt	r4, r4, r3
 800a80c:	f000 fc46 	bl	800b09c <__malloc_lock>
 800a810:	4a1e      	ldr	r2, [pc, #120]	; (800a88c <_free_r+0x94>)
 800a812:	6813      	ldr	r3, [r2, #0]
 800a814:	4610      	mov	r0, r2
 800a816:	b933      	cbnz	r3, 800a826 <_free_r+0x2e>
 800a818:	6063      	str	r3, [r4, #4]
 800a81a:	6014      	str	r4, [r2, #0]
 800a81c:	4628      	mov	r0, r5
 800a81e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a822:	f000 bc3c 	b.w	800b09e <__malloc_unlock>
 800a826:	42a3      	cmp	r3, r4
 800a828:	d90b      	bls.n	800a842 <_free_r+0x4a>
 800a82a:	6821      	ldr	r1, [r4, #0]
 800a82c:	1862      	adds	r2, r4, r1
 800a82e:	4293      	cmp	r3, r2
 800a830:	bf01      	itttt	eq
 800a832:	681a      	ldreq	r2, [r3, #0]
 800a834:	685b      	ldreq	r3, [r3, #4]
 800a836:	1852      	addeq	r2, r2, r1
 800a838:	6022      	streq	r2, [r4, #0]
 800a83a:	6063      	str	r3, [r4, #4]
 800a83c:	6004      	str	r4, [r0, #0]
 800a83e:	e7ed      	b.n	800a81c <_free_r+0x24>
 800a840:	4613      	mov	r3, r2
 800a842:	685a      	ldr	r2, [r3, #4]
 800a844:	b10a      	cbz	r2, 800a84a <_free_r+0x52>
 800a846:	42a2      	cmp	r2, r4
 800a848:	d9fa      	bls.n	800a840 <_free_r+0x48>
 800a84a:	6819      	ldr	r1, [r3, #0]
 800a84c:	1858      	adds	r0, r3, r1
 800a84e:	42a0      	cmp	r0, r4
 800a850:	d10b      	bne.n	800a86a <_free_r+0x72>
 800a852:	6820      	ldr	r0, [r4, #0]
 800a854:	4401      	add	r1, r0
 800a856:	1858      	adds	r0, r3, r1
 800a858:	4282      	cmp	r2, r0
 800a85a:	6019      	str	r1, [r3, #0]
 800a85c:	d1de      	bne.n	800a81c <_free_r+0x24>
 800a85e:	6810      	ldr	r0, [r2, #0]
 800a860:	6852      	ldr	r2, [r2, #4]
 800a862:	4401      	add	r1, r0
 800a864:	6019      	str	r1, [r3, #0]
 800a866:	605a      	str	r2, [r3, #4]
 800a868:	e7d8      	b.n	800a81c <_free_r+0x24>
 800a86a:	d902      	bls.n	800a872 <_free_r+0x7a>
 800a86c:	230c      	movs	r3, #12
 800a86e:	602b      	str	r3, [r5, #0]
 800a870:	e7d4      	b.n	800a81c <_free_r+0x24>
 800a872:	6820      	ldr	r0, [r4, #0]
 800a874:	1821      	adds	r1, r4, r0
 800a876:	428a      	cmp	r2, r1
 800a878:	bf01      	itttt	eq
 800a87a:	6811      	ldreq	r1, [r2, #0]
 800a87c:	6852      	ldreq	r2, [r2, #4]
 800a87e:	1809      	addeq	r1, r1, r0
 800a880:	6021      	streq	r1, [r4, #0]
 800a882:	6062      	str	r2, [r4, #4]
 800a884:	605c      	str	r4, [r3, #4]
 800a886:	e7c9      	b.n	800a81c <_free_r+0x24>
 800a888:	bd38      	pop	{r3, r4, r5, pc}
 800a88a:	bf00      	nop
 800a88c:	200005d4 	.word	0x200005d4

0800a890 <_malloc_r>:
 800a890:	b570      	push	{r4, r5, r6, lr}
 800a892:	1ccd      	adds	r5, r1, #3
 800a894:	f025 0503 	bic.w	r5, r5, #3
 800a898:	3508      	adds	r5, #8
 800a89a:	2d0c      	cmp	r5, #12
 800a89c:	bf38      	it	cc
 800a89e:	250c      	movcc	r5, #12
 800a8a0:	2d00      	cmp	r5, #0
 800a8a2:	4606      	mov	r6, r0
 800a8a4:	db01      	blt.n	800a8aa <_malloc_r+0x1a>
 800a8a6:	42a9      	cmp	r1, r5
 800a8a8:	d903      	bls.n	800a8b2 <_malloc_r+0x22>
 800a8aa:	230c      	movs	r3, #12
 800a8ac:	6033      	str	r3, [r6, #0]
 800a8ae:	2000      	movs	r0, #0
 800a8b0:	bd70      	pop	{r4, r5, r6, pc}
 800a8b2:	f000 fbf3 	bl	800b09c <__malloc_lock>
 800a8b6:	4a21      	ldr	r2, [pc, #132]	; (800a93c <_malloc_r+0xac>)
 800a8b8:	6814      	ldr	r4, [r2, #0]
 800a8ba:	4621      	mov	r1, r4
 800a8bc:	b991      	cbnz	r1, 800a8e4 <_malloc_r+0x54>
 800a8be:	4c20      	ldr	r4, [pc, #128]	; (800a940 <_malloc_r+0xb0>)
 800a8c0:	6823      	ldr	r3, [r4, #0]
 800a8c2:	b91b      	cbnz	r3, 800a8cc <_malloc_r+0x3c>
 800a8c4:	4630      	mov	r0, r6
 800a8c6:	f000 f97b 	bl	800abc0 <_sbrk_r>
 800a8ca:	6020      	str	r0, [r4, #0]
 800a8cc:	4629      	mov	r1, r5
 800a8ce:	4630      	mov	r0, r6
 800a8d0:	f000 f976 	bl	800abc0 <_sbrk_r>
 800a8d4:	1c43      	adds	r3, r0, #1
 800a8d6:	d124      	bne.n	800a922 <_malloc_r+0x92>
 800a8d8:	230c      	movs	r3, #12
 800a8da:	4630      	mov	r0, r6
 800a8dc:	6033      	str	r3, [r6, #0]
 800a8de:	f000 fbde 	bl	800b09e <__malloc_unlock>
 800a8e2:	e7e4      	b.n	800a8ae <_malloc_r+0x1e>
 800a8e4:	680b      	ldr	r3, [r1, #0]
 800a8e6:	1b5b      	subs	r3, r3, r5
 800a8e8:	d418      	bmi.n	800a91c <_malloc_r+0x8c>
 800a8ea:	2b0b      	cmp	r3, #11
 800a8ec:	d90f      	bls.n	800a90e <_malloc_r+0x7e>
 800a8ee:	600b      	str	r3, [r1, #0]
 800a8f0:	18cc      	adds	r4, r1, r3
 800a8f2:	50cd      	str	r5, [r1, r3]
 800a8f4:	4630      	mov	r0, r6
 800a8f6:	f000 fbd2 	bl	800b09e <__malloc_unlock>
 800a8fa:	f104 000b 	add.w	r0, r4, #11
 800a8fe:	1d23      	adds	r3, r4, #4
 800a900:	f020 0007 	bic.w	r0, r0, #7
 800a904:	1ac3      	subs	r3, r0, r3
 800a906:	d0d3      	beq.n	800a8b0 <_malloc_r+0x20>
 800a908:	425a      	negs	r2, r3
 800a90a:	50e2      	str	r2, [r4, r3]
 800a90c:	e7d0      	b.n	800a8b0 <_malloc_r+0x20>
 800a90e:	684b      	ldr	r3, [r1, #4]
 800a910:	428c      	cmp	r4, r1
 800a912:	bf16      	itet	ne
 800a914:	6063      	strne	r3, [r4, #4]
 800a916:	6013      	streq	r3, [r2, #0]
 800a918:	460c      	movne	r4, r1
 800a91a:	e7eb      	b.n	800a8f4 <_malloc_r+0x64>
 800a91c:	460c      	mov	r4, r1
 800a91e:	6849      	ldr	r1, [r1, #4]
 800a920:	e7cc      	b.n	800a8bc <_malloc_r+0x2c>
 800a922:	1cc4      	adds	r4, r0, #3
 800a924:	f024 0403 	bic.w	r4, r4, #3
 800a928:	42a0      	cmp	r0, r4
 800a92a:	d005      	beq.n	800a938 <_malloc_r+0xa8>
 800a92c:	1a21      	subs	r1, r4, r0
 800a92e:	4630      	mov	r0, r6
 800a930:	f000 f946 	bl	800abc0 <_sbrk_r>
 800a934:	3001      	adds	r0, #1
 800a936:	d0cf      	beq.n	800a8d8 <_malloc_r+0x48>
 800a938:	6025      	str	r5, [r4, #0]
 800a93a:	e7db      	b.n	800a8f4 <_malloc_r+0x64>
 800a93c:	200005d4 	.word	0x200005d4
 800a940:	200005d8 	.word	0x200005d8

0800a944 <__sfputc_r>:
 800a944:	6893      	ldr	r3, [r2, #8]
 800a946:	b410      	push	{r4}
 800a948:	3b01      	subs	r3, #1
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	6093      	str	r3, [r2, #8]
 800a94e:	da07      	bge.n	800a960 <__sfputc_r+0x1c>
 800a950:	6994      	ldr	r4, [r2, #24]
 800a952:	42a3      	cmp	r3, r4
 800a954:	db01      	blt.n	800a95a <__sfputc_r+0x16>
 800a956:	290a      	cmp	r1, #10
 800a958:	d102      	bne.n	800a960 <__sfputc_r+0x1c>
 800a95a:	bc10      	pop	{r4}
 800a95c:	f000 b984 	b.w	800ac68 <__swbuf_r>
 800a960:	6813      	ldr	r3, [r2, #0]
 800a962:	1c58      	adds	r0, r3, #1
 800a964:	6010      	str	r0, [r2, #0]
 800a966:	7019      	strb	r1, [r3, #0]
 800a968:	4608      	mov	r0, r1
 800a96a:	bc10      	pop	{r4}
 800a96c:	4770      	bx	lr

0800a96e <__sfputs_r>:
 800a96e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a970:	4606      	mov	r6, r0
 800a972:	460f      	mov	r7, r1
 800a974:	4614      	mov	r4, r2
 800a976:	18d5      	adds	r5, r2, r3
 800a978:	42ac      	cmp	r4, r5
 800a97a:	d101      	bne.n	800a980 <__sfputs_r+0x12>
 800a97c:	2000      	movs	r0, #0
 800a97e:	e007      	b.n	800a990 <__sfputs_r+0x22>
 800a980:	463a      	mov	r2, r7
 800a982:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a986:	4630      	mov	r0, r6
 800a988:	f7ff ffdc 	bl	800a944 <__sfputc_r>
 800a98c:	1c43      	adds	r3, r0, #1
 800a98e:	d1f3      	bne.n	800a978 <__sfputs_r+0xa>
 800a990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a994 <_vfiprintf_r>:
 800a994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a998:	460c      	mov	r4, r1
 800a99a:	b09d      	sub	sp, #116	; 0x74
 800a99c:	4617      	mov	r7, r2
 800a99e:	461d      	mov	r5, r3
 800a9a0:	4606      	mov	r6, r0
 800a9a2:	b118      	cbz	r0, 800a9ac <_vfiprintf_r+0x18>
 800a9a4:	6983      	ldr	r3, [r0, #24]
 800a9a6:	b90b      	cbnz	r3, 800a9ac <_vfiprintf_r+0x18>
 800a9a8:	f7ff fb82 	bl	800a0b0 <__sinit>
 800a9ac:	4b7c      	ldr	r3, [pc, #496]	; (800aba0 <_vfiprintf_r+0x20c>)
 800a9ae:	429c      	cmp	r4, r3
 800a9b0:	d158      	bne.n	800aa64 <_vfiprintf_r+0xd0>
 800a9b2:	6874      	ldr	r4, [r6, #4]
 800a9b4:	89a3      	ldrh	r3, [r4, #12]
 800a9b6:	0718      	lsls	r0, r3, #28
 800a9b8:	d55e      	bpl.n	800aa78 <_vfiprintf_r+0xe4>
 800a9ba:	6923      	ldr	r3, [r4, #16]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d05b      	beq.n	800aa78 <_vfiprintf_r+0xe4>
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	9309      	str	r3, [sp, #36]	; 0x24
 800a9c4:	2320      	movs	r3, #32
 800a9c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a9ca:	2330      	movs	r3, #48	; 0x30
 800a9cc:	f04f 0b01 	mov.w	fp, #1
 800a9d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a9d4:	9503      	str	r5, [sp, #12]
 800a9d6:	46b8      	mov	r8, r7
 800a9d8:	4645      	mov	r5, r8
 800a9da:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a9de:	b10b      	cbz	r3, 800a9e4 <_vfiprintf_r+0x50>
 800a9e0:	2b25      	cmp	r3, #37	; 0x25
 800a9e2:	d154      	bne.n	800aa8e <_vfiprintf_r+0xfa>
 800a9e4:	ebb8 0a07 	subs.w	sl, r8, r7
 800a9e8:	d00b      	beq.n	800aa02 <_vfiprintf_r+0x6e>
 800a9ea:	4653      	mov	r3, sl
 800a9ec:	463a      	mov	r2, r7
 800a9ee:	4621      	mov	r1, r4
 800a9f0:	4630      	mov	r0, r6
 800a9f2:	f7ff ffbc 	bl	800a96e <__sfputs_r>
 800a9f6:	3001      	adds	r0, #1
 800a9f8:	f000 80c2 	beq.w	800ab80 <_vfiprintf_r+0x1ec>
 800a9fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9fe:	4453      	add	r3, sl
 800aa00:	9309      	str	r3, [sp, #36]	; 0x24
 800aa02:	f898 3000 	ldrb.w	r3, [r8]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	f000 80ba 	beq.w	800ab80 <_vfiprintf_r+0x1ec>
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	f04f 32ff 	mov.w	r2, #4294967295
 800aa12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa16:	9304      	str	r3, [sp, #16]
 800aa18:	9307      	str	r3, [sp, #28]
 800aa1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa1e:	931a      	str	r3, [sp, #104]	; 0x68
 800aa20:	46a8      	mov	r8, r5
 800aa22:	2205      	movs	r2, #5
 800aa24:	f818 1b01 	ldrb.w	r1, [r8], #1
 800aa28:	485e      	ldr	r0, [pc, #376]	; (800aba4 <_vfiprintf_r+0x210>)
 800aa2a:	f7ff fbe1 	bl	800a1f0 <memchr>
 800aa2e:	9b04      	ldr	r3, [sp, #16]
 800aa30:	bb78      	cbnz	r0, 800aa92 <_vfiprintf_r+0xfe>
 800aa32:	06d9      	lsls	r1, r3, #27
 800aa34:	bf44      	itt	mi
 800aa36:	2220      	movmi	r2, #32
 800aa38:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800aa3c:	071a      	lsls	r2, r3, #28
 800aa3e:	bf44      	itt	mi
 800aa40:	222b      	movmi	r2, #43	; 0x2b
 800aa42:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800aa46:	782a      	ldrb	r2, [r5, #0]
 800aa48:	2a2a      	cmp	r2, #42	; 0x2a
 800aa4a:	d02a      	beq.n	800aaa2 <_vfiprintf_r+0x10e>
 800aa4c:	46a8      	mov	r8, r5
 800aa4e:	2000      	movs	r0, #0
 800aa50:	250a      	movs	r5, #10
 800aa52:	9a07      	ldr	r2, [sp, #28]
 800aa54:	4641      	mov	r1, r8
 800aa56:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa5a:	3b30      	subs	r3, #48	; 0x30
 800aa5c:	2b09      	cmp	r3, #9
 800aa5e:	d969      	bls.n	800ab34 <_vfiprintf_r+0x1a0>
 800aa60:	b360      	cbz	r0, 800aabc <_vfiprintf_r+0x128>
 800aa62:	e024      	b.n	800aaae <_vfiprintf_r+0x11a>
 800aa64:	4b50      	ldr	r3, [pc, #320]	; (800aba8 <_vfiprintf_r+0x214>)
 800aa66:	429c      	cmp	r4, r3
 800aa68:	d101      	bne.n	800aa6e <_vfiprintf_r+0xda>
 800aa6a:	68b4      	ldr	r4, [r6, #8]
 800aa6c:	e7a2      	b.n	800a9b4 <_vfiprintf_r+0x20>
 800aa6e:	4b4f      	ldr	r3, [pc, #316]	; (800abac <_vfiprintf_r+0x218>)
 800aa70:	429c      	cmp	r4, r3
 800aa72:	bf08      	it	eq
 800aa74:	68f4      	ldreq	r4, [r6, #12]
 800aa76:	e79d      	b.n	800a9b4 <_vfiprintf_r+0x20>
 800aa78:	4621      	mov	r1, r4
 800aa7a:	4630      	mov	r0, r6
 800aa7c:	f000 f958 	bl	800ad30 <__swsetup_r>
 800aa80:	2800      	cmp	r0, #0
 800aa82:	d09d      	beq.n	800a9c0 <_vfiprintf_r+0x2c>
 800aa84:	f04f 30ff 	mov.w	r0, #4294967295
 800aa88:	b01d      	add	sp, #116	; 0x74
 800aa8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa8e:	46a8      	mov	r8, r5
 800aa90:	e7a2      	b.n	800a9d8 <_vfiprintf_r+0x44>
 800aa92:	4a44      	ldr	r2, [pc, #272]	; (800aba4 <_vfiprintf_r+0x210>)
 800aa94:	4645      	mov	r5, r8
 800aa96:	1a80      	subs	r0, r0, r2
 800aa98:	fa0b f000 	lsl.w	r0, fp, r0
 800aa9c:	4318      	orrs	r0, r3
 800aa9e:	9004      	str	r0, [sp, #16]
 800aaa0:	e7be      	b.n	800aa20 <_vfiprintf_r+0x8c>
 800aaa2:	9a03      	ldr	r2, [sp, #12]
 800aaa4:	1d11      	adds	r1, r2, #4
 800aaa6:	6812      	ldr	r2, [r2, #0]
 800aaa8:	9103      	str	r1, [sp, #12]
 800aaaa:	2a00      	cmp	r2, #0
 800aaac:	db01      	blt.n	800aab2 <_vfiprintf_r+0x11e>
 800aaae:	9207      	str	r2, [sp, #28]
 800aab0:	e004      	b.n	800aabc <_vfiprintf_r+0x128>
 800aab2:	4252      	negs	r2, r2
 800aab4:	f043 0302 	orr.w	r3, r3, #2
 800aab8:	9207      	str	r2, [sp, #28]
 800aaba:	9304      	str	r3, [sp, #16]
 800aabc:	f898 3000 	ldrb.w	r3, [r8]
 800aac0:	2b2e      	cmp	r3, #46	; 0x2e
 800aac2:	d10e      	bne.n	800aae2 <_vfiprintf_r+0x14e>
 800aac4:	f898 3001 	ldrb.w	r3, [r8, #1]
 800aac8:	2b2a      	cmp	r3, #42	; 0x2a
 800aaca:	d138      	bne.n	800ab3e <_vfiprintf_r+0x1aa>
 800aacc:	9b03      	ldr	r3, [sp, #12]
 800aace:	f108 0802 	add.w	r8, r8, #2
 800aad2:	1d1a      	adds	r2, r3, #4
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	9203      	str	r2, [sp, #12]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	bfb8      	it	lt
 800aadc:	f04f 33ff 	movlt.w	r3, #4294967295
 800aae0:	9305      	str	r3, [sp, #20]
 800aae2:	4d33      	ldr	r5, [pc, #204]	; (800abb0 <_vfiprintf_r+0x21c>)
 800aae4:	2203      	movs	r2, #3
 800aae6:	f898 1000 	ldrb.w	r1, [r8]
 800aaea:	4628      	mov	r0, r5
 800aaec:	f7ff fb80 	bl	800a1f0 <memchr>
 800aaf0:	b140      	cbz	r0, 800ab04 <_vfiprintf_r+0x170>
 800aaf2:	2340      	movs	r3, #64	; 0x40
 800aaf4:	1b40      	subs	r0, r0, r5
 800aaf6:	fa03 f000 	lsl.w	r0, r3, r0
 800aafa:	9b04      	ldr	r3, [sp, #16]
 800aafc:	f108 0801 	add.w	r8, r8, #1
 800ab00:	4303      	orrs	r3, r0
 800ab02:	9304      	str	r3, [sp, #16]
 800ab04:	f898 1000 	ldrb.w	r1, [r8]
 800ab08:	2206      	movs	r2, #6
 800ab0a:	482a      	ldr	r0, [pc, #168]	; (800abb4 <_vfiprintf_r+0x220>)
 800ab0c:	f108 0701 	add.w	r7, r8, #1
 800ab10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab14:	f7ff fb6c 	bl	800a1f0 <memchr>
 800ab18:	2800      	cmp	r0, #0
 800ab1a:	d037      	beq.n	800ab8c <_vfiprintf_r+0x1f8>
 800ab1c:	4b26      	ldr	r3, [pc, #152]	; (800abb8 <_vfiprintf_r+0x224>)
 800ab1e:	bb1b      	cbnz	r3, 800ab68 <_vfiprintf_r+0x1d4>
 800ab20:	9b03      	ldr	r3, [sp, #12]
 800ab22:	3307      	adds	r3, #7
 800ab24:	f023 0307 	bic.w	r3, r3, #7
 800ab28:	3308      	adds	r3, #8
 800ab2a:	9303      	str	r3, [sp, #12]
 800ab2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab2e:	444b      	add	r3, r9
 800ab30:	9309      	str	r3, [sp, #36]	; 0x24
 800ab32:	e750      	b.n	800a9d6 <_vfiprintf_r+0x42>
 800ab34:	fb05 3202 	mla	r2, r5, r2, r3
 800ab38:	2001      	movs	r0, #1
 800ab3a:	4688      	mov	r8, r1
 800ab3c:	e78a      	b.n	800aa54 <_vfiprintf_r+0xc0>
 800ab3e:	2300      	movs	r3, #0
 800ab40:	250a      	movs	r5, #10
 800ab42:	4619      	mov	r1, r3
 800ab44:	f108 0801 	add.w	r8, r8, #1
 800ab48:	9305      	str	r3, [sp, #20]
 800ab4a:	4640      	mov	r0, r8
 800ab4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab50:	3a30      	subs	r2, #48	; 0x30
 800ab52:	2a09      	cmp	r2, #9
 800ab54:	d903      	bls.n	800ab5e <_vfiprintf_r+0x1ca>
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d0c3      	beq.n	800aae2 <_vfiprintf_r+0x14e>
 800ab5a:	9105      	str	r1, [sp, #20]
 800ab5c:	e7c1      	b.n	800aae2 <_vfiprintf_r+0x14e>
 800ab5e:	fb05 2101 	mla	r1, r5, r1, r2
 800ab62:	2301      	movs	r3, #1
 800ab64:	4680      	mov	r8, r0
 800ab66:	e7f0      	b.n	800ab4a <_vfiprintf_r+0x1b6>
 800ab68:	ab03      	add	r3, sp, #12
 800ab6a:	9300      	str	r3, [sp, #0]
 800ab6c:	4622      	mov	r2, r4
 800ab6e:	4b13      	ldr	r3, [pc, #76]	; (800abbc <_vfiprintf_r+0x228>)
 800ab70:	a904      	add	r1, sp, #16
 800ab72:	4630      	mov	r0, r6
 800ab74:	f7fe f844 	bl	8008c00 <_printf_float>
 800ab78:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ab7c:	4681      	mov	r9, r0
 800ab7e:	d1d5      	bne.n	800ab2c <_vfiprintf_r+0x198>
 800ab80:	89a3      	ldrh	r3, [r4, #12]
 800ab82:	065b      	lsls	r3, r3, #25
 800ab84:	f53f af7e 	bmi.w	800aa84 <_vfiprintf_r+0xf0>
 800ab88:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab8a:	e77d      	b.n	800aa88 <_vfiprintf_r+0xf4>
 800ab8c:	ab03      	add	r3, sp, #12
 800ab8e:	9300      	str	r3, [sp, #0]
 800ab90:	4622      	mov	r2, r4
 800ab92:	4b0a      	ldr	r3, [pc, #40]	; (800abbc <_vfiprintf_r+0x228>)
 800ab94:	a904      	add	r1, sp, #16
 800ab96:	4630      	mov	r0, r6
 800ab98:	f7fe fade 	bl	8009158 <_printf_i>
 800ab9c:	e7ec      	b.n	800ab78 <_vfiprintf_r+0x1e4>
 800ab9e:	bf00      	nop
 800aba0:	0800b934 	.word	0x0800b934
 800aba4:	0800ba74 	.word	0x0800ba74
 800aba8:	0800b954 	.word	0x0800b954
 800abac:	0800b914 	.word	0x0800b914
 800abb0:	0800ba7a 	.word	0x0800ba7a
 800abb4:	0800ba7e 	.word	0x0800ba7e
 800abb8:	08008c01 	.word	0x08008c01
 800abbc:	0800a96f 	.word	0x0800a96f

0800abc0 <_sbrk_r>:
 800abc0:	b538      	push	{r3, r4, r5, lr}
 800abc2:	2300      	movs	r3, #0
 800abc4:	4c05      	ldr	r4, [pc, #20]	; (800abdc <_sbrk_r+0x1c>)
 800abc6:	4605      	mov	r5, r0
 800abc8:	4608      	mov	r0, r1
 800abca:	6023      	str	r3, [r4, #0]
 800abcc:	f7f7 fbe6 	bl	800239c <_sbrk>
 800abd0:	1c43      	adds	r3, r0, #1
 800abd2:	d102      	bne.n	800abda <_sbrk_r+0x1a>
 800abd4:	6823      	ldr	r3, [r4, #0]
 800abd6:	b103      	cbz	r3, 800abda <_sbrk_r+0x1a>
 800abd8:	602b      	str	r3, [r5, #0]
 800abda:	bd38      	pop	{r3, r4, r5, pc}
 800abdc:	200015c4 	.word	0x200015c4

0800abe0 <__sread>:
 800abe0:	b510      	push	{r4, lr}
 800abe2:	460c      	mov	r4, r1
 800abe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abe8:	f000 fa5a 	bl	800b0a0 <_read_r>
 800abec:	2800      	cmp	r0, #0
 800abee:	bfab      	itete	ge
 800abf0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800abf2:	89a3      	ldrhlt	r3, [r4, #12]
 800abf4:	181b      	addge	r3, r3, r0
 800abf6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800abfa:	bfac      	ite	ge
 800abfc:	6563      	strge	r3, [r4, #84]	; 0x54
 800abfe:	81a3      	strhlt	r3, [r4, #12]
 800ac00:	bd10      	pop	{r4, pc}

0800ac02 <__swrite>:
 800ac02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac06:	461f      	mov	r7, r3
 800ac08:	898b      	ldrh	r3, [r1, #12]
 800ac0a:	4605      	mov	r5, r0
 800ac0c:	05db      	lsls	r3, r3, #23
 800ac0e:	460c      	mov	r4, r1
 800ac10:	4616      	mov	r6, r2
 800ac12:	d505      	bpl.n	800ac20 <__swrite+0x1e>
 800ac14:	2302      	movs	r3, #2
 800ac16:	2200      	movs	r2, #0
 800ac18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac1c:	f000 f9b6 	bl	800af8c <_lseek_r>
 800ac20:	89a3      	ldrh	r3, [r4, #12]
 800ac22:	4632      	mov	r2, r6
 800ac24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac28:	81a3      	strh	r3, [r4, #12]
 800ac2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac2e:	463b      	mov	r3, r7
 800ac30:	4628      	mov	r0, r5
 800ac32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac36:	f000 b869 	b.w	800ad0c <_write_r>

0800ac3a <__sseek>:
 800ac3a:	b510      	push	{r4, lr}
 800ac3c:	460c      	mov	r4, r1
 800ac3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac42:	f000 f9a3 	bl	800af8c <_lseek_r>
 800ac46:	1c43      	adds	r3, r0, #1
 800ac48:	89a3      	ldrh	r3, [r4, #12]
 800ac4a:	bf15      	itete	ne
 800ac4c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ac4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ac52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ac56:	81a3      	strheq	r3, [r4, #12]
 800ac58:	bf18      	it	ne
 800ac5a:	81a3      	strhne	r3, [r4, #12]
 800ac5c:	bd10      	pop	{r4, pc}

0800ac5e <__sclose>:
 800ac5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac62:	f000 b8d3 	b.w	800ae0c <_close_r>
	...

0800ac68 <__swbuf_r>:
 800ac68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac6a:	460e      	mov	r6, r1
 800ac6c:	4614      	mov	r4, r2
 800ac6e:	4605      	mov	r5, r0
 800ac70:	b118      	cbz	r0, 800ac7a <__swbuf_r+0x12>
 800ac72:	6983      	ldr	r3, [r0, #24]
 800ac74:	b90b      	cbnz	r3, 800ac7a <__swbuf_r+0x12>
 800ac76:	f7ff fa1b 	bl	800a0b0 <__sinit>
 800ac7a:	4b21      	ldr	r3, [pc, #132]	; (800ad00 <__swbuf_r+0x98>)
 800ac7c:	429c      	cmp	r4, r3
 800ac7e:	d12a      	bne.n	800acd6 <__swbuf_r+0x6e>
 800ac80:	686c      	ldr	r4, [r5, #4]
 800ac82:	69a3      	ldr	r3, [r4, #24]
 800ac84:	60a3      	str	r3, [r4, #8]
 800ac86:	89a3      	ldrh	r3, [r4, #12]
 800ac88:	071a      	lsls	r2, r3, #28
 800ac8a:	d52e      	bpl.n	800acea <__swbuf_r+0x82>
 800ac8c:	6923      	ldr	r3, [r4, #16]
 800ac8e:	b363      	cbz	r3, 800acea <__swbuf_r+0x82>
 800ac90:	6923      	ldr	r3, [r4, #16]
 800ac92:	6820      	ldr	r0, [r4, #0]
 800ac94:	b2f6      	uxtb	r6, r6
 800ac96:	1ac0      	subs	r0, r0, r3
 800ac98:	6963      	ldr	r3, [r4, #20]
 800ac9a:	4637      	mov	r7, r6
 800ac9c:	4283      	cmp	r3, r0
 800ac9e:	dc04      	bgt.n	800acaa <__swbuf_r+0x42>
 800aca0:	4621      	mov	r1, r4
 800aca2:	4628      	mov	r0, r5
 800aca4:	f000 f948 	bl	800af38 <_fflush_r>
 800aca8:	bb28      	cbnz	r0, 800acf6 <__swbuf_r+0x8e>
 800acaa:	68a3      	ldr	r3, [r4, #8]
 800acac:	3001      	adds	r0, #1
 800acae:	3b01      	subs	r3, #1
 800acb0:	60a3      	str	r3, [r4, #8]
 800acb2:	6823      	ldr	r3, [r4, #0]
 800acb4:	1c5a      	adds	r2, r3, #1
 800acb6:	6022      	str	r2, [r4, #0]
 800acb8:	701e      	strb	r6, [r3, #0]
 800acba:	6963      	ldr	r3, [r4, #20]
 800acbc:	4283      	cmp	r3, r0
 800acbe:	d004      	beq.n	800acca <__swbuf_r+0x62>
 800acc0:	89a3      	ldrh	r3, [r4, #12]
 800acc2:	07db      	lsls	r3, r3, #31
 800acc4:	d519      	bpl.n	800acfa <__swbuf_r+0x92>
 800acc6:	2e0a      	cmp	r6, #10
 800acc8:	d117      	bne.n	800acfa <__swbuf_r+0x92>
 800acca:	4621      	mov	r1, r4
 800accc:	4628      	mov	r0, r5
 800acce:	f000 f933 	bl	800af38 <_fflush_r>
 800acd2:	b190      	cbz	r0, 800acfa <__swbuf_r+0x92>
 800acd4:	e00f      	b.n	800acf6 <__swbuf_r+0x8e>
 800acd6:	4b0b      	ldr	r3, [pc, #44]	; (800ad04 <__swbuf_r+0x9c>)
 800acd8:	429c      	cmp	r4, r3
 800acda:	d101      	bne.n	800ace0 <__swbuf_r+0x78>
 800acdc:	68ac      	ldr	r4, [r5, #8]
 800acde:	e7d0      	b.n	800ac82 <__swbuf_r+0x1a>
 800ace0:	4b09      	ldr	r3, [pc, #36]	; (800ad08 <__swbuf_r+0xa0>)
 800ace2:	429c      	cmp	r4, r3
 800ace4:	bf08      	it	eq
 800ace6:	68ec      	ldreq	r4, [r5, #12]
 800ace8:	e7cb      	b.n	800ac82 <__swbuf_r+0x1a>
 800acea:	4621      	mov	r1, r4
 800acec:	4628      	mov	r0, r5
 800acee:	f000 f81f 	bl	800ad30 <__swsetup_r>
 800acf2:	2800      	cmp	r0, #0
 800acf4:	d0cc      	beq.n	800ac90 <__swbuf_r+0x28>
 800acf6:	f04f 37ff 	mov.w	r7, #4294967295
 800acfa:	4638      	mov	r0, r7
 800acfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acfe:	bf00      	nop
 800ad00:	0800b934 	.word	0x0800b934
 800ad04:	0800b954 	.word	0x0800b954
 800ad08:	0800b914 	.word	0x0800b914

0800ad0c <_write_r>:
 800ad0c:	b538      	push	{r3, r4, r5, lr}
 800ad0e:	4605      	mov	r5, r0
 800ad10:	4608      	mov	r0, r1
 800ad12:	4611      	mov	r1, r2
 800ad14:	2200      	movs	r2, #0
 800ad16:	4c05      	ldr	r4, [pc, #20]	; (800ad2c <_write_r+0x20>)
 800ad18:	6022      	str	r2, [r4, #0]
 800ad1a:	461a      	mov	r2, r3
 800ad1c:	f7f7 fa04 	bl	8002128 <_write>
 800ad20:	1c43      	adds	r3, r0, #1
 800ad22:	d102      	bne.n	800ad2a <_write_r+0x1e>
 800ad24:	6823      	ldr	r3, [r4, #0]
 800ad26:	b103      	cbz	r3, 800ad2a <_write_r+0x1e>
 800ad28:	602b      	str	r3, [r5, #0]
 800ad2a:	bd38      	pop	{r3, r4, r5, pc}
 800ad2c:	200015c4 	.word	0x200015c4

0800ad30 <__swsetup_r>:
 800ad30:	4b32      	ldr	r3, [pc, #200]	; (800adfc <__swsetup_r+0xcc>)
 800ad32:	b570      	push	{r4, r5, r6, lr}
 800ad34:	681d      	ldr	r5, [r3, #0]
 800ad36:	4606      	mov	r6, r0
 800ad38:	460c      	mov	r4, r1
 800ad3a:	b125      	cbz	r5, 800ad46 <__swsetup_r+0x16>
 800ad3c:	69ab      	ldr	r3, [r5, #24]
 800ad3e:	b913      	cbnz	r3, 800ad46 <__swsetup_r+0x16>
 800ad40:	4628      	mov	r0, r5
 800ad42:	f7ff f9b5 	bl	800a0b0 <__sinit>
 800ad46:	4b2e      	ldr	r3, [pc, #184]	; (800ae00 <__swsetup_r+0xd0>)
 800ad48:	429c      	cmp	r4, r3
 800ad4a:	d10f      	bne.n	800ad6c <__swsetup_r+0x3c>
 800ad4c:	686c      	ldr	r4, [r5, #4]
 800ad4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad52:	b29a      	uxth	r2, r3
 800ad54:	0715      	lsls	r5, r2, #28
 800ad56:	d42c      	bmi.n	800adb2 <__swsetup_r+0x82>
 800ad58:	06d0      	lsls	r0, r2, #27
 800ad5a:	d411      	bmi.n	800ad80 <__swsetup_r+0x50>
 800ad5c:	2209      	movs	r2, #9
 800ad5e:	6032      	str	r2, [r6, #0]
 800ad60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad64:	81a3      	strh	r3, [r4, #12]
 800ad66:	f04f 30ff 	mov.w	r0, #4294967295
 800ad6a:	e03e      	b.n	800adea <__swsetup_r+0xba>
 800ad6c:	4b25      	ldr	r3, [pc, #148]	; (800ae04 <__swsetup_r+0xd4>)
 800ad6e:	429c      	cmp	r4, r3
 800ad70:	d101      	bne.n	800ad76 <__swsetup_r+0x46>
 800ad72:	68ac      	ldr	r4, [r5, #8]
 800ad74:	e7eb      	b.n	800ad4e <__swsetup_r+0x1e>
 800ad76:	4b24      	ldr	r3, [pc, #144]	; (800ae08 <__swsetup_r+0xd8>)
 800ad78:	429c      	cmp	r4, r3
 800ad7a:	bf08      	it	eq
 800ad7c:	68ec      	ldreq	r4, [r5, #12]
 800ad7e:	e7e6      	b.n	800ad4e <__swsetup_r+0x1e>
 800ad80:	0751      	lsls	r1, r2, #29
 800ad82:	d512      	bpl.n	800adaa <__swsetup_r+0x7a>
 800ad84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad86:	b141      	cbz	r1, 800ad9a <__swsetup_r+0x6a>
 800ad88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad8c:	4299      	cmp	r1, r3
 800ad8e:	d002      	beq.n	800ad96 <__swsetup_r+0x66>
 800ad90:	4630      	mov	r0, r6
 800ad92:	f7ff fd31 	bl	800a7f8 <_free_r>
 800ad96:	2300      	movs	r3, #0
 800ad98:	6363      	str	r3, [r4, #52]	; 0x34
 800ad9a:	89a3      	ldrh	r3, [r4, #12]
 800ad9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ada0:	81a3      	strh	r3, [r4, #12]
 800ada2:	2300      	movs	r3, #0
 800ada4:	6063      	str	r3, [r4, #4]
 800ada6:	6923      	ldr	r3, [r4, #16]
 800ada8:	6023      	str	r3, [r4, #0]
 800adaa:	89a3      	ldrh	r3, [r4, #12]
 800adac:	f043 0308 	orr.w	r3, r3, #8
 800adb0:	81a3      	strh	r3, [r4, #12]
 800adb2:	6923      	ldr	r3, [r4, #16]
 800adb4:	b94b      	cbnz	r3, 800adca <__swsetup_r+0x9a>
 800adb6:	89a3      	ldrh	r3, [r4, #12]
 800adb8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800adbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800adc0:	d003      	beq.n	800adca <__swsetup_r+0x9a>
 800adc2:	4621      	mov	r1, r4
 800adc4:	4630      	mov	r0, r6
 800adc6:	f000 f917 	bl	800aff8 <__smakebuf_r>
 800adca:	89a2      	ldrh	r2, [r4, #12]
 800adcc:	f012 0301 	ands.w	r3, r2, #1
 800add0:	d00c      	beq.n	800adec <__swsetup_r+0xbc>
 800add2:	2300      	movs	r3, #0
 800add4:	60a3      	str	r3, [r4, #8]
 800add6:	6963      	ldr	r3, [r4, #20]
 800add8:	425b      	negs	r3, r3
 800adda:	61a3      	str	r3, [r4, #24]
 800addc:	6923      	ldr	r3, [r4, #16]
 800adde:	b953      	cbnz	r3, 800adf6 <__swsetup_r+0xc6>
 800ade0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ade4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800ade8:	d1ba      	bne.n	800ad60 <__swsetup_r+0x30>
 800adea:	bd70      	pop	{r4, r5, r6, pc}
 800adec:	0792      	lsls	r2, r2, #30
 800adee:	bf58      	it	pl
 800adf0:	6963      	ldrpl	r3, [r4, #20]
 800adf2:	60a3      	str	r3, [r4, #8]
 800adf4:	e7f2      	b.n	800addc <__swsetup_r+0xac>
 800adf6:	2000      	movs	r0, #0
 800adf8:	e7f7      	b.n	800adea <__swsetup_r+0xba>
 800adfa:	bf00      	nop
 800adfc:	2000017c 	.word	0x2000017c
 800ae00:	0800b934 	.word	0x0800b934
 800ae04:	0800b954 	.word	0x0800b954
 800ae08:	0800b914 	.word	0x0800b914

0800ae0c <_close_r>:
 800ae0c:	b538      	push	{r3, r4, r5, lr}
 800ae0e:	2300      	movs	r3, #0
 800ae10:	4c05      	ldr	r4, [pc, #20]	; (800ae28 <_close_r+0x1c>)
 800ae12:	4605      	mov	r5, r0
 800ae14:	4608      	mov	r0, r1
 800ae16:	6023      	str	r3, [r4, #0]
 800ae18:	f7f7 fa8f 	bl	800233a <_close>
 800ae1c:	1c43      	adds	r3, r0, #1
 800ae1e:	d102      	bne.n	800ae26 <_close_r+0x1a>
 800ae20:	6823      	ldr	r3, [r4, #0]
 800ae22:	b103      	cbz	r3, 800ae26 <_close_r+0x1a>
 800ae24:	602b      	str	r3, [r5, #0]
 800ae26:	bd38      	pop	{r3, r4, r5, pc}
 800ae28:	200015c4 	.word	0x200015c4

0800ae2c <__sflush_r>:
 800ae2c:	898a      	ldrh	r2, [r1, #12]
 800ae2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae32:	4605      	mov	r5, r0
 800ae34:	0710      	lsls	r0, r2, #28
 800ae36:	460c      	mov	r4, r1
 800ae38:	d458      	bmi.n	800aeec <__sflush_r+0xc0>
 800ae3a:	684b      	ldr	r3, [r1, #4]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	dc05      	bgt.n	800ae4c <__sflush_r+0x20>
 800ae40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	dc02      	bgt.n	800ae4c <__sflush_r+0x20>
 800ae46:	2000      	movs	r0, #0
 800ae48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae4e:	2e00      	cmp	r6, #0
 800ae50:	d0f9      	beq.n	800ae46 <__sflush_r+0x1a>
 800ae52:	2300      	movs	r3, #0
 800ae54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ae58:	682f      	ldr	r7, [r5, #0]
 800ae5a:	6a21      	ldr	r1, [r4, #32]
 800ae5c:	602b      	str	r3, [r5, #0]
 800ae5e:	d032      	beq.n	800aec6 <__sflush_r+0x9a>
 800ae60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ae62:	89a3      	ldrh	r3, [r4, #12]
 800ae64:	075a      	lsls	r2, r3, #29
 800ae66:	d505      	bpl.n	800ae74 <__sflush_r+0x48>
 800ae68:	6863      	ldr	r3, [r4, #4]
 800ae6a:	1ac0      	subs	r0, r0, r3
 800ae6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ae6e:	b10b      	cbz	r3, 800ae74 <__sflush_r+0x48>
 800ae70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ae72:	1ac0      	subs	r0, r0, r3
 800ae74:	2300      	movs	r3, #0
 800ae76:	4602      	mov	r2, r0
 800ae78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae7a:	6a21      	ldr	r1, [r4, #32]
 800ae7c:	4628      	mov	r0, r5
 800ae7e:	47b0      	blx	r6
 800ae80:	1c43      	adds	r3, r0, #1
 800ae82:	89a3      	ldrh	r3, [r4, #12]
 800ae84:	d106      	bne.n	800ae94 <__sflush_r+0x68>
 800ae86:	6829      	ldr	r1, [r5, #0]
 800ae88:	291d      	cmp	r1, #29
 800ae8a:	d848      	bhi.n	800af1e <__sflush_r+0xf2>
 800ae8c:	4a29      	ldr	r2, [pc, #164]	; (800af34 <__sflush_r+0x108>)
 800ae8e:	40ca      	lsrs	r2, r1
 800ae90:	07d6      	lsls	r6, r2, #31
 800ae92:	d544      	bpl.n	800af1e <__sflush_r+0xf2>
 800ae94:	2200      	movs	r2, #0
 800ae96:	6062      	str	r2, [r4, #4]
 800ae98:	6922      	ldr	r2, [r4, #16]
 800ae9a:	04d9      	lsls	r1, r3, #19
 800ae9c:	6022      	str	r2, [r4, #0]
 800ae9e:	d504      	bpl.n	800aeaa <__sflush_r+0x7e>
 800aea0:	1c42      	adds	r2, r0, #1
 800aea2:	d101      	bne.n	800aea8 <__sflush_r+0x7c>
 800aea4:	682b      	ldr	r3, [r5, #0]
 800aea6:	b903      	cbnz	r3, 800aeaa <__sflush_r+0x7e>
 800aea8:	6560      	str	r0, [r4, #84]	; 0x54
 800aeaa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aeac:	602f      	str	r7, [r5, #0]
 800aeae:	2900      	cmp	r1, #0
 800aeb0:	d0c9      	beq.n	800ae46 <__sflush_r+0x1a>
 800aeb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aeb6:	4299      	cmp	r1, r3
 800aeb8:	d002      	beq.n	800aec0 <__sflush_r+0x94>
 800aeba:	4628      	mov	r0, r5
 800aebc:	f7ff fc9c 	bl	800a7f8 <_free_r>
 800aec0:	2000      	movs	r0, #0
 800aec2:	6360      	str	r0, [r4, #52]	; 0x34
 800aec4:	e7c0      	b.n	800ae48 <__sflush_r+0x1c>
 800aec6:	2301      	movs	r3, #1
 800aec8:	4628      	mov	r0, r5
 800aeca:	47b0      	blx	r6
 800aecc:	1c41      	adds	r1, r0, #1
 800aece:	d1c8      	bne.n	800ae62 <__sflush_r+0x36>
 800aed0:	682b      	ldr	r3, [r5, #0]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d0c5      	beq.n	800ae62 <__sflush_r+0x36>
 800aed6:	2b1d      	cmp	r3, #29
 800aed8:	d001      	beq.n	800aede <__sflush_r+0xb2>
 800aeda:	2b16      	cmp	r3, #22
 800aedc:	d101      	bne.n	800aee2 <__sflush_r+0xb6>
 800aede:	602f      	str	r7, [r5, #0]
 800aee0:	e7b1      	b.n	800ae46 <__sflush_r+0x1a>
 800aee2:	89a3      	ldrh	r3, [r4, #12]
 800aee4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aee8:	81a3      	strh	r3, [r4, #12]
 800aeea:	e7ad      	b.n	800ae48 <__sflush_r+0x1c>
 800aeec:	690f      	ldr	r7, [r1, #16]
 800aeee:	2f00      	cmp	r7, #0
 800aef0:	d0a9      	beq.n	800ae46 <__sflush_r+0x1a>
 800aef2:	0793      	lsls	r3, r2, #30
 800aef4:	bf18      	it	ne
 800aef6:	2300      	movne	r3, #0
 800aef8:	680e      	ldr	r6, [r1, #0]
 800aefa:	bf08      	it	eq
 800aefc:	694b      	ldreq	r3, [r1, #20]
 800aefe:	eba6 0807 	sub.w	r8, r6, r7
 800af02:	600f      	str	r7, [r1, #0]
 800af04:	608b      	str	r3, [r1, #8]
 800af06:	f1b8 0f00 	cmp.w	r8, #0
 800af0a:	dd9c      	ble.n	800ae46 <__sflush_r+0x1a>
 800af0c:	4643      	mov	r3, r8
 800af0e:	463a      	mov	r2, r7
 800af10:	6a21      	ldr	r1, [r4, #32]
 800af12:	4628      	mov	r0, r5
 800af14:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800af16:	47b0      	blx	r6
 800af18:	2800      	cmp	r0, #0
 800af1a:	dc06      	bgt.n	800af2a <__sflush_r+0xfe>
 800af1c:	89a3      	ldrh	r3, [r4, #12]
 800af1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af22:	81a3      	strh	r3, [r4, #12]
 800af24:	f04f 30ff 	mov.w	r0, #4294967295
 800af28:	e78e      	b.n	800ae48 <__sflush_r+0x1c>
 800af2a:	4407      	add	r7, r0
 800af2c:	eba8 0800 	sub.w	r8, r8, r0
 800af30:	e7e9      	b.n	800af06 <__sflush_r+0xda>
 800af32:	bf00      	nop
 800af34:	20400001 	.word	0x20400001

0800af38 <_fflush_r>:
 800af38:	b538      	push	{r3, r4, r5, lr}
 800af3a:	690b      	ldr	r3, [r1, #16]
 800af3c:	4605      	mov	r5, r0
 800af3e:	460c      	mov	r4, r1
 800af40:	b1db      	cbz	r3, 800af7a <_fflush_r+0x42>
 800af42:	b118      	cbz	r0, 800af4c <_fflush_r+0x14>
 800af44:	6983      	ldr	r3, [r0, #24]
 800af46:	b90b      	cbnz	r3, 800af4c <_fflush_r+0x14>
 800af48:	f7ff f8b2 	bl	800a0b0 <__sinit>
 800af4c:	4b0c      	ldr	r3, [pc, #48]	; (800af80 <_fflush_r+0x48>)
 800af4e:	429c      	cmp	r4, r3
 800af50:	d109      	bne.n	800af66 <_fflush_r+0x2e>
 800af52:	686c      	ldr	r4, [r5, #4]
 800af54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af58:	b17b      	cbz	r3, 800af7a <_fflush_r+0x42>
 800af5a:	4621      	mov	r1, r4
 800af5c:	4628      	mov	r0, r5
 800af5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af62:	f7ff bf63 	b.w	800ae2c <__sflush_r>
 800af66:	4b07      	ldr	r3, [pc, #28]	; (800af84 <_fflush_r+0x4c>)
 800af68:	429c      	cmp	r4, r3
 800af6a:	d101      	bne.n	800af70 <_fflush_r+0x38>
 800af6c:	68ac      	ldr	r4, [r5, #8]
 800af6e:	e7f1      	b.n	800af54 <_fflush_r+0x1c>
 800af70:	4b05      	ldr	r3, [pc, #20]	; (800af88 <_fflush_r+0x50>)
 800af72:	429c      	cmp	r4, r3
 800af74:	bf08      	it	eq
 800af76:	68ec      	ldreq	r4, [r5, #12]
 800af78:	e7ec      	b.n	800af54 <_fflush_r+0x1c>
 800af7a:	2000      	movs	r0, #0
 800af7c:	bd38      	pop	{r3, r4, r5, pc}
 800af7e:	bf00      	nop
 800af80:	0800b934 	.word	0x0800b934
 800af84:	0800b954 	.word	0x0800b954
 800af88:	0800b914 	.word	0x0800b914

0800af8c <_lseek_r>:
 800af8c:	b538      	push	{r3, r4, r5, lr}
 800af8e:	4605      	mov	r5, r0
 800af90:	4608      	mov	r0, r1
 800af92:	4611      	mov	r1, r2
 800af94:	2200      	movs	r2, #0
 800af96:	4c05      	ldr	r4, [pc, #20]	; (800afac <_lseek_r+0x20>)
 800af98:	6022      	str	r2, [r4, #0]
 800af9a:	461a      	mov	r2, r3
 800af9c:	f7f7 f9f1 	bl	8002382 <_lseek>
 800afa0:	1c43      	adds	r3, r0, #1
 800afa2:	d102      	bne.n	800afaa <_lseek_r+0x1e>
 800afa4:	6823      	ldr	r3, [r4, #0]
 800afa6:	b103      	cbz	r3, 800afaa <_lseek_r+0x1e>
 800afa8:	602b      	str	r3, [r5, #0]
 800afaa:	bd38      	pop	{r3, r4, r5, pc}
 800afac:	200015c4 	.word	0x200015c4

0800afb0 <__swhatbuf_r>:
 800afb0:	b570      	push	{r4, r5, r6, lr}
 800afb2:	460e      	mov	r6, r1
 800afb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afb8:	b096      	sub	sp, #88	; 0x58
 800afba:	2900      	cmp	r1, #0
 800afbc:	4614      	mov	r4, r2
 800afbe:	461d      	mov	r5, r3
 800afc0:	da07      	bge.n	800afd2 <__swhatbuf_r+0x22>
 800afc2:	2300      	movs	r3, #0
 800afc4:	602b      	str	r3, [r5, #0]
 800afc6:	89b3      	ldrh	r3, [r6, #12]
 800afc8:	061a      	lsls	r2, r3, #24
 800afca:	d410      	bmi.n	800afee <__swhatbuf_r+0x3e>
 800afcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800afd0:	e00e      	b.n	800aff0 <__swhatbuf_r+0x40>
 800afd2:	466a      	mov	r2, sp
 800afd4:	f000 f884 	bl	800b0e0 <_fstat_r>
 800afd8:	2800      	cmp	r0, #0
 800afda:	dbf2      	blt.n	800afc2 <__swhatbuf_r+0x12>
 800afdc:	9a01      	ldr	r2, [sp, #4]
 800afde:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800afe2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800afe6:	425a      	negs	r2, r3
 800afe8:	415a      	adcs	r2, r3
 800afea:	602a      	str	r2, [r5, #0]
 800afec:	e7ee      	b.n	800afcc <__swhatbuf_r+0x1c>
 800afee:	2340      	movs	r3, #64	; 0x40
 800aff0:	2000      	movs	r0, #0
 800aff2:	6023      	str	r3, [r4, #0]
 800aff4:	b016      	add	sp, #88	; 0x58
 800aff6:	bd70      	pop	{r4, r5, r6, pc}

0800aff8 <__smakebuf_r>:
 800aff8:	898b      	ldrh	r3, [r1, #12]
 800affa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800affc:	079d      	lsls	r5, r3, #30
 800affe:	4606      	mov	r6, r0
 800b000:	460c      	mov	r4, r1
 800b002:	d507      	bpl.n	800b014 <__smakebuf_r+0x1c>
 800b004:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b008:	6023      	str	r3, [r4, #0]
 800b00a:	6123      	str	r3, [r4, #16]
 800b00c:	2301      	movs	r3, #1
 800b00e:	6163      	str	r3, [r4, #20]
 800b010:	b002      	add	sp, #8
 800b012:	bd70      	pop	{r4, r5, r6, pc}
 800b014:	ab01      	add	r3, sp, #4
 800b016:	466a      	mov	r2, sp
 800b018:	f7ff ffca 	bl	800afb0 <__swhatbuf_r>
 800b01c:	9900      	ldr	r1, [sp, #0]
 800b01e:	4605      	mov	r5, r0
 800b020:	4630      	mov	r0, r6
 800b022:	f7ff fc35 	bl	800a890 <_malloc_r>
 800b026:	b948      	cbnz	r0, 800b03c <__smakebuf_r+0x44>
 800b028:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b02c:	059a      	lsls	r2, r3, #22
 800b02e:	d4ef      	bmi.n	800b010 <__smakebuf_r+0x18>
 800b030:	f023 0303 	bic.w	r3, r3, #3
 800b034:	f043 0302 	orr.w	r3, r3, #2
 800b038:	81a3      	strh	r3, [r4, #12]
 800b03a:	e7e3      	b.n	800b004 <__smakebuf_r+0xc>
 800b03c:	4b0d      	ldr	r3, [pc, #52]	; (800b074 <__smakebuf_r+0x7c>)
 800b03e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b040:	89a3      	ldrh	r3, [r4, #12]
 800b042:	6020      	str	r0, [r4, #0]
 800b044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b048:	81a3      	strh	r3, [r4, #12]
 800b04a:	9b00      	ldr	r3, [sp, #0]
 800b04c:	6120      	str	r0, [r4, #16]
 800b04e:	6163      	str	r3, [r4, #20]
 800b050:	9b01      	ldr	r3, [sp, #4]
 800b052:	b15b      	cbz	r3, 800b06c <__smakebuf_r+0x74>
 800b054:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b058:	4630      	mov	r0, r6
 800b05a:	f000 f853 	bl	800b104 <_isatty_r>
 800b05e:	b128      	cbz	r0, 800b06c <__smakebuf_r+0x74>
 800b060:	89a3      	ldrh	r3, [r4, #12]
 800b062:	f023 0303 	bic.w	r3, r3, #3
 800b066:	f043 0301 	orr.w	r3, r3, #1
 800b06a:	81a3      	strh	r3, [r4, #12]
 800b06c:	89a3      	ldrh	r3, [r4, #12]
 800b06e:	431d      	orrs	r5, r3
 800b070:	81a5      	strh	r5, [r4, #12]
 800b072:	e7cd      	b.n	800b010 <__smakebuf_r+0x18>
 800b074:	0800a079 	.word	0x0800a079

0800b078 <__ascii_mbtowc>:
 800b078:	b082      	sub	sp, #8
 800b07a:	b901      	cbnz	r1, 800b07e <__ascii_mbtowc+0x6>
 800b07c:	a901      	add	r1, sp, #4
 800b07e:	b142      	cbz	r2, 800b092 <__ascii_mbtowc+0x1a>
 800b080:	b14b      	cbz	r3, 800b096 <__ascii_mbtowc+0x1e>
 800b082:	7813      	ldrb	r3, [r2, #0]
 800b084:	600b      	str	r3, [r1, #0]
 800b086:	7812      	ldrb	r2, [r2, #0]
 800b088:	1c10      	adds	r0, r2, #0
 800b08a:	bf18      	it	ne
 800b08c:	2001      	movne	r0, #1
 800b08e:	b002      	add	sp, #8
 800b090:	4770      	bx	lr
 800b092:	4610      	mov	r0, r2
 800b094:	e7fb      	b.n	800b08e <__ascii_mbtowc+0x16>
 800b096:	f06f 0001 	mvn.w	r0, #1
 800b09a:	e7f8      	b.n	800b08e <__ascii_mbtowc+0x16>

0800b09c <__malloc_lock>:
 800b09c:	4770      	bx	lr

0800b09e <__malloc_unlock>:
 800b09e:	4770      	bx	lr

0800b0a0 <_read_r>:
 800b0a0:	b538      	push	{r3, r4, r5, lr}
 800b0a2:	4605      	mov	r5, r0
 800b0a4:	4608      	mov	r0, r1
 800b0a6:	4611      	mov	r1, r2
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	4c05      	ldr	r4, [pc, #20]	; (800b0c0 <_read_r+0x20>)
 800b0ac:	6022      	str	r2, [r4, #0]
 800b0ae:	461a      	mov	r2, r3
 800b0b0:	f7f7 f926 	bl	8002300 <_read>
 800b0b4:	1c43      	adds	r3, r0, #1
 800b0b6:	d102      	bne.n	800b0be <_read_r+0x1e>
 800b0b8:	6823      	ldr	r3, [r4, #0]
 800b0ba:	b103      	cbz	r3, 800b0be <_read_r+0x1e>
 800b0bc:	602b      	str	r3, [r5, #0]
 800b0be:	bd38      	pop	{r3, r4, r5, pc}
 800b0c0:	200015c4 	.word	0x200015c4

0800b0c4 <__ascii_wctomb>:
 800b0c4:	b149      	cbz	r1, 800b0da <__ascii_wctomb+0x16>
 800b0c6:	2aff      	cmp	r2, #255	; 0xff
 800b0c8:	bf8b      	itete	hi
 800b0ca:	238a      	movhi	r3, #138	; 0x8a
 800b0cc:	700a      	strbls	r2, [r1, #0]
 800b0ce:	6003      	strhi	r3, [r0, #0]
 800b0d0:	2001      	movls	r0, #1
 800b0d2:	bf88      	it	hi
 800b0d4:	f04f 30ff 	movhi.w	r0, #4294967295
 800b0d8:	4770      	bx	lr
 800b0da:	4608      	mov	r0, r1
 800b0dc:	4770      	bx	lr
	...

0800b0e0 <_fstat_r>:
 800b0e0:	b538      	push	{r3, r4, r5, lr}
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	4c06      	ldr	r4, [pc, #24]	; (800b100 <_fstat_r+0x20>)
 800b0e6:	4605      	mov	r5, r0
 800b0e8:	4608      	mov	r0, r1
 800b0ea:	4611      	mov	r1, r2
 800b0ec:	6023      	str	r3, [r4, #0]
 800b0ee:	f7f7 f92f 	bl	8002350 <_fstat>
 800b0f2:	1c43      	adds	r3, r0, #1
 800b0f4:	d102      	bne.n	800b0fc <_fstat_r+0x1c>
 800b0f6:	6823      	ldr	r3, [r4, #0]
 800b0f8:	b103      	cbz	r3, 800b0fc <_fstat_r+0x1c>
 800b0fa:	602b      	str	r3, [r5, #0]
 800b0fc:	bd38      	pop	{r3, r4, r5, pc}
 800b0fe:	bf00      	nop
 800b100:	200015c4 	.word	0x200015c4

0800b104 <_isatty_r>:
 800b104:	b538      	push	{r3, r4, r5, lr}
 800b106:	2300      	movs	r3, #0
 800b108:	4c05      	ldr	r4, [pc, #20]	; (800b120 <_isatty_r+0x1c>)
 800b10a:	4605      	mov	r5, r0
 800b10c:	4608      	mov	r0, r1
 800b10e:	6023      	str	r3, [r4, #0]
 800b110:	f7f7 f92d 	bl	800236e <_isatty>
 800b114:	1c43      	adds	r3, r0, #1
 800b116:	d102      	bne.n	800b11e <_isatty_r+0x1a>
 800b118:	6823      	ldr	r3, [r4, #0]
 800b11a:	b103      	cbz	r3, 800b11e <_isatty_r+0x1a>
 800b11c:	602b      	str	r3, [r5, #0]
 800b11e:	bd38      	pop	{r3, r4, r5, pc}
 800b120:	200015c4 	.word	0x200015c4
 800b124:	00000000 	.word	0x00000000

0800b128 <atan>:
 800b128:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b12c:	4bb6      	ldr	r3, [pc, #728]	; (800b408 <atan+0x2e0>)
 800b12e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b132:	429e      	cmp	r6, r3
 800b134:	4604      	mov	r4, r0
 800b136:	460d      	mov	r5, r1
 800b138:	468b      	mov	fp, r1
 800b13a:	dd17      	ble.n	800b16c <atan+0x44>
 800b13c:	4bb3      	ldr	r3, [pc, #716]	; (800b40c <atan+0x2e4>)
 800b13e:	429e      	cmp	r6, r3
 800b140:	dc01      	bgt.n	800b146 <atan+0x1e>
 800b142:	d109      	bne.n	800b158 <atan+0x30>
 800b144:	b140      	cbz	r0, 800b158 <atan+0x30>
 800b146:	4622      	mov	r2, r4
 800b148:	462b      	mov	r3, r5
 800b14a:	4620      	mov	r0, r4
 800b14c:	4629      	mov	r1, r5
 800b14e:	f7f5 f80d 	bl	800016c <__adddf3>
 800b152:	4604      	mov	r4, r0
 800b154:	460d      	mov	r5, r1
 800b156:	e005      	b.n	800b164 <atan+0x3c>
 800b158:	f1bb 0f00 	cmp.w	fp, #0
 800b15c:	4cac      	ldr	r4, [pc, #688]	; (800b410 <atan+0x2e8>)
 800b15e:	f340 8121 	ble.w	800b3a4 <atan+0x27c>
 800b162:	4dac      	ldr	r5, [pc, #688]	; (800b414 <atan+0x2ec>)
 800b164:	4620      	mov	r0, r4
 800b166:	4629      	mov	r1, r5
 800b168:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b16c:	4baa      	ldr	r3, [pc, #680]	; (800b418 <atan+0x2f0>)
 800b16e:	429e      	cmp	r6, r3
 800b170:	dc11      	bgt.n	800b196 <atan+0x6e>
 800b172:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b176:	429e      	cmp	r6, r3
 800b178:	dc0a      	bgt.n	800b190 <atan+0x68>
 800b17a:	a38b      	add	r3, pc, #556	; (adr r3, 800b3a8 <atan+0x280>)
 800b17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b180:	f7f4 fff4 	bl	800016c <__adddf3>
 800b184:	2200      	movs	r2, #0
 800b186:	4ba5      	ldr	r3, [pc, #660]	; (800b41c <atan+0x2f4>)
 800b188:	f7f5 fc36 	bl	80009f8 <__aeabi_dcmpgt>
 800b18c:	2800      	cmp	r0, #0
 800b18e:	d1e9      	bne.n	800b164 <atan+0x3c>
 800b190:	f04f 3aff 	mov.w	sl, #4294967295
 800b194:	e027      	b.n	800b1e6 <atan+0xbe>
 800b196:	f000 f951 	bl	800b43c <fabs>
 800b19a:	4ba1      	ldr	r3, [pc, #644]	; (800b420 <atan+0x2f8>)
 800b19c:	4604      	mov	r4, r0
 800b19e:	429e      	cmp	r6, r3
 800b1a0:	460d      	mov	r5, r1
 800b1a2:	f300 80b8 	bgt.w	800b316 <atan+0x1ee>
 800b1a6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b1aa:	429e      	cmp	r6, r3
 800b1ac:	f300 809c 	bgt.w	800b2e8 <atan+0x1c0>
 800b1b0:	4602      	mov	r2, r0
 800b1b2:	460b      	mov	r3, r1
 800b1b4:	f7f4 ffda 	bl	800016c <__adddf3>
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	4b98      	ldr	r3, [pc, #608]	; (800b41c <atan+0x2f4>)
 800b1bc:	f7f4 ffd4 	bl	8000168 <__aeabi_dsub>
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	4606      	mov	r6, r0
 800b1c4:	460f      	mov	r7, r1
 800b1c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b1ca:	4620      	mov	r0, r4
 800b1cc:	4629      	mov	r1, r5
 800b1ce:	f7f4 ffcd 	bl	800016c <__adddf3>
 800b1d2:	4602      	mov	r2, r0
 800b1d4:	460b      	mov	r3, r1
 800b1d6:	4630      	mov	r0, r6
 800b1d8:	4639      	mov	r1, r7
 800b1da:	f7f5 faa7 	bl	800072c <__aeabi_ddiv>
 800b1de:	f04f 0a00 	mov.w	sl, #0
 800b1e2:	4604      	mov	r4, r0
 800b1e4:	460d      	mov	r5, r1
 800b1e6:	4622      	mov	r2, r4
 800b1e8:	462b      	mov	r3, r5
 800b1ea:	4620      	mov	r0, r4
 800b1ec:	4629      	mov	r1, r5
 800b1ee:	f7f5 f973 	bl	80004d8 <__aeabi_dmul>
 800b1f2:	4602      	mov	r2, r0
 800b1f4:	460b      	mov	r3, r1
 800b1f6:	4680      	mov	r8, r0
 800b1f8:	4689      	mov	r9, r1
 800b1fa:	f7f5 f96d 	bl	80004d8 <__aeabi_dmul>
 800b1fe:	a36c      	add	r3, pc, #432	; (adr r3, 800b3b0 <atan+0x288>)
 800b200:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b204:	4606      	mov	r6, r0
 800b206:	460f      	mov	r7, r1
 800b208:	f7f5 f966 	bl	80004d8 <__aeabi_dmul>
 800b20c:	a36a      	add	r3, pc, #424	; (adr r3, 800b3b8 <atan+0x290>)
 800b20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b212:	f7f4 ffab 	bl	800016c <__adddf3>
 800b216:	4632      	mov	r2, r6
 800b218:	463b      	mov	r3, r7
 800b21a:	f7f5 f95d 	bl	80004d8 <__aeabi_dmul>
 800b21e:	a368      	add	r3, pc, #416	; (adr r3, 800b3c0 <atan+0x298>)
 800b220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b224:	f7f4 ffa2 	bl	800016c <__adddf3>
 800b228:	4632      	mov	r2, r6
 800b22a:	463b      	mov	r3, r7
 800b22c:	f7f5 f954 	bl	80004d8 <__aeabi_dmul>
 800b230:	a365      	add	r3, pc, #404	; (adr r3, 800b3c8 <atan+0x2a0>)
 800b232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b236:	f7f4 ff99 	bl	800016c <__adddf3>
 800b23a:	4632      	mov	r2, r6
 800b23c:	463b      	mov	r3, r7
 800b23e:	f7f5 f94b 	bl	80004d8 <__aeabi_dmul>
 800b242:	a363      	add	r3, pc, #396	; (adr r3, 800b3d0 <atan+0x2a8>)
 800b244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b248:	f7f4 ff90 	bl	800016c <__adddf3>
 800b24c:	4632      	mov	r2, r6
 800b24e:	463b      	mov	r3, r7
 800b250:	f7f5 f942 	bl	80004d8 <__aeabi_dmul>
 800b254:	a360      	add	r3, pc, #384	; (adr r3, 800b3d8 <atan+0x2b0>)
 800b256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b25a:	f7f4 ff87 	bl	800016c <__adddf3>
 800b25e:	4642      	mov	r2, r8
 800b260:	464b      	mov	r3, r9
 800b262:	f7f5 f939 	bl	80004d8 <__aeabi_dmul>
 800b266:	a35e      	add	r3, pc, #376	; (adr r3, 800b3e0 <atan+0x2b8>)
 800b268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b26c:	4680      	mov	r8, r0
 800b26e:	4689      	mov	r9, r1
 800b270:	4630      	mov	r0, r6
 800b272:	4639      	mov	r1, r7
 800b274:	f7f5 f930 	bl	80004d8 <__aeabi_dmul>
 800b278:	a35b      	add	r3, pc, #364	; (adr r3, 800b3e8 <atan+0x2c0>)
 800b27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b27e:	f7f4 ff73 	bl	8000168 <__aeabi_dsub>
 800b282:	4632      	mov	r2, r6
 800b284:	463b      	mov	r3, r7
 800b286:	f7f5 f927 	bl	80004d8 <__aeabi_dmul>
 800b28a:	a359      	add	r3, pc, #356	; (adr r3, 800b3f0 <atan+0x2c8>)
 800b28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b290:	f7f4 ff6a 	bl	8000168 <__aeabi_dsub>
 800b294:	4632      	mov	r2, r6
 800b296:	463b      	mov	r3, r7
 800b298:	f7f5 f91e 	bl	80004d8 <__aeabi_dmul>
 800b29c:	a356      	add	r3, pc, #344	; (adr r3, 800b3f8 <atan+0x2d0>)
 800b29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2a2:	f7f4 ff61 	bl	8000168 <__aeabi_dsub>
 800b2a6:	4632      	mov	r2, r6
 800b2a8:	463b      	mov	r3, r7
 800b2aa:	f7f5 f915 	bl	80004d8 <__aeabi_dmul>
 800b2ae:	a354      	add	r3, pc, #336	; (adr r3, 800b400 <atan+0x2d8>)
 800b2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b4:	f7f4 ff58 	bl	8000168 <__aeabi_dsub>
 800b2b8:	4632      	mov	r2, r6
 800b2ba:	463b      	mov	r3, r7
 800b2bc:	f7f5 f90c 	bl	80004d8 <__aeabi_dmul>
 800b2c0:	4602      	mov	r2, r0
 800b2c2:	460b      	mov	r3, r1
 800b2c4:	4640      	mov	r0, r8
 800b2c6:	4649      	mov	r1, r9
 800b2c8:	f7f4 ff50 	bl	800016c <__adddf3>
 800b2cc:	4622      	mov	r2, r4
 800b2ce:	462b      	mov	r3, r5
 800b2d0:	f7f5 f902 	bl	80004d8 <__aeabi_dmul>
 800b2d4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b2d8:	4602      	mov	r2, r0
 800b2da:	460b      	mov	r3, r1
 800b2dc:	d144      	bne.n	800b368 <atan+0x240>
 800b2de:	4620      	mov	r0, r4
 800b2e0:	4629      	mov	r1, r5
 800b2e2:	f7f4 ff41 	bl	8000168 <__aeabi_dsub>
 800b2e6:	e734      	b.n	800b152 <atan+0x2a>
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	4b4c      	ldr	r3, [pc, #304]	; (800b41c <atan+0x2f4>)
 800b2ec:	f7f4 ff3c 	bl	8000168 <__aeabi_dsub>
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	4606      	mov	r6, r0
 800b2f4:	460f      	mov	r7, r1
 800b2f6:	4b49      	ldr	r3, [pc, #292]	; (800b41c <atan+0x2f4>)
 800b2f8:	4620      	mov	r0, r4
 800b2fa:	4629      	mov	r1, r5
 800b2fc:	f7f4 ff36 	bl	800016c <__adddf3>
 800b300:	4602      	mov	r2, r0
 800b302:	460b      	mov	r3, r1
 800b304:	4630      	mov	r0, r6
 800b306:	4639      	mov	r1, r7
 800b308:	f7f5 fa10 	bl	800072c <__aeabi_ddiv>
 800b30c:	f04f 0a01 	mov.w	sl, #1
 800b310:	4604      	mov	r4, r0
 800b312:	460d      	mov	r5, r1
 800b314:	e767      	b.n	800b1e6 <atan+0xbe>
 800b316:	4b43      	ldr	r3, [pc, #268]	; (800b424 <atan+0x2fc>)
 800b318:	429e      	cmp	r6, r3
 800b31a:	dc1a      	bgt.n	800b352 <atan+0x22a>
 800b31c:	2200      	movs	r2, #0
 800b31e:	4b42      	ldr	r3, [pc, #264]	; (800b428 <atan+0x300>)
 800b320:	f7f4 ff22 	bl	8000168 <__aeabi_dsub>
 800b324:	2200      	movs	r2, #0
 800b326:	4606      	mov	r6, r0
 800b328:	460f      	mov	r7, r1
 800b32a:	4b3f      	ldr	r3, [pc, #252]	; (800b428 <atan+0x300>)
 800b32c:	4620      	mov	r0, r4
 800b32e:	4629      	mov	r1, r5
 800b330:	f7f5 f8d2 	bl	80004d8 <__aeabi_dmul>
 800b334:	2200      	movs	r2, #0
 800b336:	4b39      	ldr	r3, [pc, #228]	; (800b41c <atan+0x2f4>)
 800b338:	f7f4 ff18 	bl	800016c <__adddf3>
 800b33c:	4602      	mov	r2, r0
 800b33e:	460b      	mov	r3, r1
 800b340:	4630      	mov	r0, r6
 800b342:	4639      	mov	r1, r7
 800b344:	f7f5 f9f2 	bl	800072c <__aeabi_ddiv>
 800b348:	f04f 0a02 	mov.w	sl, #2
 800b34c:	4604      	mov	r4, r0
 800b34e:	460d      	mov	r5, r1
 800b350:	e749      	b.n	800b1e6 <atan+0xbe>
 800b352:	4602      	mov	r2, r0
 800b354:	460b      	mov	r3, r1
 800b356:	2000      	movs	r0, #0
 800b358:	4934      	ldr	r1, [pc, #208]	; (800b42c <atan+0x304>)
 800b35a:	f7f5 f9e7 	bl	800072c <__aeabi_ddiv>
 800b35e:	f04f 0a03 	mov.w	sl, #3
 800b362:	4604      	mov	r4, r0
 800b364:	460d      	mov	r5, r1
 800b366:	e73e      	b.n	800b1e6 <atan+0xbe>
 800b368:	4b31      	ldr	r3, [pc, #196]	; (800b430 <atan+0x308>)
 800b36a:	4e32      	ldr	r6, [pc, #200]	; (800b434 <atan+0x30c>)
 800b36c:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800b370:	4456      	add	r6, sl
 800b372:	449a      	add	sl, r3
 800b374:	e9da 2300 	ldrd	r2, r3, [sl]
 800b378:	f7f4 fef6 	bl	8000168 <__aeabi_dsub>
 800b37c:	4622      	mov	r2, r4
 800b37e:	462b      	mov	r3, r5
 800b380:	f7f4 fef2 	bl	8000168 <__aeabi_dsub>
 800b384:	4602      	mov	r2, r0
 800b386:	460b      	mov	r3, r1
 800b388:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b38c:	f7f4 feec 	bl	8000168 <__aeabi_dsub>
 800b390:	f1bb 0f00 	cmp.w	fp, #0
 800b394:	4604      	mov	r4, r0
 800b396:	460d      	mov	r5, r1
 800b398:	f6bf aee4 	bge.w	800b164 <atan+0x3c>
 800b39c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b3a0:	461d      	mov	r5, r3
 800b3a2:	e6df      	b.n	800b164 <atan+0x3c>
 800b3a4:	4d24      	ldr	r5, [pc, #144]	; (800b438 <atan+0x310>)
 800b3a6:	e6dd      	b.n	800b164 <atan+0x3c>
 800b3a8:	8800759c 	.word	0x8800759c
 800b3ac:	7e37e43c 	.word	0x7e37e43c
 800b3b0:	e322da11 	.word	0xe322da11
 800b3b4:	3f90ad3a 	.word	0x3f90ad3a
 800b3b8:	24760deb 	.word	0x24760deb
 800b3bc:	3fa97b4b 	.word	0x3fa97b4b
 800b3c0:	a0d03d51 	.word	0xa0d03d51
 800b3c4:	3fb10d66 	.word	0x3fb10d66
 800b3c8:	c54c206e 	.word	0xc54c206e
 800b3cc:	3fb745cd 	.word	0x3fb745cd
 800b3d0:	920083ff 	.word	0x920083ff
 800b3d4:	3fc24924 	.word	0x3fc24924
 800b3d8:	5555550d 	.word	0x5555550d
 800b3dc:	3fd55555 	.word	0x3fd55555
 800b3e0:	2c6a6c2f 	.word	0x2c6a6c2f
 800b3e4:	bfa2b444 	.word	0xbfa2b444
 800b3e8:	52defd9a 	.word	0x52defd9a
 800b3ec:	3fadde2d 	.word	0x3fadde2d
 800b3f0:	af749a6d 	.word	0xaf749a6d
 800b3f4:	3fb3b0f2 	.word	0x3fb3b0f2
 800b3f8:	fe231671 	.word	0xfe231671
 800b3fc:	3fbc71c6 	.word	0x3fbc71c6
 800b400:	9998ebc4 	.word	0x9998ebc4
 800b404:	3fc99999 	.word	0x3fc99999
 800b408:	440fffff 	.word	0x440fffff
 800b40c:	7ff00000 	.word	0x7ff00000
 800b410:	54442d18 	.word	0x54442d18
 800b414:	3ff921fb 	.word	0x3ff921fb
 800b418:	3fdbffff 	.word	0x3fdbffff
 800b41c:	3ff00000 	.word	0x3ff00000
 800b420:	3ff2ffff 	.word	0x3ff2ffff
 800b424:	40037fff 	.word	0x40037fff
 800b428:	3ff80000 	.word	0x3ff80000
 800b42c:	bff00000 	.word	0xbff00000
 800b430:	0800bbb0 	.word	0x0800bbb0
 800b434:	0800bb90 	.word	0x0800bb90
 800b438:	bff921fb 	.word	0xbff921fb

0800b43c <fabs>:
 800b43c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b440:	4619      	mov	r1, r3
 800b442:	4770      	bx	lr

0800b444 <atan2>:
 800b444:	f000 b854 	b.w	800b4f0 <__ieee754_atan2>

0800b448 <sqrt>:
 800b448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b44c:	b08b      	sub	sp, #44	; 0x2c
 800b44e:	4604      	mov	r4, r0
 800b450:	460d      	mov	r5, r1
 800b452:	f000 f92b 	bl	800b6ac <__ieee754_sqrt>
 800b456:	4b24      	ldr	r3, [pc, #144]	; (800b4e8 <sqrt+0xa0>)
 800b458:	4680      	mov	r8, r0
 800b45a:	f993 a000 	ldrsb.w	sl, [r3]
 800b45e:	4689      	mov	r9, r1
 800b460:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b464:	d02b      	beq.n	800b4be <sqrt+0x76>
 800b466:	4622      	mov	r2, r4
 800b468:	462b      	mov	r3, r5
 800b46a:	4620      	mov	r0, r4
 800b46c:	4629      	mov	r1, r5
 800b46e:	f7f5 facd 	bl	8000a0c <__aeabi_dcmpun>
 800b472:	4683      	mov	fp, r0
 800b474:	bb18      	cbnz	r0, 800b4be <sqrt+0x76>
 800b476:	2600      	movs	r6, #0
 800b478:	2700      	movs	r7, #0
 800b47a:	4632      	mov	r2, r6
 800b47c:	463b      	mov	r3, r7
 800b47e:	4620      	mov	r0, r4
 800b480:	4629      	mov	r1, r5
 800b482:	f7f5 fa9b 	bl	80009bc <__aeabi_dcmplt>
 800b486:	b1d0      	cbz	r0, 800b4be <sqrt+0x76>
 800b488:	2301      	movs	r3, #1
 800b48a:	9300      	str	r3, [sp, #0]
 800b48c:	4b17      	ldr	r3, [pc, #92]	; (800b4ec <sqrt+0xa4>)
 800b48e:	f8cd b020 	str.w	fp, [sp, #32]
 800b492:	9301      	str	r3, [sp, #4]
 800b494:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800b498:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b49c:	f1ba 0f00 	cmp.w	sl, #0
 800b4a0:	d112      	bne.n	800b4c8 <sqrt+0x80>
 800b4a2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b4a6:	4668      	mov	r0, sp
 800b4a8:	f000 f9ac 	bl	800b804 <matherr>
 800b4ac:	b1b8      	cbz	r0, 800b4de <sqrt+0x96>
 800b4ae:	9b08      	ldr	r3, [sp, #32]
 800b4b0:	b11b      	cbz	r3, 800b4ba <sqrt+0x72>
 800b4b2:	f7fd fae1 	bl	8008a78 <__errno>
 800b4b6:	9b08      	ldr	r3, [sp, #32]
 800b4b8:	6003      	str	r3, [r0, #0]
 800b4ba:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800b4be:	4640      	mov	r0, r8
 800b4c0:	4649      	mov	r1, r9
 800b4c2:	b00b      	add	sp, #44	; 0x2c
 800b4c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4c8:	4632      	mov	r2, r6
 800b4ca:	463b      	mov	r3, r7
 800b4cc:	4630      	mov	r0, r6
 800b4ce:	4639      	mov	r1, r7
 800b4d0:	f7f5 f92c 	bl	800072c <__aeabi_ddiv>
 800b4d4:	f1ba 0f02 	cmp.w	sl, #2
 800b4d8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b4dc:	d1e3      	bne.n	800b4a6 <sqrt+0x5e>
 800b4de:	f7fd facb 	bl	8008a78 <__errno>
 800b4e2:	2321      	movs	r3, #33	; 0x21
 800b4e4:	6003      	str	r3, [r0, #0]
 800b4e6:	e7e2      	b.n	800b4ae <sqrt+0x66>
 800b4e8:	2000034c 	.word	0x2000034c
 800b4ec:	0800bbd0 	.word	0x0800bbd0

0800b4f0 <__ieee754_atan2>:
 800b4f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4f4:	4256      	negs	r6, r2
 800b4f6:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 800b4fa:	4316      	orrs	r6, r2
 800b4fc:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 800b6a8 <__ieee754_atan2+0x1b8>
 800b500:	ea4c 76d6 	orr.w	r6, ip, r6, lsr #31
 800b504:	454e      	cmp	r6, r9
 800b506:	4604      	mov	r4, r0
 800b508:	460d      	mov	r5, r1
 800b50a:	469e      	mov	lr, r3
 800b50c:	d808      	bhi.n	800b520 <__ieee754_atan2+0x30>
 800b50e:	4246      	negs	r6, r0
 800b510:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800b514:	4306      	orrs	r6, r0
 800b516:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 800b51a:	454e      	cmp	r6, r9
 800b51c:	4688      	mov	r8, r1
 800b51e:	d906      	bls.n	800b52e <__ieee754_atan2+0x3e>
 800b520:	4620      	mov	r0, r4
 800b522:	4629      	mov	r1, r5
 800b524:	f7f4 fe22 	bl	800016c <__adddf3>
 800b528:	4604      	mov	r4, r0
 800b52a:	460d      	mov	r5, r1
 800b52c:	e030      	b.n	800b590 <__ieee754_atan2+0xa0>
 800b52e:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 800b532:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800b536:	4316      	orrs	r6, r2
 800b538:	d103      	bne.n	800b542 <__ieee754_atan2+0x52>
 800b53a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b53e:	f7ff bdf3 	b.w	800b128 <atan>
 800b542:	179e      	asrs	r6, r3, #30
 800b544:	f006 0602 	and.w	r6, r6, #2
 800b548:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800b54c:	ea57 0100 	orrs.w	r1, r7, r0
 800b550:	d107      	bne.n	800b562 <__ieee754_atan2+0x72>
 800b552:	2e02      	cmp	r6, #2
 800b554:	d079      	beq.n	800b64a <__ieee754_atan2+0x15a>
 800b556:	2e03      	cmp	r6, #3
 800b558:	d11a      	bne.n	800b590 <__ieee754_atan2+0xa0>
 800b55a:	a541      	add	r5, pc, #260	; (adr r5, 800b660 <__ieee754_atan2+0x170>)
 800b55c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b560:	e016      	b.n	800b590 <__ieee754_atan2+0xa0>
 800b562:	ea5c 0102 	orrs.w	r1, ip, r2
 800b566:	d106      	bne.n	800b576 <__ieee754_atan2+0x86>
 800b568:	f1b8 0f00 	cmp.w	r8, #0
 800b56c:	da71      	bge.n	800b652 <__ieee754_atan2+0x162>
 800b56e:	a53e      	add	r5, pc, #248	; (adr r5, 800b668 <__ieee754_atan2+0x178>)
 800b570:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b574:	e00c      	b.n	800b590 <__ieee754_atan2+0xa0>
 800b576:	45cc      	cmp	ip, r9
 800b578:	d123      	bne.n	800b5c2 <__ieee754_atan2+0xd2>
 800b57a:	4567      	cmp	r7, ip
 800b57c:	d114      	bne.n	800b5a8 <__ieee754_atan2+0xb8>
 800b57e:	2e02      	cmp	r6, #2
 800b580:	d00a      	beq.n	800b598 <__ieee754_atan2+0xa8>
 800b582:	2e03      	cmp	r6, #3
 800b584:	d00c      	beq.n	800b5a0 <__ieee754_atan2+0xb0>
 800b586:	2e01      	cmp	r6, #1
 800b588:	d15b      	bne.n	800b642 <__ieee754_atan2+0x152>
 800b58a:	a539      	add	r5, pc, #228	; (adr r5, 800b670 <__ieee754_atan2+0x180>)
 800b58c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b590:	4620      	mov	r0, r4
 800b592:	4629      	mov	r1, r5
 800b594:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b598:	a537      	add	r5, pc, #220	; (adr r5, 800b678 <__ieee754_atan2+0x188>)
 800b59a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b59e:	e7f7      	b.n	800b590 <__ieee754_atan2+0xa0>
 800b5a0:	a537      	add	r5, pc, #220	; (adr r5, 800b680 <__ieee754_atan2+0x190>)
 800b5a2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b5a6:	e7f3      	b.n	800b590 <__ieee754_atan2+0xa0>
 800b5a8:	2e02      	cmp	r6, #2
 800b5aa:	d04e      	beq.n	800b64a <__ieee754_atan2+0x15a>
 800b5ac:	2e03      	cmp	r6, #3
 800b5ae:	d0d4      	beq.n	800b55a <__ieee754_atan2+0x6a>
 800b5b0:	2e01      	cmp	r6, #1
 800b5b2:	f04f 0400 	mov.w	r4, #0
 800b5b6:	d102      	bne.n	800b5be <__ieee754_atan2+0xce>
 800b5b8:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 800b5bc:	e7e8      	b.n	800b590 <__ieee754_atan2+0xa0>
 800b5be:	2500      	movs	r5, #0
 800b5c0:	e7e6      	b.n	800b590 <__ieee754_atan2+0xa0>
 800b5c2:	454f      	cmp	r7, r9
 800b5c4:	d0d0      	beq.n	800b568 <__ieee754_atan2+0x78>
 800b5c6:	eba7 070c 	sub.w	r7, r7, ip
 800b5ca:	153f      	asrs	r7, r7, #20
 800b5cc:	2f3c      	cmp	r7, #60	; 0x3c
 800b5ce:	dc1e      	bgt.n	800b60e <__ieee754_atan2+0x11e>
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	da01      	bge.n	800b5d8 <__ieee754_atan2+0xe8>
 800b5d4:	373c      	adds	r7, #60	; 0x3c
 800b5d6:	db1e      	blt.n	800b616 <__ieee754_atan2+0x126>
 800b5d8:	4620      	mov	r0, r4
 800b5da:	4629      	mov	r1, r5
 800b5dc:	f7f5 f8a6 	bl	800072c <__aeabi_ddiv>
 800b5e0:	f7ff ff2c 	bl	800b43c <fabs>
 800b5e4:	f7ff fda0 	bl	800b128 <atan>
 800b5e8:	4604      	mov	r4, r0
 800b5ea:	460d      	mov	r5, r1
 800b5ec:	2e01      	cmp	r6, #1
 800b5ee:	d015      	beq.n	800b61c <__ieee754_atan2+0x12c>
 800b5f0:	2e02      	cmp	r6, #2
 800b5f2:	d017      	beq.n	800b624 <__ieee754_atan2+0x134>
 800b5f4:	2e00      	cmp	r6, #0
 800b5f6:	d0cb      	beq.n	800b590 <__ieee754_atan2+0xa0>
 800b5f8:	a323      	add	r3, pc, #140	; (adr r3, 800b688 <__ieee754_atan2+0x198>)
 800b5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5fe:	4620      	mov	r0, r4
 800b600:	4629      	mov	r1, r5
 800b602:	f7f4 fdb1 	bl	8000168 <__aeabi_dsub>
 800b606:	a322      	add	r3, pc, #136	; (adr r3, 800b690 <__ieee754_atan2+0x1a0>)
 800b608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b60c:	e016      	b.n	800b63c <__ieee754_atan2+0x14c>
 800b60e:	a522      	add	r5, pc, #136	; (adr r5, 800b698 <__ieee754_atan2+0x1a8>)
 800b610:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b614:	e7ea      	b.n	800b5ec <__ieee754_atan2+0xfc>
 800b616:	2400      	movs	r4, #0
 800b618:	2500      	movs	r5, #0
 800b61a:	e7e7      	b.n	800b5ec <__ieee754_atan2+0xfc>
 800b61c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800b620:	461d      	mov	r5, r3
 800b622:	e7b5      	b.n	800b590 <__ieee754_atan2+0xa0>
 800b624:	a318      	add	r3, pc, #96	; (adr r3, 800b688 <__ieee754_atan2+0x198>)
 800b626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b62a:	4620      	mov	r0, r4
 800b62c:	4629      	mov	r1, r5
 800b62e:	f7f4 fd9b 	bl	8000168 <__aeabi_dsub>
 800b632:	4602      	mov	r2, r0
 800b634:	460b      	mov	r3, r1
 800b636:	a116      	add	r1, pc, #88	; (adr r1, 800b690 <__ieee754_atan2+0x1a0>)
 800b638:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b63c:	f7f4 fd94 	bl	8000168 <__aeabi_dsub>
 800b640:	e772      	b.n	800b528 <__ieee754_atan2+0x38>
 800b642:	a517      	add	r5, pc, #92	; (adr r5, 800b6a0 <__ieee754_atan2+0x1b0>)
 800b644:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b648:	e7a2      	b.n	800b590 <__ieee754_atan2+0xa0>
 800b64a:	a511      	add	r5, pc, #68	; (adr r5, 800b690 <__ieee754_atan2+0x1a0>)
 800b64c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b650:	e79e      	b.n	800b590 <__ieee754_atan2+0xa0>
 800b652:	a511      	add	r5, pc, #68	; (adr r5, 800b698 <__ieee754_atan2+0x1a8>)
 800b654:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b658:	e79a      	b.n	800b590 <__ieee754_atan2+0xa0>
 800b65a:	bf00      	nop
 800b65c:	f3af 8000 	nop.w
 800b660:	54442d18 	.word	0x54442d18
 800b664:	c00921fb 	.word	0xc00921fb
 800b668:	54442d18 	.word	0x54442d18
 800b66c:	bff921fb 	.word	0xbff921fb
 800b670:	54442d18 	.word	0x54442d18
 800b674:	bfe921fb 	.word	0xbfe921fb
 800b678:	7f3321d2 	.word	0x7f3321d2
 800b67c:	4002d97c 	.word	0x4002d97c
 800b680:	7f3321d2 	.word	0x7f3321d2
 800b684:	c002d97c 	.word	0xc002d97c
 800b688:	33145c07 	.word	0x33145c07
 800b68c:	3ca1a626 	.word	0x3ca1a626
 800b690:	54442d18 	.word	0x54442d18
 800b694:	400921fb 	.word	0x400921fb
 800b698:	54442d18 	.word	0x54442d18
 800b69c:	3ff921fb 	.word	0x3ff921fb
 800b6a0:	54442d18 	.word	0x54442d18
 800b6a4:	3fe921fb 	.word	0x3fe921fb
 800b6a8:	7ff00000 	.word	0x7ff00000

0800b6ac <__ieee754_sqrt>:
 800b6ac:	4b54      	ldr	r3, [pc, #336]	; (800b800 <__ieee754_sqrt+0x154>)
 800b6ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6b2:	438b      	bics	r3, r1
 800b6b4:	4606      	mov	r6, r0
 800b6b6:	460d      	mov	r5, r1
 800b6b8:	460a      	mov	r2, r1
 800b6ba:	460c      	mov	r4, r1
 800b6bc:	d10f      	bne.n	800b6de <__ieee754_sqrt+0x32>
 800b6be:	4602      	mov	r2, r0
 800b6c0:	460b      	mov	r3, r1
 800b6c2:	f7f4 ff09 	bl	80004d8 <__aeabi_dmul>
 800b6c6:	4602      	mov	r2, r0
 800b6c8:	460b      	mov	r3, r1
 800b6ca:	4630      	mov	r0, r6
 800b6cc:	4629      	mov	r1, r5
 800b6ce:	f7f4 fd4d 	bl	800016c <__adddf3>
 800b6d2:	4606      	mov	r6, r0
 800b6d4:	460d      	mov	r5, r1
 800b6d6:	4630      	mov	r0, r6
 800b6d8:	4629      	mov	r1, r5
 800b6da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6de:	2900      	cmp	r1, #0
 800b6e0:	4607      	mov	r7, r0
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	dc0e      	bgt.n	800b704 <__ieee754_sqrt+0x58>
 800b6e6:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800b6ea:	ea5c 0707 	orrs.w	r7, ip, r7
 800b6ee:	d0f2      	beq.n	800b6d6 <__ieee754_sqrt+0x2a>
 800b6f0:	b141      	cbz	r1, 800b704 <__ieee754_sqrt+0x58>
 800b6f2:	4602      	mov	r2, r0
 800b6f4:	460b      	mov	r3, r1
 800b6f6:	f7f4 fd37 	bl	8000168 <__aeabi_dsub>
 800b6fa:	4602      	mov	r2, r0
 800b6fc:	460b      	mov	r3, r1
 800b6fe:	f7f5 f815 	bl	800072c <__aeabi_ddiv>
 800b702:	e7e6      	b.n	800b6d2 <__ieee754_sqrt+0x26>
 800b704:	1512      	asrs	r2, r2, #20
 800b706:	d074      	beq.n	800b7f2 <__ieee754_sqrt+0x146>
 800b708:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b70c:	07d5      	lsls	r5, r2, #31
 800b70e:	f04f 0500 	mov.w	r5, #0
 800b712:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b716:	bf48      	it	mi
 800b718:	0fd9      	lsrmi	r1, r3, #31
 800b71a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800b71e:	bf44      	itt	mi
 800b720:	005b      	lslmi	r3, r3, #1
 800b722:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800b726:	1051      	asrs	r1, r2, #1
 800b728:	0fda      	lsrs	r2, r3, #31
 800b72a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800b72e:	4628      	mov	r0, r5
 800b730:	2216      	movs	r2, #22
 800b732:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800b736:	005b      	lsls	r3, r3, #1
 800b738:	1987      	adds	r7, r0, r6
 800b73a:	42a7      	cmp	r7, r4
 800b73c:	bfde      	ittt	le
 800b73e:	19b8      	addle	r0, r7, r6
 800b740:	1be4      	suble	r4, r4, r7
 800b742:	19ad      	addle	r5, r5, r6
 800b744:	0fdf      	lsrs	r7, r3, #31
 800b746:	3a01      	subs	r2, #1
 800b748:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800b74c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b750:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b754:	d1f0      	bne.n	800b738 <__ieee754_sqrt+0x8c>
 800b756:	f04f 0c20 	mov.w	ip, #32
 800b75a:	4696      	mov	lr, r2
 800b75c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b760:	4284      	cmp	r4, r0
 800b762:	eb06 070e 	add.w	r7, r6, lr
 800b766:	dc02      	bgt.n	800b76e <__ieee754_sqrt+0xc2>
 800b768:	d112      	bne.n	800b790 <__ieee754_sqrt+0xe4>
 800b76a:	429f      	cmp	r7, r3
 800b76c:	d810      	bhi.n	800b790 <__ieee754_sqrt+0xe4>
 800b76e:	2f00      	cmp	r7, #0
 800b770:	eb07 0e06 	add.w	lr, r7, r6
 800b774:	da42      	bge.n	800b7fc <__ieee754_sqrt+0x150>
 800b776:	f1be 0f00 	cmp.w	lr, #0
 800b77a:	db3f      	blt.n	800b7fc <__ieee754_sqrt+0x150>
 800b77c:	f100 0801 	add.w	r8, r0, #1
 800b780:	1a24      	subs	r4, r4, r0
 800b782:	4640      	mov	r0, r8
 800b784:	429f      	cmp	r7, r3
 800b786:	bf88      	it	hi
 800b788:	f104 34ff 	addhi.w	r4, r4, #4294967295
 800b78c:	1bdb      	subs	r3, r3, r7
 800b78e:	4432      	add	r2, r6
 800b790:	0064      	lsls	r4, r4, #1
 800b792:	f1bc 0c01 	subs.w	ip, ip, #1
 800b796:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800b79a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b79e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b7a2:	d1dd      	bne.n	800b760 <__ieee754_sqrt+0xb4>
 800b7a4:	4323      	orrs	r3, r4
 800b7a6:	d006      	beq.n	800b7b6 <__ieee754_sqrt+0x10a>
 800b7a8:	1c54      	adds	r4, r2, #1
 800b7aa:	bf0b      	itete	eq
 800b7ac:	4662      	moveq	r2, ip
 800b7ae:	3201      	addne	r2, #1
 800b7b0:	3501      	addeq	r5, #1
 800b7b2:	f022 0201 	bicne.w	r2, r2, #1
 800b7b6:	106b      	asrs	r3, r5, #1
 800b7b8:	0852      	lsrs	r2, r2, #1
 800b7ba:	07e8      	lsls	r0, r5, #31
 800b7bc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b7c0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b7c4:	bf48      	it	mi
 800b7c6:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b7ca:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800b7ce:	4616      	mov	r6, r2
 800b7d0:	e781      	b.n	800b6d6 <__ieee754_sqrt+0x2a>
 800b7d2:	0adc      	lsrs	r4, r3, #11
 800b7d4:	3915      	subs	r1, #21
 800b7d6:	055b      	lsls	r3, r3, #21
 800b7d8:	2c00      	cmp	r4, #0
 800b7da:	d0fa      	beq.n	800b7d2 <__ieee754_sqrt+0x126>
 800b7dc:	02e6      	lsls	r6, r4, #11
 800b7de:	d50a      	bpl.n	800b7f6 <__ieee754_sqrt+0x14a>
 800b7e0:	f1c2 0020 	rsb	r0, r2, #32
 800b7e4:	fa23 f000 	lsr.w	r0, r3, r0
 800b7e8:	1e55      	subs	r5, r2, #1
 800b7ea:	4093      	lsls	r3, r2
 800b7ec:	4304      	orrs	r4, r0
 800b7ee:	1b4a      	subs	r2, r1, r5
 800b7f0:	e78a      	b.n	800b708 <__ieee754_sqrt+0x5c>
 800b7f2:	4611      	mov	r1, r2
 800b7f4:	e7f0      	b.n	800b7d8 <__ieee754_sqrt+0x12c>
 800b7f6:	0064      	lsls	r4, r4, #1
 800b7f8:	3201      	adds	r2, #1
 800b7fa:	e7ef      	b.n	800b7dc <__ieee754_sqrt+0x130>
 800b7fc:	4680      	mov	r8, r0
 800b7fe:	e7bf      	b.n	800b780 <__ieee754_sqrt+0xd4>
 800b800:	7ff00000 	.word	0x7ff00000

0800b804 <matherr>:
 800b804:	2000      	movs	r0, #0
 800b806:	4770      	bx	lr

0800b808 <_init>:
 800b808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b80a:	bf00      	nop
 800b80c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b80e:	bc08      	pop	{r3}
 800b810:	469e      	mov	lr, r3
 800b812:	4770      	bx	lr

0800b814 <_fini>:
 800b814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b816:	bf00      	nop
 800b818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b81a:	bc08      	pop	{r3}
 800b81c:	469e      	mov	lr, r3
 800b81e:	4770      	bx	lr
